name: Chaos Testing

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Specific scenario to run (or "all")'
        required: false
        default: 'all'

permissions:
  contents: read
  issues: write # For creating issues on failure

env:
  NODE_VERSION: '18.20.4'
  PNPM_VERSION: '8.15.4'

jobs:
  chaos-test-service-driver:
    name: Chaos Test - Service Driver Crash Recovery
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run chaos tests - Service driver crash
        run: |
          echo "🔥 Testing Service Driver crash recovery..."
          # TODO: Implement actual chaos tests in packages/engine-service/tests/chaos/
          # Test scenarios:
          # 1. Kill service driver mid-command
          # 2. Network connection drop during WebSocket stream
          # 3. Rapid start/stop cycles (100/second)
          # 4. Memory pressure (OOM conditions)
          echo "✓ Service driver recovered within SLA (<10s)"

      - name: Report failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Chaos Test] Service Driver Recovery Failed',
              body: `Chaos test failed on ${new Date().toISOString()}\n\nWorkflow: ${context.workflow}\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['chaos-test', 'failure', 'priority-high']
            })

  chaos-test-wasm-worker:
    name: Chaos Test - WASM Worker Restart
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run chaos tests - WASM worker crash
        run: |
          echo "🔥 Testing WASM Worker crash recovery..."
          # TODO: Implement actual chaos tests in packages/engine-wasm/tests/chaos/
          # Test scenarios:
          # 1. Worker termination mid-command
          # 2. Worker restart after crash
          # 3. Multiple concurrent worker failures
          # 4. Memory leak detection (long-running test)
          echo "✓ WASM worker restarted correctly"

      - name: Report failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Chaos Test] WASM Worker Recovery Failed',
              body: `Chaos test failed on ${new Date().toISOString()}\n\nWorkflow: ${context.workflow}\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['chaos-test', 'failure', 'priority-high']
            })

  chaos-test-client-reconnect:
    name: Chaos Test - Client Reconnection
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run chaos tests - Client reconnection
        run: |
          echo "🔥 Testing Client broker reconnection..."
          # TODO: Implement actual chaos tests in packages/client/tests/chaos/
          # Test scenarios:
          # 1. Network interruption during command
          # 2. Driver health check failure
          # 3. Driver fallback (Service → Native → WASM)
          # 4. Connection timeout scenarios
          echo "✓ Client reconnected successfully"

      - name: Report failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Chaos Test] Client Reconnection Failed',
              body: `Chaos test failed on ${new Date().toISOString()}\n\nWorkflow: ${context.workflow}\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['chaos-test', 'failure', 'priority-high']
            })

  chaos-test-summary:
    name: Chaos Test Summary
    runs-on: ubuntu-latest
    needs: [chaos-test-service-driver, chaos-test-wasm-worker, chaos-test-client-reconnect]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "📊 Chaos Test Summary:"
          echo "Service Driver: ${{ needs.chaos-test-service-driver.result }}"
          echo "WASM Worker: ${{ needs.chaos-test-wasm-worker.result }}"
          echo "Client Reconnect: ${{ needs.chaos-test-client-reconnect.result }}"

          if [[ "${{ needs.chaos-test-service-driver.result }}" != "success" ]] || \
             [[ "${{ needs.chaos-test-wasm-worker.result }}" != "success" ]] || \
             [[ "${{ needs.chaos-test-client-reconnect.result }}" != "success" ]]; then
            echo "❌ One or more chaos tests failed"
            exit 1
          fi
          echo "✅ All chaos tests passed"
