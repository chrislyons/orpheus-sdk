name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Mondays at 8 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

env:
  NODE_VERSION: '18.20.4'
  PNPM_VERSION: '8.15.4'

jobs:
  # ============================================================================
  # NPM Audit
  # ============================================================================
  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Run pnpm audit
        run: |
          echo "üîç Running pnpm audit..."
          pnpm audit --audit-level=moderate || true

          # Generate detailed audit report
          pnpm audit --json > audit-report.json || true

          # Check for high/critical vulnerabilities
          if pnpm audit --audit-level=high 2>&1 | grep -q "vulnerabilities"; then
            echo "‚ùå High or critical vulnerabilities found"
            pnpm audit --audit-level=high
            exit 1
          fi

          echo "‚úÖ No high or critical vulnerabilities found"

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: audit-report.json
          if-no-files-found: ignore

  # ============================================================================
  # OSV Scanner (Google's vulnerability database)
  # ============================================================================
  osv-scanner:
    name: OSV Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1.9.0
        continue-on-error: true
        with:
          scan-args: |-
            --recursive
            --skip-git
            ./

  # ============================================================================
  # SBOM Generation (CycloneDX format)
  # ============================================================================
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install CycloneDX CLI
        run: npm install -g @cyclonedx/cyclonedx-npm

      - name: Generate SBOM for root
        run: |
          echo "üì¶ Generating Software Bill of Materials (SBOM)..."
          cyclonedx-npm --output-file sbom-root.json || echo "Root SBOM generation failed"

      - name: Generate SBOMs for packages
        run: |
          for pkg in packages/*/; do
            if [ -f "$pkg/package.json" ]; then
              pkg_name=$(basename "$pkg")
              echo "üì¶ Generating SBOM for $pkg_name..."
              cd "$pkg"
              cyclonedx-npm --output-file "../../sbom-${pkg_name}.json" || echo "SBOM generation failed for $pkg_name"
              cd ../..
            fi
          done

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: sbom-*.json
          if-no-files-found: warn

  # ============================================================================
  # Dependency Review (Pull Requests Only)
  # ============================================================================
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-3.0, LGPL-2.1, LGPL-3.0

  # ============================================================================
  # Security Summary
  # ============================================================================
  security-summary:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    needs: [npm-audit, osv-scanner, sbom-generation]
    if: always()

    steps:
      - name: Check audit results
        run: |
          echo "üîí Security Audit Summary:"
          echo "NPM Audit: ${{ needs.npm-audit.result }}"
          echo "OSV Scanner: ${{ needs.osv-scanner.result }}"
          echo "SBOM Generation: ${{ needs.sbom-generation.result }}"

          if [[ "${{ needs.npm-audit.result }}" == "failure" ]]; then
            echo "‚ùå NPM audit found high/critical vulnerabilities"
            exit 1
          fi

          if [[ "${{ needs.npm-audit.result }}" == "success" ]] && \
             [[ "${{ needs.sbom-generation.result }}" == "success" ]]; then
            echo "‚úÖ Security audit passed"
          else
            echo "‚ö†Ô∏è  Some security checks had issues (see logs above)"
          fi

      - name: Create issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Security Alert] Weekly audit found vulnerabilities',
              body: `Security audit failed on ${new Date().toISOString()}\\n\\nWorkflow: ${context.workflow}\\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['security', 'audit-failure', 'priority-high']
            })
