name: Interim CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-cpp:
    name: Build C++ (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
          - os: windows-latest
            generator: "Visual Studio 17 2022"
          - os: macos-latest
            generator: "Unix Makefiles"

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.27.x'

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -G "${{ matrix.generator }}"

      - name: Build
        run: cmake --build build --config Debug

      - name: Test
        run: ctest --test-dir build --output-on-failure --build-config Debug

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}

  build-native-driver:
    name: Build Native Driver (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [build-cpp]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@8.15.4 --activate

      - name: Install dependencies
        working-directory: packages/engine-native
        run: pnpm install --frozen-lockfile

      - name: Build TypeScript
        working-directory: packages/engine-native
        run: pnpm run build:ts

      - name: Restore CMake cache
        uses: actions/cache@v3
        with:
          path: build-release
          key: ${{ runner.os }}-cmake-release-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-cmake-release-

      - name: Build C++ SDK (if not cached)
        run: |
          if [ ! -d "build-release" ]; then
            cmake -S . -B build-release -DCMAKE_BUILD_TYPE=Release
            cmake --build build-release
          fi
        shell: bash

      - name: Build Native Driver
        working-directory: packages/engine-native
        run: pnpm run build:native

      - name: Upload Native Driver Artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-driver-${{ matrix.os }}
          path: packages/engine-native/build/Release/orpheus_native.node
          if-no-files-found: error

  build-ui:
    name: Build UI & Run Tests
    runs-on: ubuntu-latest
    env:
      PUPPETEER_SKIP_DOWNLOAD: 'true'

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm (v8 pinned)
        run: corepack prepare pnpm@8.15.4 --activate

      - name: Verify pnpm
        run: pnpm -v

      - name: Get PNPM store path
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint TypeScript
        run: pnpm run lint:js
      
      - name: Type check
        run: pnpm run type-check || echo "Type checking not configured yet"
      
      - name: Build packages
        env:
          NEXT_PUBLIC_APP_URL: https://ui.elevenlabs.io
        run: pnpm run build

      - name: Build Service Driver
        working-directory: packages/engine-service
        run: pnpm run build

      - name: Build Client Broker
        working-directory: packages/client
        run: pnpm run build

      - name: Build React Integration
        working-directory: packages/react
        run: pnpm run build

      - name: Upload Service Driver Artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-driver-ubuntu
          path: packages/engine-service/dist/
          if-no-files-found: error

      - name: Run tests
        run: pnpm run test || echo "Tests not configured yet"

  integration-tests:
    name: Integration Smoke Tests
    runs-on: ubuntu-latest
    needs: [build-ui]
    env:
      PUPPETEER_SKIP_DOWNLOAD: 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.20.4'

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare pnpm
        run: corepack prepare pnpm@8.15.4 --activate

      - name: Get PNPM store path
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build

      - name: Run integration tests
        run: pnpm run test:integration

  lint-cpp:
    name: Lint C++
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format-14
      
      - name: Run clang-format
        run: |
          find src include -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
          xargs clang-format-14 --dry-run --Werror

  status-check:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [build-cpp, build-native-driver, build-ui, integration-tests, lint-cpp]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.build-cpp.result }}" != "success" ]] || \
             [[ "${{ needs.build-native-driver.result }}" != "success" ]] || \
             [[ "${{ needs.build-ui.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.lint-cpp.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
