name: Interim CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-cpp:
    name: Build C++ (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
          - os: windows-latest
            generator: "Visual Studio 17 2022"
          - os: macos-latest
            generator: "Unix Makefiles"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.27.x'
      
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -G "${{ matrix.generator }}"
      
      - name: Build
        run: cmake --build build --config Debug
      
      - name: Test
        run: ctest --test-dir build --output-on-failure --build-config Debug

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-logs
          path: build/**/Testing/**
          if-no-files-found: ignore

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}

  build-ui:
    name: Build UI & Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Get PNPM store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Cache PNPM store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint TypeScript
        run: pnpm run lint:js
      
      - name: Type check
        run: pnpm run type-check || echo "Type checking not configured yet"
      
      - name: Build packages
        run: pnpm run build
      
      - name: Run tests
        run: pnpm run test || echo "Tests not configured yet"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ui-logs
          path: |
            pnpm-debug.log
            **/pnpm-debug.log
          if-no-files-found: ignore

  lint-cpp:
    name: Lint C++
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format-14
      
      - name: Run clang-format
        run: |
          find src include -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
          xargs clang-format-14 --dry-run --Werror

  status-check:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [build-cpp, build-ui, lint-cpp]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "build-cpp: ${{ needs.build-cpp.result }}"
          echo "build-ui:  ${{ needs.build-ui.result }}"
          echo "lint-cpp:  ${{ needs.lint-cpp.result }}"
          if [[ "${{ needs.build-cpp.result }}" != "success" ]] || \
             [[ "${{ needs.build-ui.result }}" != "success" ]] || \
             [[ "${{ needs.lint-cpp.result }}" != "success" ]]; then
            echo "One or more jobs failed â€” see above for details."
            exit 1
          fi
