# SPDX-License-Identifier: MIT
name: CI

on:
  push:
    branches: [ main, release/* ]
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug]
        compiler: [gcc, clang]  # keep PR matrix lean; expand on main/nightlies only
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      # TODO: keep existing build/test steps below unchanged
      - name: Configure
        run: |
          extra=""
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            extra="-DCMAKE_OSX_ARCHITECTURES=arm64"
          fi
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DORP_WITH_TESTS=ON \
            -DORP_BUILD_REAPER=ON \
            -DORP_BUILD_MINHOST=ON \
            -DORP_BUILD_ABI_DYNAMIC=ON \
            ${extra}
        shell: bash

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Test
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            export PATH="$(pwd)/build:${PATH}"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            export DYLD_LIBRARY_PATH="$(pwd)/build:${DYLD_LIBRARY_PATH}"
          else
            export LD_LIBRARY_PATH="$(pwd)/build:${LD_LIBRARY_PATH}"
          fi
          ctest --test-dir build --output-on-failure --build-config ${{ matrix.build_type }}

  perf-smoke:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    name: perf-smoke
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure
        run: cmake -S . -B build-perf -DCMAKE_BUILD_TYPE=Release -DENABLE_LTO=ON -DORP_WITH_TESTS=OFF -DORP_BUILD_REAPER=OFF -DORP_BUILD_MINHOST=OFF
        shell: bash

      - name: Build perf tools
        run: cmake --build build-perf --config Release --target orpheus_perf_render_click
        shell: bash

      - name: Perf smoke
        run: ./build-perf/tools/perf/orpheus_perf_render_click
        shell: bash

  legal:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    name: legal-compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install reuse
        run: python -m pip install --upgrade pip reuse

      - name: Run reuse lint
        run: reuse lint
        env:
          PYTHONWARNINGS: ignore
