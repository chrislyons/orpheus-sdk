name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Cache CMake downloads
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/cmake
          key: ${{ runner.os }}-cmake-${{ hashFiles('**/CMakeLists.txt', 'cmake/**/*.cmake') }}
          restore-keys: ${{ runner.os }}-cmake-

      - name: Cache ccache
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt', 'cmake/**/*.cmake', 'include/**/*.hpp', 'src/**/*.cpp', 'tests/**/*.cpp') }}
          restore-keys: ${{ runner.os }}-ccache-

      - name: Configure Debug
        shell: bash
        env:
          CMAKE_LAUNCHERS: ${{ runner.os == 'Windows' && '' || '-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache' }}
          SANITIZERS: ${{ runner.os == 'Linux' && '-DORP_ENABLE_SANITIZERS=ON' || '' }}
        run: |
          cmake -S . -B build/Debug -GNinja -DCMAKE_BUILD_TYPE=Debug $CMAKE_LAUNCHERS $SANITIZERS

      - name: Build Debug
        run: cmake --build build/Debug
        shell: bash

      - name: Run tests
        run: ctest --test-dir build/Debug --output-on-failure
        shell: bash

      - name: Configure RelWithDebInfo
        shell: bash
        env:
          CMAKE_LAUNCHERS: ${{ runner.os == 'Windows' && '' || '-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache' }}
        run: |
          cmake -S . -B build/RelWithDebInfo -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo $CMAKE_LAUNCHERS

      - name: Build RelWithDebInfo
        run: cmake --build build/RelWithDebInfo
        shell: bash

      - name: Package SDK
        run: cmake --build build/RelWithDebInfo --target package
        shell: bash

      - name: Upload test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-ctest-log
          path: build/Debug/Testing/Temporary/LastTest.log
          if-no-files-found: warn

      - name: Upload packages
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-packages
          path: |
            build/RelWithDebInfo/**/*.zip
            build/RelWithDebInfo/**/*.tar.gz
          if-no-files-found: warn
