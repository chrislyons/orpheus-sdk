# SPDX-License-Identifier: MIT
name: Build & Package

on:
  push:
    branches:
      - main
      - release/**
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.os }} Â· ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, RelWithDebInfo]
    env:
      BUILD_DIR: build/${{ matrix.build_type }}
      CCACHE_DIR: ~/.cache/ccache
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ccache ninja || true

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (-not (Get-Command ninja -ErrorAction SilentlyContinue)) {
            choco install ninja --no-progress
          }

      - name: Cache ccache
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', 'cmake/**/*.cmake', 'src/**/*', 'include/**/*', 'tests/**/*') }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.build_type }}-
            ${{ runner.os }}-ccache-

      - name: Cache CMake configuration
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('CMakeLists.txt', 'cmake/**/*.cmake', 'src/**/*', 'include/**/*', 'tests/**/*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build_type }}-
            ${{ runner.os }}-

      - name: Configure
        shell: bash
        run: |
          mkdir -p "${BUILD_DIR}"
          extra_flags=""
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            extra_flags+=" -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          fi
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.build_type }}" == "Debug" ]]; then
            extra_flags+=" -DORP_ENABLE_SANITIZERS=ON"
          else
            extra_flags+=" -DORP_ENABLE_SANITIZERS=OFF"
          fi
          cmake -S . -B "${BUILD_DIR}" \
            -G Ninja \
            -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" \
            -DORP_WITH_TESTS=ON \
            -DORP_BUILD_REAPER=ON \
            -DORP_BUILD_MINHOST=ON \
            -DORP_BUILD_ABI_DYNAMIC=ON \
            ${extra_flags}

      - name: Build
        run: cmake --build "${{ env.BUILD_DIR }}"

      - name: Run tests
        shell: bash
        run: |
          ctest --test-dir "${BUILD_DIR}" --output-on-failure

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}-ctest-log
          path: |
            ${{ env.BUILD_DIR }}/Testing/Temporary/LastTest.log
            ${{ env.BUILD_DIR }}/Testing/Temporary/CTestCostData.txt
          if-no-files-found: ignore

      - name: Package (CPack)
        if: matrix.build_type == 'RelWithDebInfo'
        shell: bash
        run: |
          cd "${BUILD_DIR}"
          cpack --config CPackConfig.cmake

      - name: Upload packages
        if: matrix.build_type == 'RelWithDebInfo'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-RelWithDebInfo-packages
          path: |
            ${{ env.BUILD_DIR }}/*.zip
            ${{ env.BUILD_DIR }}/*.tar.gz
          if-no-files-found: error

      - name: Show ccache statistics
        if: runner.os != 'Windows'
        shell: bash
        run: ccache -s || true
