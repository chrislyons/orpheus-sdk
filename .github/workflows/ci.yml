name: CI

on:
  push:
    branches: [ main, release/* ]
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, RelWithDebInfo]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fail on binary artifacts in PRs
        if: github.event_name == 'pull_request'
        run: |
          set -euo pipefail
          git fetch --depth=1 origin "${{ github.base_ref }}"
          mapfile -t added < <(git diff --name-only --diff-filter=A "origin/${{ github.base_ref }}"...HEAD)
          if [ ${#added[@]} -eq 0 ]; then
            echo "No newly added files; performing repository scan instead."
          fi
          declare -a banned=(".wav" ".dll" ".exe" ".a" ".so" ".dylib" ".lib")
          declare -a violations=()
          declare -A seen=()
          for file in "${added[@]}"; do
            lower=$(printf '%s' "$file" | tr '[:upper:]' '[:lower:]')
            for ext in "${banned[@]}"; do
              if [[ "$lower" == *"${ext}" ]]; then
                if [[ -z "${seen[$file]:-}" ]]; then
                  violations+=("$file")
                  seen["$file"]=1
                fi
                break
              fi
            done
          done
          if [ ${#violations[@]} -eq 0 ]; then
            mapfile -t tracked < <(git ls-files)
            for file in "${tracked[@]}"; do
              lower=$(printf '%s' "$file" | tr '[:upper:]' '[:lower:]')
              for ext in "${banned[@]}"; do
                if [[ "$lower" == *"${ext}" ]]; then
                  if [[ -z "${seen[$file]:-}" ]]; then
                    violations+=("$file")
                    seen["$file"]=1
                  fi
                  break
                fi
              done
            done
          fi
          if [ ${#violations[@]} -ne 0 ]; then
            echo "Binary artifacts detected by CI guardrails:"
            for file in "${violations[@]}"; do
              echo "  $file"
            done
            echo "Please store binary fixtures as text (e.g. base64) instead of committing them directly."
            exit 1
          fi
      - name: Lint Windows includes
        run: |
          python3 - <<'PY'
          import pathlib
          import sys

          ROOT = pathlib.Path('.')
          violations = []
          for path in ROOT.rglob('*'):
            if not path.is_file():
              continue
            try:
              relative = path.relative_to(ROOT)
            except ValueError:
              continue
            parts = set(relative.parts)
            if 'backup' in parts:
              continue
            if path.suffix.lower() not in {
                '.c', '.cc', '.cxx', '.cpp', '.h', '.hh', '.hpp', '.hxx', '.inl'
            }:
              continue
            try:
              text = path.read_text(encoding='utf-8')
            except UnicodeDecodeError:
              continue
            lines = text.splitlines()
            for index, line in enumerate(lines):
              if '#include <windows.h>' not in line:
                continue
              prior = lines[:index]
              if not any('#define NOMINMAX' in candidate for candidate in prior):
                violations.append(f"{path}:{index + 1}")

          if violations:
            print('Found #include <windows.h> without prior #define NOMINMAX:')
            for violation in violations:
              print(f"  {violation}")
            sys.exit(1)
          PY
      - name: Configure
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} $([[ "${{ matrix.build_type }}" == "Debug" ]] && echo "-DORP_ENABLE_SANITIZERS=ON")
      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} --parallel
        timeout-minutes: 10
      - name: Test
        run: ctest --test-dir build --output-on-failure
        timeout-minutes: 10
      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-${{ matrix.build_type }}
          path: |
            build/Testing/Temporary/LastTest.log
            build/Testing/Temporary/CTestCostData.txt
          if-no-files-found: ignore
