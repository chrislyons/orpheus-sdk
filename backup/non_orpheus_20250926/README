REAPER C/C++ extension plug-in mini-SDK
======================================

This repository includes several sample extension plug-ins and a small
utility library:

* `reaper_csurf`
* `reaper_atmos`
* `reaper_mp3`
* `reaper_stt`
* `sdk/track_playlist` – example library with a `track_playlist_demo` target

Each component can be enabled or disabled when configuring the CMake build.

## Prerequisites

* [WDL](https://github.com/justinfrankel/WDL) checked out next to this repository (`WDL/`).

  The WDL submodule is already declared in this repository's `.gitmodules`, so avoid
  adding it again. Fetch the contents either when cloning the repository:

  ```sh
  git clone --recurse-submodules https://github.com/justinfrankel/reaper-sdk.git
  ```

  or, if the repository has already been cloned, initialize the submodule afterwards:

  ```sh
  git submodule update --init
  ```

  The CMake build requires the `WDL` directory to be present before configuration.
* A C/C++ compiler – Visual Studio 2019 or newer on Windows, GCC/Clang
  (MinGW-w64) on Windows, the Xcode command line tools on macOS, or
  GCC/Clang 9+ on Linux.
* Environment variables pointing at the sources:
  * `REAPER_SDK` – path to this repository.
  * `WDL_PATH` – path to the WDL checkout (defaults to `$REAPER_SDK/WDL`).

The headers live in `sdk/` and sample plug-ins live in
`reaper-plugins/` (these plug-ins ship with REAPER and are useful as
references but are not necessarily good design examples).

## Building

### CMake (Windows, macOS, Linux)

The top-level CMake project always configures the `track_playlist`
library, its `track_playlist_demo` example, and the associated unit
tests. Plug-in targets are currently opt-in and require the WDL checkout
described above.

Configure and build the defaults (library, demo, tests):

```sh
cmake -S . -B build
cmake --build build
```

The cache variable `ORPHEUS_BUILD_REAPER_PLUGINS` controls whether the
REAPER plug-in subdirectories are added to the build graph and defaults
to `OFF`. When left at the default the commands above do **not** produce
plug-in binaries. To attempt a plug-in build, enable the switch:

```sh
cmake -S . -B build -DORPHEUS_BUILD_REAPER_PLUGINS=ON
cmake --build build
```

With the switch enabled CMake checks for `sdk/reaper_plugin.h` and
`WDL/swell/swell.h` and fails early if either prerequisite is missing.
When configuration succeeds, the resulting plug-in binaries are emitted
to `build/plugins/`.

Per-plug-in toggles (`BUILD_REAPER_CSURF`, `BUILD_REAPER_ATMOS`,
`BUILD_REAPER_MP3`, `BUILD_REAPER_STT`) are still declared in
`CMakeLists.txt`, but their corresponding `add_subdirectory(...)`
statements remain commented out, so changing those options has no effect
on the generated targets.【F:CMakeLists.txt†L1241-L1297】 Building only a
subset of plug-ins therefore requires manually editing the build files
or using the Visual Studio / command-line recipes below.

On Windows, specify a generator and configuration when invoking CMake:

```bat
cmake -S . -B build -G "Visual Studio 17 2022"
cmake --build build --config Release
```

On macOS and Linux, the default generator suffices for either the
library-only or plug-in-enabled configuration:

```sh
cmake -S . -B build
cmake --build build
```

The platform-specific sections below rely on the legacy Visual Studio
projects or compiler invocations shipped with each plug-in. They assume
the `WDL` checkout is present beside this repository and that the
`REAPER_SDK` / `WDL_PATH` environment variables described in the
prerequisites are configured before building.

### Windows (Visual Studio)

1. Open a "x64 Native Tools" command prompt.
2. Set environment variables:

   ```bat
   set REAPER_SDK=C:\path\to\reaper-sdk
   set WDL_PATH=%REAPER_SDK%\WDL
   ```

3. Build the sample control surface plug-in:

   ```bat
   msbuild %REAPER_SDK%\reaper-plugins\reaper_csurf\reaper_csurf.vcxproj /p:Configuration=Release
   ```

The resulting `reaper_csurf.dll` will be in the project's `Release`
folder.

### Windows (MinGW-w64 GCC/Clang)

1. Install a MinGW-w64 toolchain (for example via MSYS2 or the
   `mingw-w64` packages).
2. Set environment variables:

   ```sh
   export REAPER_SDK="/path/to/reaper-sdk"
   export WDL_PATH="$REAPER_SDK/WDL"
   ```

3. Build the sample control surface plug-in:

   ```sh
   x86_64-w64-mingw32-g++ -shared -std=c++11 -I"$REAPER_SDK/sdk" -I"$WDL_PATH" \
     reaper-plugins/reaper_csurf/csurf_main.cpp \
     reaper-plugins/reaper_csurf/*.cpp \
     -lws2_32 \
     -o reaper_csurf.dll
   ```

The resulting `reaper_csurf.dll` will be in the current directory.

### macOS (clang)

1. Install the Xcode command line tools.
2. Set environment variables:

   ```sh
   export REAPER_SDK="$HOME/projects/reaper-sdk"
   export WDL_PATH="$REAPER_SDK/WDL"
   ```

3. Optionally generate macOS resource files for plug-ins that include a
   `res.rc` (plug-ins without such resources can skip this step):

   ```sh
   "$WDL_PATH/WDL/swell/swell_dlggen" reaper-plugins/reaper_csurf/res.rc
   "$WDL_PATH/WDL/swell/swell_menu"   reaper-plugins/reaper_csurf/res.rc
   # or run all generators at once
   ./scripts/gen_mac_resources.sh
   ```
   These commands produce `res.rc_mac_dlg` and `res.rc_mac_menu`
   alongside the original `res.rc` and must be run whenever the
   resources change.

4. Build the sample plug-in (universal binary):

   ```sh
   clang++ -dynamiclib -std=c++11 -arch x86_64 -arch arm64 \
     -I"$REAPER_SDK/sdk" -I"$WDL_PATH" \
     reaper-plugins/reaper_csurf/csurf_main.cpp \
     reaper-plugins/reaper_csurf/*.cpp \
     -framework Cocoa \
     -o reaper_csurf.dylib
   ```
   Other frameworks may be required depending on the plug-in. On macOS
   10.15 and later, the resulting binary must be codesigned and
   notarized if distributed:

   ```sh
   codesign --force --deep --sign - reaper_csurf.dylib
   xcrun notarytool submit --wait reaper_csurf.dylib
   ```

### Linux (gcc/clang)

1. Install GCC or Clang and make.
2. Set the same environment variables as for macOS.
3. Build the sample plug-in:

   ```sh
   g++ -shared -fPIC -std=c++11 -I"$REAPER_SDK/sdk" -I"$WDL_PATH" \
     reaper-plugins/reaper_csurf/csurf_main.cpp \
     reaper-plugins/reaper_csurf/*.cpp \
     -o reaper_csurf.so
   ```

## Loading the plug-in in REAPER

Copy the resulting binary into REAPER's `UserPlugins` directory:

* **Windows:** `%APPDATA%\REAPER\UserPlugins`
* **macOS:** `~/Library/Application Support/REAPER/UserPlugins`
* **Linux:** `~/.config/REAPER/UserPlugins`

Restart REAPER and the plug-in should appear under the "Extensions"
menu.

### Verifying the plug-in entry point

Confirm that the binary exports `REAPER_PLUGIN_ENTRYPOINT` before
loading it:

* **Windows:**

  ```bat
  dumpbin /exports reaper_csurf.dll | findstr REAPER_PLUGIN_ENTRYPOINT
  ```

* **macOS/Linux:**

  ```sh
  nm -g reaper_csurf.{dylib,so} | grep REAPER_PLUGIN_ENTRYPOINT
  ```

If the symbol is present, REAPER will load the plug-in.
