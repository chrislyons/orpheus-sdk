#!/usr/bin/env python3
"""Compare two JSON documents with stable formatting.

This script normalises JSON into a canonical representation so that the
comparison is resilient to formatting differences. When the inputs differ the
script emits a unified diff to the requested output path and exits with a non-zero
status. The diff can be uploaded as a CI artifact for debugging.
"""
from __future__ import annotations

import argparse
import json
import pathlib
import sys
from typing import Any
import difflib


def _canonicalise(value: Any) -> Any:
    """Recursively sort mappings to ensure deterministic output."""
    if isinstance(value, dict):
        return {key: _canonicalise(value[key]) for key in sorted(value)}
    if isinstance(value, list):
        return [_canonicalise(item) for item in value]
    return value


def _normalise_json(path: pathlib.Path) -> str:
    with path.open("r", encoding="utf-8") as handle:
        data = json.load(handle)
    canonical = _canonicalise(data)
    # Force a trailing newline to keep diff output clean.
    return json.dumps(canonical, indent=2, sort_keys=True) + "\n"


def compare_json(actual: pathlib.Path, expected: pathlib.Path, diff_path: pathlib.Path) -> bool:
    actual_normalised = _normalise_json(actual)
    expected_normalised = _normalise_json(expected)

    if actual_normalised == expected_normalised:
        if diff_path.exists():
            diff_path.unlink()
        return True

    diff_lines = difflib.unified_diff(
        expected_normalised.splitlines(keepends=True),
        actual_normalised.splitlines(keepends=True),
        fromfile=str(expected),
        tofile=str(actual),
    )
    diff_path.parent.mkdir(parents=True, exist_ok=True)
    with diff_path.open("w", encoding="utf-8") as handle:
        handle.writelines(diff_lines)
    return False


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description="Compare two JSON files.")
    parser.add_argument("--actual", type=pathlib.Path, required=True, help="Path to the JSON generated by the test run.")
    parser.add_argument("--expected", type=pathlib.Path, required=True, help="Path to the golden JSON fixture.")
    parser.add_argument(
        "--diff",
        type=pathlib.Path,
        required=True,
        help="Where to write the unified diff if the comparison fails.",
    )
    args = parser.parse_args(argv)

    try:
        if compare_json(args.actual, args.expected, args.diff):
            return 0
        return 1
    except json.JSONDecodeError as error:
        print(f"JSON decode error: {error}", file=sys.stderr)
        return 2
    except OSError as error:
        print(f"Filesystem error: {error}", file=sys.stderr)
        return 2


if __name__ == "__main__":
    sys.exit(main())
