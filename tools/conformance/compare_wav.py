#!/usr/bin/env python3
"""Compare two WAV files (with optional base64 fixtures)."""
from __future__ import annotations

import argparse
import base64
import hashlib
import io
import pathlib
import wave
from typing import NamedTuple


class WavInfo(NamedTuple):
    channels: int
    sample_width: int
    frame_rate: int
    data: bytes

    @property
    def frames(self) -> int:
        if self.channels == 0 or self.sample_width == 0:
            return 0
        return len(self.data) // (self.channels * self.sample_width)


def _decode_bytes(path: pathlib.Path) -> tuple[bytes, io.BytesIO | str]:
    if path.suffix == ".b64":
        payload = base64.b64decode(path.read_text(encoding="utf-8"))
        return payload, io.BytesIO(payload)
    payload = path.read_bytes()
    # Returning the filesystem path keeps `wave` from buffering everything twice.
    return payload, str(path)


def _load_wav(path: pathlib.Path) -> WavInfo:
    payload, source = _decode_bytes(path)
    with wave.open(source, "rb") as wav:
        params = wav.getparams()
        frames = wav.readframes(params.nframes)
    return WavInfo(params.nchannels, params.sampwidth, params.framerate, frames)


def compare_wav(actual: pathlib.Path, expected: pathlib.Path, diff_path: pathlib.Path) -> bool:
    actual_info = _load_wav(actual)
    expected_info = _load_wav(expected)

    if (
        actual_info.channels == expected_info.channels
        and actual_info.sample_width == expected_info.sample_width
        and actual_info.frame_rate == expected_info.frame_rate
        and actual_info.data == expected_info.data
    ):
        if diff_path.exists():
            diff_path.unlink()
        return True

    diff_path.parent.mkdir(parents=True, exist_ok=True)
    with diff_path.open("w", encoding="utf-8") as handle:
        handle.write("WAV mismatch detected\n")
        handle.write(f"  Expected channels    : {expected_info.channels}\n")
        handle.write(f"  Actual channels      : {actual_info.channels}\n")
        handle.write(f"  Expected sample width: {expected_info.sample_width}\n")
        handle.write(f"  Actual sample width  : {actual_info.sample_width}\n")
        handle.write(f"  Expected frame rate  : {expected_info.frame_rate}\n")
        handle.write(f"  Actual frame rate    : {actual_info.frame_rate}\n")
        handle.write(
            f"  Expected PCM bytes    : {len(expected_info.data)}\n"
            f"  Actual PCM bytes      : {len(actual_info.data)}\n"
        )

        if actual_info.data != expected_info.data:
            digest_expected = hashlib.sha256(expected_info.data).hexdigest()
            digest_actual = hashlib.sha256(actual_info.data).hexdigest()
            handle.write(f"  Expected SHA-256     : {digest_expected}\n")
            handle.write(f"  Actual SHA-256       : {digest_actual}\n")

            mismatch_index = next(
                (i for i, (a, b) in enumerate(zip(actual_info.data, expected_info.data)) if a != b),
                None,
            )
            if mismatch_index is not None:
                handle.write(f"  First byte mismatch  : {mismatch_index}\n")
    return False


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description="Compare two WAV files.")
    parser.add_argument("--actual", type=pathlib.Path, required=True, help="Path to the WAV generated by the test run.")
    parser.add_argument("--expected", type=pathlib.Path, required=True, help="Path to the golden WAV (binary or .b64 fixture).")
    parser.add_argument(
        "--diff",
        type=pathlib.Path,
        required=True,
        help="Where to write the mismatch report if the comparison fails.",
    )
    args = parser.parse_args(argv)

    try:
        if compare_wav(args.actual, args.expected, args.diff):
            return 0
        return 1
    except wave.Error as error:
        diff_path = args.diff
        diff_path.parent.mkdir(parents=True, exist_ok=True)
        diff_path.write_text(f"WAV decode error: {error}\n", encoding="utf-8")
        return 2
    except OSError as error:
        diff_path = args.diff
        diff_path.parent.mkdir(parents=True, exist_ok=True)
        diff_path.write_text(f"Filesystem error: {error}\n", encoding="utf-8")
        return 2


if __name__ == "__main__":
    import sys

    sys.exit(main())
