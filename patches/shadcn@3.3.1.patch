diff --git a/dist/index.d.ts b/dist/index.d.ts
index 4bbe408a4014267d90143d0229b0ee91fe82f700..36301ef97a91df18cf88c3c29e1b6d6f7eeb394a 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -2,3 +2,4 @@
 export { k as fetchTree, l as getItemTargetPath, c as getRegistriesConfig, b as getRegistriesIndex, a as getRegistry, i as getRegistryBaseColor, h as getRegistryBaseColors, f as getRegistryIcons, g as getRegistryItems, e as getRegistryStyles, d as getShadcnRegistryIndex, r as resolveRegistryItems, j as resolveTree } from './index-jrlOVvd4.js';
 import './schema/index.js';
 import 'zod';
+export * from './schema/index.js';
diff --git a/dist/index.js b/dist/index.js
index a25dfa219b24456debe62f91ba24339d22d728f5..fe8ddd8ec49338d5cc0b53187050f984d467b1bb 100755
--- a/dist/index.js
+++ b/dist/index.js
@@ -59,3 +59,4 @@ Existing CSS variables and components will be overwritten. Continue?`)});g||(s.b
 Before you can run a migration, you must create a valid ${d.info("components.json")} file by running the ${d.info("init")} command.`),s.error(`Learn more at ${d.info("https://ui.shadcn.com/docs/components-json")}.`),s.break(),process.exit(1);}}var br=[{name:"icons",description:"migrate your ui components to a different icon library."},{name:"radix",description:"migrate to radix-ui."}],co=z.object({cwd:z.string(),list:z.boolean(),yes:z.boolean(),migration:z.string().refine(t=>t&&br.some(e=>e.name===t),{message:"You must specify a valid migration. Run `shadcn migrate --list` to see available migrations."}).optional()}),Rr=new Command().name("migrate").description("run a migration.").argument("[migration]","the migration to run.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-l, --list","list all migrations.",false).option("-y, --yes","skip confirmation prompt.",false).action(async(t,e)=>{try{let r=co.parse({cwd:M__default.resolve(e.cwd),migration:t,list:e.list,yes:e.yes});if(r.list||!r.migration){s.info("Available migrations:");for(let n of br)s.info(`- ${n.name}: ${n.description}`);return}if(!r.migration)throw new Error("You must specify a migration. Run `shadcn migrate --list` to see available migrations.");let{errors:i,config:o}=await yr(r);if(i["1"]||i["3"])throw new Error("No `components.json` file found. Ensure you are at the root of your project.");if(!o)throw new Error("Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.");r.migration==="icons"&&await gr(o),r.migration==="radix"&&await hr(o,{yes:r.yes});}catch(r){s.break(),Y(r);}});async function xr(t){let e={},r={cwd:t.cwd,registryFile:M__default.resolve(t.cwd,t.registryFile),outputDir:M__default.resolve(t.cwd,t.outputDir)};if(!Q.existsSync(r.registryFile))return e["13"]=true,{errors:e,resolvePaths:null,config:null};if(!Q.existsSync(M__default.resolve(t.cwd,"components.json")))return e["3"]=true,{errors:e,resolvePaths:null,config:null};await Q.mkdir(r.outputDir,{recursive:true});try{let i$1=await i(t.cwd);return {errors:e,config:i$1,resolvePaths:r}}catch{s.break(),s.error(`An invalid ${d.info("components.json")} file was found at ${d.info(t.cwd)}.
 Before you can build the registry, you must create a valid ${d.info("components.json")} file by running the ${d.info("init")} command.`),s.break(),process.exit(1);}}var mo=z.object({cwd:z.string(),registryFile:z.string(),outputDir:z.string(),verbose:z.boolean().optional().default(false)}),Sr=new Command().name("registry:build").description("builds the registry [EXPERIMENTAL]").argument("[registry]","path to registry.json file","./registry.json").option("-o, --output <path>","destination directory for json files","./public/r").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-v, --verbose","verbose output").action(async(t,e)=>{await fo({cwd:M.resolve(e.cwd),registryFile:t,outputDir:e.output,verbose:e.verbose});});async function fo(t$1){try{let e=mo.parse(t$1),[{errors:r,resolvePaths:i,config:o},n]=await Promise.all([xr(e),p$1(e.cwd)]);(r["3"]||!o||!n)&&(s.error(`A ${d.info("components.json")} file is required to build the registry. Run ${d.info("shadcn init")} to create one.`),s.break(),process.exit(1)),(r["13"]||!i)&&(s.error(`We could not find a registry file at ${d.info(M.resolve(e.cwd,e.registryFile))}.`),s.break(),process.exit(1));let a=await W.readFile(i.registryFile,"utf-8"),s$1=h$1.safeParse(JSON.parse(a));s$1.success||(s.error(`Invalid registry file found at ${d.info(i.registryFile)}.`),s.break(),process.exit(1));let c=t("Building registry..."),l=await po(s$1.data,o,n);for(let m of l.items)m.files=m.files?.filter((p,u,g)=>u===g.findIndex(w=>w.path===p.path)),m.dependencies&&(m.dependencies=m.dependencies.filter((p,u,g)=>u===g.findIndex(w=>w===p)));for(let m of l.items){if(!m.files)continue;c.start(`Building ${m.name}...`),m.$schema="https://ui.shadcn.com/schema/registry-item.json";for(let u of m.files){let g=M.resolve(i.cwd,u.path);try{if(!(await W.stat(g)).isFile())continue;u.content=await W.readFile(g,"utf-8");}catch(w){console.error("Error reading file in registry build:",g,w);continue}}let p=g$1.safeParse(m);if(!p.success){s.error(`Invalid registry item found for ${d.info(m.name)}.`);continue}await W.writeFile(M.resolve(i.outputDir,`${p.data.name}.json`),JSON.stringify(p.data,null,2));}if(await W.copyFile(i.registryFile,M.resolve(i.outputDir,"registry.json")),c.succeed("Building registry."),e.verbose){t(`The registry has ${d.info(l.items.length.toString())} items:`).succeed();for(let m of l.items){s.log(`  - ${m.name} (${d.info(m.type)})`);for(let p of m.files??[])s.log(`    - ${p.path}`);}}}catch(e){s.break(),Y(e);}}async function po(t,e,r){for(let i of t.items)if(i.files?.length)for(let o of i.files){let n=await M$1(o.path,e,r);n.files=n.files?.filter(a=>a.path!==o.path),n.files&&i.files.push(...n.files),n.dependencies&&(i.dependencies=i.dependencies?i.dependencies.concat(n.dependencies):n.dependencies);}return t}var vr=new Command().name("registry:mcp").description("starts the registry MCP server [DEPRECATED]").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async()=>{s.warn(`The ${d.info("shadcn registry:mcp")} command is deprecated. Use the ${d.info("shadcn mcp")} command instead.`),s.break();});var ho=z.object({cwd:z.string(),query:z.string().optional(),limit:z.number().optional(),offset:z.number().optional()}),Pr=new Command().name("search").alias("list").description("search items from registries").argument("<registries...>","the registry names or urls to search items from. Names must be prefixed with @.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-q, --query <query>","query string").option("-l, --limit <number>","maximum number of items to display per registry","100").option("-o, --offset <number>","number of items to skip","0").action(async(t,e)=>{try{let r=ho.parse({cwd:M__default.resolve(e.cwd),query:e.query,limit:e.limit?parseInt(e.limit,10):void 0,offset:e.offset?parseInt(e.offset,10):void 0});await A(r.cwd);let i$1=n({style:"new-york",resolvedPaths:{cwd:r.cwd}}),o=O(i$1),n$1=M__default.resolve(r.cwd,"components.json");if(Q.existsSync(n$1)){let m=await Q.readJson(n$1),p$1=p.partial().parse(m);o=O({...i$1,...p$1});}let a=o;try{let m=await i(r.cwd);m&&(a=O(m));}catch{}let{config:s,newRegistries:c}=await _(t.map(m=>`${m}/registry`),a,{silent:!0,writeFile:!1});c.length>0&&(a.registries=s.registries),Q$1(t,a);let l=await ka(t,{query:r.query,limit:r.limit,offset:r.offset,config:a});console.log(JSON.stringify(l,null,2)),process.exit(0);}catch(r){Y(r);}finally{P();}});var yo=z.object({cwd:z.string()}),Or=new Command().name("view").description("view items from the registry").argument("<items...>","the item names or URLs to view").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(t,e)=>{try{let r=yo.parse({cwd:M__default.resolve(e.cwd)});await A(r.cwd);let i$1=O({}),o=M__default.resolve(r.cwd,"components.json");if(Q.existsSync(o)){let l=await Q.readJson(o),m=p.partial().parse(l);i$1=O(m);}let n=i$1;try{let l=await i(r.cwd);l&&(n=O(l));}catch{}let{config:a,newRegistries:s}=await _(t,n,{silent:!0,writeFile:!1});s.length>0&&(n.registries=a.registries),Q$1(t,n);let c=await _$1(t,{config:n});console.log(JSON.stringify(c,null,2)),process.exit(0);}catch(r){Y(r);}finally{P();}});var $r={version:"3.3.1"};process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function xo(){let t=new Command().name("shadcn").description("add items from registries to your project").version($r.version,"-v, --version","display the version number");t.addCommand(Qt).addCommand(ir).addCommand(lr).addCommand(Or).addCommand(Pr).addCommand(Rr).addCommand(mr).addCommand(ar).addCommand(tt),t.addCommand(Sr).addCommand(vr),t.parse();}xo();//# sourceMappingURL=index.js.map
 //# sourceMappingURL=index.js.map
+export * from './schema/index.js';
diff --git a/package.json b/package.json
index 3f7f45b448f3c59055ed562c04cb8200a6fbc7b3..bf4e1f6d40663cf0d82bdc40e22c162d3b46b6f9 100644
--- a/package.json
+++ b/package.json
@@ -53,5 +53,5 @@
     "@dotenvx/dotenvx": "^1.48.4",
     "@modelcontextprotocol/sdk": "^1.17.2",
     "browserslist": "^4.26.2",
-    "commander": "^14.0.0",
+    "commander": "^11.1.0",
     "cosmiconfig": "^9.0.0",
