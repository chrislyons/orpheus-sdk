<<<BEGIN_FILE sdk/config_ini.h>>>
#ifndef CONFIG_INI_H
#define CONFIG_INI_H

#ifdef _WIN32
#include <windows.h>

namespace config_ini {
inline int getInt(const char *fn, const char *section, const char *key, int defval) {
  return (int)GetPrivateProfileInt(section, key, defval, fn);
}
inline bool getBinary(const char *fn, const char *section, const char *key, void *data, unsigned int len) {
  return GetPrivateProfileStruct(section, key, data, len, fn) != 0;
}
inline unsigned int getString(const char *fn, const char *section, const char *key, char *value, unsigned int value_len, const char *def_value=nullptr) {
  return (unsigned int)GetPrivateProfileString(section, key, def_value ? def_value : "", value, value_len, fn);
}
inline void setString(const char *fn, const char *section, const char *key, const char *value) {
  WritePrivateProfileString(section, key, value, fn);
}
inline void setBinary(const char *fn, const char *section, const char *key, const void *data, unsigned int len) {
  WritePrivateProfileStruct(section, key, const_cast<void *>(data), len, fn);
}
}

#else

#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <filesystem>
#include <cctype>
#include <cstdio>
#include <cstring>

namespace config_ini {

static inline std::string trim(const std::string &s) {
  size_t start = 0, end = s.size();
  while (start < end && std::isspace((unsigned char)s[start])) start++;
  while (end > start && std::isspace((unsigned char)s[end-1])) end--;
  return s.substr(start, end-start);
}

static inline std::string readValue(const std::filesystem::path &path, const std::string &section, const std::string &key) {
  std::ifstream in(path);
  if (!in.is_open()) return {};
  std::string line;
  bool in_section = false;
  while (std::getline(in, line)) {
    std::string t = trim(line);
    if (t.empty() || t[0] == ';' || t[0] == '#') continue;
    if (t.front() == '[' && t.back() == ']') {
      in_section = (t.substr(1, t.size()-2) == section);
      continue;
    }
    if (in_section) {
      size_t eq = t.find('=');
      if (eq != std::string::npos) {
        std::string k = trim(t.substr(0, eq));
        if (k == key) return trim(t.substr(eq+1));
      }
    }
  }
  return {};
}

static inline void writeValue(const std::filesystem::path &path, const std::string &section, const std::string &key, const std::string &value) {
  std::ifstream in(path);
  std::vector<std::string> lines;
  std::string line;
  bool section_found = false;
  bool key_written = false;
  while (in.good() && std::getline(in, line)) {
    lines.push_back(line);
  }
  in.close();
  for (size_t i = 0; i < lines.size(); ++i) {
    std::string t = trim(lines[i]);
    if (t.size() > 0 && t.front() == '[' && t.back() == ']') {
      std::string sec = t.substr(1, t.size()-2);
      if (sec == section) {
        section_found = true;
        size_t j = i + 1;
        for (; j < lines.size(); ++j) {
          std::string lt = trim(lines[j]);
          if (lt.size() > 0 && lt.front() == '[' && lt.back() == ']') break;
          size_t eq = lt.find('=');
          if (eq != std::string::npos) {
            std::string k = trim(lt.substr(0, eq));
            if (k == key) {
              lines[j] = std::string(key) + "=" + value;
              key_written = true;
              break;
            }
          }
        }
        if (!key_written) {
          lines.insert(lines.begin()+j, std::string(key) + "=" + value);
          key_written = true;
        }
        break;
      }
    }
  }
  if (!section_found) {
    lines.push_back("[" + section + "]");
    lines.push_back(std::string(key) + "=" + value);
    key_written = true;
  }
  else if (!key_written) {
    lines.push_back(std::string(key) + "=" + value);
  }
  std::ofstream out(path, std::ios::trunc);
  for (const auto &l : lines) out << l << "\n";
}

inline int getInt(const char *fn, const char *section, const char *key, int defval) {
  std::string v = readValue(std::filesystem::path(fn), section, key);
  if (v.empty()) return defval;
  return atoi(v.c_str());
}

inline bool getBinary(const char *fn, const char *section, const char *key, void *data, unsigned int len) {
  std::string v = readValue(std::filesystem::path(fn), section, key);
  if (v.empty() || v.length() < len*2) return false;
  unsigned char *out = (unsigned char *)data;
  for (unsigned int i = 0; i < len; ++i) {
    unsigned int byte;
    if (sscanf(v.c_str() + i*2, "%02x", &byte) != 1) return false;
    out[i] = (unsigned char)byte;
  }
  return true;
}

inline unsigned int getString(const char *fn, const char *section, const char *key, char *value, unsigned int value_len, const char *def_value=nullptr) {
  std::string v = readValue(std::filesystem::path(fn), section, key);
  if (v.empty() && def_value) v = def_value;
  if (value_len > 0) {
    size_t len = v.size();
    if (len > value_len - 1) len = value_len - 1;
    std::memcpy(value, v.c_str(), len);
    value[len] = 0;
    return (unsigned int)len;
  }
  return 0;
}

inline void setString(const char *fn, const char *section, const char *key, const char *value) {
  writeValue(std::filesystem::path(fn), section, key, value ? value : "");
}

inline void setBinary(const char *fn, const char *section, const char *key, const void *data, unsigned int len) {
  const unsigned char *in = (const unsigned char *)data;
  std::string v;
  char buf[3];
  for (unsigned int i = 0; i < len; ++i) {
    sprintf(buf, "%02X", in[i]);
    v += buf;
  }
  setString(fn, section, key, v.c_str());
}

} // namespace config_ini

#endif

#endif

<<<END_FILE sdk/config_ini.h>>>

<<<BEGIN_FILE sdk/example_m3u/import_m3u.cpp>>>
/*
**

  REAPER example_m3u plug-in 
  Copyright (C) 2005-2008 Cockos Incorporated

  provides m3u as project import (not very useful but a good demonstration)


  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.


  */

#ifdef _WIN32
#include <windows.h>
#include <string.h>
#else
#include "../../WDL/swell/swell.h"
#include <strings.h>
#endif
#include <stdio.h>
#include <math.h>


#include "../reaper_plugin.h"
#include "../reaper_api_loader.hpp"


REAPER_PLUGIN_HINSTANCE g_hInst; // used for dialogs, if any

// these are used to resolve/make relative pathnames
// resolve_fn, relative_fn and PCM_Source_CreateFromFile are provided by REAPER
// and will be loaded via ReaperAPILoader.



bool WantProjectFile(const char *fn)
{
  return strlen(fn)>4 &&
#ifdef _WIN32
    !_stricmp(fn+strlen(fn)-4,".m3u");
#else
    !strcasecmp(fn+strlen(fn)-4,".m3u");
#endif
}

  // this is used for UI only
const char *EnumFileExtensions(int i, const char **descptr) // call increasing i until returns a string, if descptr's output is NULL, use last description
{
  if (i == 0)
  {
    if (descptr) *descptr = "M3U playlists";
    return "M3U";
  }
  if (descptr) *descptr=NULL;
  return NULL;
}

int LoadProject(const char *fn, ProjectStateContext *ctx) // return 0=ok,
{
  // no need to check extension here, it's done for us
  FILE *fp=fopen(fn,"rt");
  if (!fp) return -1; // error!
  
  ctx->AddLine("<REAPER_PROJECT 0.1");
  // set any project settings here (this example doesnt need to)


  // add a track
  ctx->AddLine("<TRACK");
    ctx->AddLine("NAME \"m3u playlist\"");


  double lastfadeouttime=0.0;
  double curpos=0.0;
  // add an item per playlist item
  for (;;)
  {
    char buf[1024];
    buf[0]=0;
    fgets(buf,sizeof(buf),fp);
    if (!buf[0]) break;

    if (buf[strlen(buf)-1]=='\n') buf[strlen(buf)-1]=0;

    if (!buf[0]) continue;

    if (buf[0]!='#' && !strstr(buf,"://"))
    {
      double thisl=30.0;
      char ofn[2048];
      resolve_fn(buf,ofn,sizeof(ofn));
      PCM_source *src=PCM_Source_CreateFromFile(ofn);
      if (src) 
      {
        thisl=src->GetLength();
        delete src;
      }
      else
      {
        // todo: use extended info from the m3u
      }
      char *fnptr=ofn;
      // todo: extended m3u info
      while (*fnptr) fnptr++;
      while (fnptr>=ofn && *fnptr !='\\' && *fnptr != '/') fnptr--;
      fnptr++;

      double thisfadeouttime=3.0; // default to 3s xfades
      if (thisfadeouttime>thisl)
      {
        thisfadeouttime=0.01;
        if (lastfadeouttime+thisfadeouttime>thisl)
          lastfadeouttime=thisl-thisfadeouttime;
      }

      ctx->AddLine("<ITEM");
        ctx->AddLine("POSITION %.8f",curpos);
        ctx->AddLine("LENGTH %.8f",thisl);
        ctx->AddLine("FADEIN 1 0.01 %f",lastfadeouttime);
        ctx->AddLine("FADEOUT 1 0.01 %f",thisfadeouttime);
        ctx->AddLine("LOOP 0"); // turn off looping
        ctx->AddLine("NAME \"%s\"",fnptr); 
        ctx->AddLine("SRCFN \"%s\"",ofn);
      ctx->AddLine(">");
      
      lastfadeouttime=thisfadeouttime;
      curpos+=thisl-thisfadeouttime;
    }
  }
  ctx->AddLine(">"); // <TRACK
  
  ctx->AddLine(">"); // <REAPER_PROJECT

  fclose(fp);
  return 0;
}


project_import_register_t myRegStruct={WantProjectFile,EnumFileExtensions,LoadProject};


extern "C"
{

REAPER_PLUGIN_DLL_EXPORT int REAPER_PLUGIN_ENTRYPOINT(REAPER_PLUGIN_HINSTANCE hInstance, reaper_plugin_info_t *rec)
{
  g_hInst=hInstance;
  if (rec)
  {
    ReaperAPILoader api(rec);
    if (!api)
      return 0;

    if (!resolve_fn ||
      !PCM_Source_CreateFromFile ||
      !rec->Register ||
      !rec->Register("projectimport",&myRegStruct))
      return 0;

    // our plugin registered, return success

    return 1;
  }
  else
  {
    return 0;
  }
}

};






<<<END_FILE sdk/example_m3u/import_m3u.cpp>>>

<<<BEGIN_FILE sdk/example_midi_arp/midi_arpeggiator.cpp>>>
#include "../reaper_plugin.h"
#include "reaper_plugin_functions.h"

class SimpleArp : public MIDI_effect
{
public:
  SimpleArp() {}
  MIDI_effect* Duplicate() override { return new SimpleArp(); }
  bool IsAvailable() override { return true; }
  void SetAvailable(bool) override {}
  const char* GetType() override { return "SimpleArp"; }
  int PropertiesWindow(HWND) override { return 0; }
  void Process(MIDI_effect_transfer_t* block) override
  {
    if (!block || !block->input_events || !block->output_events) return;
    int pos = 0;
    MIDI_event_t* evt;
    while ((evt = block->input_events->EnumItems(&pos)))
    {
      // pass through original event
      block->output_events->AddItem(evt);
      if (evt->is_note_on())
      {
        MIDI_event_t e = *evt;
        e.midi_message[1] = evt->midi_message[1] + 4; // major third
        e.frame_offset += 240; // simple offset
        block->output_events->AddItem(&e);
        e.midi_message[1] = evt->midi_message[1] + 7; // perfect fifth
        e.frame_offset += 240;
        block->output_events->AddItem(&e);
      }
    }
  }
  void SaveState(ProjectStateContext*) override {}
  int LoadState(const char*, ProjectStateContext*) override { return 0; }
  int Extended(int, void*, void*, void*) override { return 0; }
};

static const char* ArpName() { return "Example Arpeggiator"; }
static MIDI_effect* CreateArp() { return new SimpleArp(); }

static midieffect_register_t reg = { ArpName, CreateArp };

extern "C" {
REAPER_PLUGIN_DLL_EXPORT int REAPER_PLUGIN_ENTRYPOINT(REAPER_PLUGIN_HINSTANCE hInstance, reaper_plugin_info_t* rec)
{
  if (rec)
  {
    if (rec->caller_version != REAPER_PLUGIN_VERSION || !rec->Register) return 0;
    plugin_register = rec->Register;
    plugin_register("midieffect", &reg);
    return 1;
  }
  plugin_register("-midieffect", &reg);
  return 0;
}
}

<<<END_FILE sdk/example_midi_arp/midi_arpeggiator.cpp>>>

<<<BEGIN_FILE sdk/example_musicxml/musicxml_util.cpp>>>
#include <cstdio>
#include <cstdlib>
#include <cstring>

#include "../../WDL/wdltypes.h"
#include "../reaper_plugin.h"
#include "../reaper_plugin_functions.h"

// Export selected track MIDI to MusicXML
static bool DoExportTrackMIDIToMusicXML(MediaTrack* tr, const char* fn)
{
    if (!tr || !fn) return false;
    FILE* f = std::fopen(fn, "w");
    if (!f) return false;

    std::fprintf(f, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    std::fprintf(f, "<score-partwise version=\"3.1\">\n");
    std::fprintf(f, "  <part-list><score-part id=\"P1\"><part-name>Track</part-name></score-part></part-list>\n");
    std::fprintf(f, "  <part id=\"P1\">\n");
    std::fprintf(f, "    <measure number=\"1\">\n");

    const int itemCount = CountTrackMediaItems(tr);
    for (int i = 0; i < itemCount; ++i)
    {
        MediaItem* item = GetTrackMediaItem(tr, i);
        const int takeCount = GetMediaItemNumTakes(item);
        for (int t = 0; t < takeCount; ++t)
        {
            MediaItem_Take* take = GetMediaItemTake(item, t);
            if (!take || !TakeIsMIDI(take)) continue;

            int buf_sz = 0;
            MIDI_GetAllEvts(take, NULL, &buf_sz);
            char* buf = (char*)std::malloc(buf_sz);
            if (buf && MIDI_GetAllEvts(take, buf, &buf_sz))
            {
                int pos = 0;
                int ppq = 0;
                while (pos < buf_sz)
                {
                    int offset = *(int*)(buf + pos); pos += 4;
                    unsigned char flags = (unsigned char)buf[pos++]; (void)flags;
                    unsigned char msglen = (unsigned char)buf[pos++];
                    unsigned char* msg = (unsigned char*)buf + pos;
                    pos += msglen;
                    ppq += offset;
                    if (msglen >= 3 && (msg[0] & 0xF0) == 0x90 && msg[2] > 0)
                    {
                        int pitch = msg[1];
                        static const char* steps[12] = {"C","C#","D","D#","E","F","F#","G","G#","A","A#","B"};
                        const char* step = steps[pitch % 12];
                        int octave = pitch / 12 - 1;
                        std::fprintf(f, "      <note>\n");
                        std::fprintf(f, "        <pitch><step>%c</step", step[0]);
                        if (step[1] == '#') std::fprintf(f, "<alter>1</alter>");
                        std::fprintf(f, "<octave>%d</octave></pitch>\n", octave);
                        std::fprintf(f, "        <duration>1</duration>\n");
                        std::fprintf(f, "      </note>\n");
                    }
                }
                std::free(buf);
            }
        }
    }

    std::fprintf(f, "    </measure>\n");
    std::fprintf(f, "  </part>\n");
    std::fprintf(f, "</score-partwise>\n");
    std::fclose(f);
    return true;
}

// Import simple MusicXML to selected track
static bool DoImportTrackMIDIFromMusicXML(MediaTrack* tr, const char* fn)
{
    if (!tr || !fn) return false;
    FILE* f = std::fopen(fn, "r");
    if (!f) return false;

    MediaItem* item = AddMediaItemToTrack(tr);
    MediaItem_Take* take = AddTakeToMediaItem(item);
    double ppq = 0.0;
    char line[1024];
    char step = 'C';
    int alter = 0;
    int octave = 4;
    bool inNote = false;
    while (std::fgets(line, sizeof(line), f))
    {
        if (std::strstr(line, "<note")) { inNote = true; step = 'C'; alter = 0; octave = 4; }
        if (inNote)
        {
            char* p;
            if ((p = std::strstr(line, "<step>"))) step = p[6];
            if ((p = std::strstr(line, "<alter>"))) alter = std::atoi(p + 7);
            if ((p = std::strstr(line, "<octave>"))) octave = std::atoi(p + 8);
            if (std::strstr(line, "</note>"))
            {
                int base;
                switch (step)
                {
                    case 'C': base = 0; break; case 'D': base = 2; break;
                    case 'E': base = 4; break; case 'F': base = 5; break;
                    case 'G': base = 7; break; case 'A': base = 9; break;
                    case 'B': base = 11; break; default: base = 0; break;
                }
                base += alter;
                int pitch = (octave + 1) * 12 + base;
                double start = ppq;
                double end = ppq + 960.0;
                MIDI_InsertNote(take, false, false, start, end, 0, pitch, 100, NULL);
                ppq += 960.0;
                inNote = false;
            }
        }
    }
    std::fclose(f);
    return true;
}

extern "C" {
REAPER_PLUGIN_DLL_EXPORT int REAPER_PLUGIN_ENTRYPOINT(REAPER_PLUGIN_HINSTANCE hInstance, reaper_plugin_info_t* rec)
{
    (void)hInstance;
    if (!rec) return 0;
    if (rec->caller_version != REAPER_PLUGIN_VERSION || !rec->GetFunc) return 0;
    if (REAPERAPI_LoadAPI(rec->GetFunc)) return 0;
    rec->Register("API_ExportTrackMIDIToMusicXML", (void*)DoExportTrackMIDIToMusicXML);
    rec->Register("API_ImportTrackMIDIFromMusicXML", (void*)DoImportTrackMIDIFromMusicXML);
    return 1;
}
}


<<<END_FILE sdk/example_musicxml/musicxml_util.cpp>>>

<<<BEGIN_FILE sdk/example_raw/pcmsink_raw.cpp>>>
/*
 reaper_raw
 Simple PCM_sink example plug-in
 Copyright (C) 2006-2008 Cockos Incorporated

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.



  This file implements a raw sink, for generating .raw files.
*/


#ifdef _WIN32
#include <windows.h>
#else
#include "../../WDL/swell/swell.h"
#include "../../WDL/swell/swell-dlggen.h"
#endif

#include <stdio.h>
#include <math.h>
#include <sys/stat.h>

#include "resource.h"

#include "../reaper_plugin.h"
#include "../../WDL/wdltypes.h"
#include "reaper_plugin_functions.h"

#include "../../WDL/wdlstring.h"
#include "../../WDL/filewrite.h"
#include "../config_ini.h"

#define SINK_FOURCC REAPER_FOURCC('r','a','w',' ')

extern HINSTANCE g_hInst;

static void doubletomem16(double in, unsigned char *outp)
{
  short out;
  if ((in)<0.0) { if ((in) <= -1.0) (out) = -32768; else (out) = (short) ((int)(((in) * 32768.0)-0.5)); }
	else { if ((in) >= (32766.5/32768.0)) (out) = 32767; else (out) = (short) (int)((in) * 32768.0 + 0.5); }
  outp[0] = out&0xff;
  outp[1] = out>>8;
}

class PCM_sink_raw : public PCM_sink
{
  public:
    static HWND showConfig(void *cfgdata, int cfgdata_l, HWND parent);

    PCM_sink_raw(const char *fn, void *cfgdata, int cfgdata_l, 
                 int nch, int srate, bool buildpeaks)
    {
      m_peakbuild=0;
      m_bps = 16;
      if (cfgdata_l >= 8 && *((int *)cfgdata) == SINK_FOURCC)
      {
        m_bps=REAPER_MAKELEINT(((int *)(((unsigned char *)cfgdata)+4))[0]);
      }
      m_nch=nch>1?2:1;
      m_srate=srate;
      m_lensamples=0;
      m_fn.Set(fn);

      int wm=1,nb[2]={16,128},bs=65536;
      if (GetPreferredDiskWriteMode) GetPreferredDiskWriteMode(&wm,nb,&bs);
      m_file=new WDL_FileWrite(fn,wm,bs,nb[0],nb[1]);
      if (m_file && !m_file->IsOpen())
      {
        delete m_file; 
        m_file=0;
      }

      if (buildpeaks && m_file)
      {
        m_peakbuild=PeakBuild_Create(NULL,fn,m_srate,m_nch);
      }
    }

    bool IsOpen()
    {
      if (!m_file) return false;
      return 1;
    }

    ~PCM_sink_raw()
    {
      delete m_file;
      m_file=0;
      delete m_peakbuild;
      m_peakbuild=0;
    }

    const char *GetFileName() { return m_fn.Get(); }
    int GetNumChannels() { return m_nch; } // return number of channels
    double GetLength() { return m_lensamples / (double) m_srate; } // length in seconds, so far
    INT64 GetFileSize()
    {
      return m_file ? m_file->GetSize() : 0;
    }

    void GetOutputInfoString(char *buf, int buflen)
    {
      char tmp[512];
      sprintf(tmp,"RAW %d bit %dHz %dch",m_bps,m_srate,m_nch);
      lstrcpyn(buf,tmp,buflen);
    }

    bool WantMIDI() { return false; }

    void WriteMIDI(MIDI_eventlist *events, int len, double samplerate) 
    { 
      // this would only be called anyway if we respond 1 to WantMIDI()
    }
    void WriteDoubles(double **samples, int len, int nch, int offset, int spacing)
    {
      if(!m_file) return;

      if (m_peakbuild)
        m_peakbuild->ProcessSamples(samples,len,nch,offset,spacing);

      unsigned char *bout=m_tmpbuf.Resize(len*m_nch*(m_bps/8),false);
      // write samples to disk
      int ch;
      for (ch = 0; ch < m_nch; ch ++) // write the format's numchannels
      {
        double *in=ch < nch ? samples[ch] : samples[nch-1];  //if the input chancount is less, make sure we feed it valid inputs for the higher channels

        int x;

        if (ch < nch || (ch==1 && nch==1))
          for (x = 0; x < len; x ++) doubletomem16(in[x],bout+(x*m_nch+ch)*(m_bps/8));
        else
          for (x = 0; x < len; x ++) memset(bout+(x*m_nch+ch)*(m_bps/8),0,2);
      }

      m_file->Write(bout,m_tmpbuf.GetSize());
      if (update_disk_counters)
        update_disk_counters(0,m_tmpbuf.GetSize());

      m_lensamples+=len;

    } 
    int GetLastSecondPeaks(int sz, double *buf)
    {
      if (m_peakbuild)
        return m_peakbuild->GetLastSecondPeaks(sz,buf);
      return 0;
    }
    void GetPeakInfo(PCM_source_peaktransfer_t *block)
    {
      if (m_peakbuild) m_peakbuild->GetPeakInfo(block);
      else block->peaks_out=0;
    }

 private:
    WDL_TypedBuf<unsigned char> m_tmpbuf;

    int m_nch,m_srate, m_bps, m_qual;
    INT64 m_lensamples;
    WDL_String m_fn;
    WDL_FileWrite *m_file;
    REAPER_PeakBuild_Interface *m_peakbuild;
};

static unsigned int GetFmt(const char **desc) 
{
  if (desc) *desc="RAW";
  return SINK_FOURCC;
}

static const char *GetExtension(const void *cfg, int cfg_l)
{
  if (cfg_l >= 4 && *((int *)cfg) == SINK_FOURCC) return "raw";
  return NULL;
}

static int LoadDefaultConfig(void **data, const char *desc)
{
  static WDL_HeapBuf m_hb;
  const char *fn=get_ini_file();
  int l=config_ini::getInt(fn, desc, "default_size", 0);
  if (l<1) return 0;

  if (config_ini::getBinary(fn, desc, "default", m_hb.Resize(l), l))
  {
    *data = m_hb.Get();
    return l;
  }
  return 0;
}

int SinkGetConfigSize() { return 8; }

void SinkInitDialog(HWND hwndDlg, void *cfgdata, int cfgdata_l)
{
  
  
  int bps = 16;
  if (cfgdata_l < 8 || *((int *)cfgdata) != SINK_FOURCC)
    cfgdata_l=LoadDefaultConfig(&cfgdata,"raw encoder defaults");
  
  if (cfgdata_l>=8 && ((int*)cfgdata)[0] == SINK_FOURCC)
  {
    bps= REAPER_MAKELEINT(((int *)(((unsigned char*)cfgdata)+4))[0]);
  }

  // todo: show conifguration

}

void SinkSaveState(HWND hwndDlg, void *_data)
{
  int bps = 16;

  // todo: get state from dialog
  
  ((int *)_data)[0] = SINK_FOURCC;
  ((int *)(((unsigned char *)_data)+4))[0]=REAPER_MAKELEINT(bps);
}

void SaveDefaultConfig(HWND hwndDlg)
{
  char data[1024];
  SinkSaveState(hwndDlg,data);
  int l=SinkGetConfigSize();
  const char *desc="raw encoder defaults";
  const char *fn=get_ini_file();
  char buf[64];
  sprintf(buf,"%d",l);
  config_ini::setString(fn, desc, "default_size", buf);
  config_ini::setBinary(fn, desc, "default", data, l);
}

BOOL WINAPI wavecfgDlgProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
  switch (uMsg)
  {
    case WM_INITDIALOG:
      {
        void *cfgdata=((void **)lParam)[0];
        int cfgdata_l=(int)((void**)lParam)[1];
        SinkInitDialog(hwndDlg,cfgdata,cfgdata_l);
        

      }
    return 0;
    case WM_USER+1024:
      {
        if (wParam) *((int *)wParam)=SinkGetConfigSize();
        if (lParam)
        {
          SinkSaveState(hwndDlg,(void*)lParam);
          

        }
      }
    return 0;
    case WM_DESTROY:
      {
        SaveDefaultConfig(hwndDlg);
      }
    return 0;

  }
  return 0;
}

static HWND ShowConfig(const void *cfg, int cfg_l, HWND parent)
{
  if (cfg_l >= 4 && *((int *)cfg) == SINK_FOURCC) 
  {
    const void *x[2]={cfg,(void *)cfg_l};
    return CreateDialogParam(g_hInst,MAKEINTRESOURCE(IDD_RAWSINK_CFG),parent,wavecfgDlgProc,(LPARAM)x);
  }
  return 0;
}

#ifndef _WIN32 // this is for mac only

SWELL_DEFINE_DIALOG_RESOURCE_BEGIN(IDD_RAWSINK_CFG,SWELL_DLG_WS_CHILD|SWELL_DLG_WS_FLIPPED|SWELL_DLG_WS_NOAUTOSIZE,"",243,45,1.8)

BEGIN
END

SWELL_DEFINE_DIALOG_RESOURCE_END(IDD_RAWSINK_CFG)

#endif

static PCM_sink *CreateSink(const char *filename, void *cfg, int cfg_l, int nch, int srate, bool buildpeaks)
{
  if (cfg_l >= 4 && *((int *)cfg) == SINK_FOURCC) 
  {
    PCM_sink_raw *v=new PCM_sink_raw(filename,cfg,cfg_l,nch,srate,buildpeaks);
    if (v->IsOpen()) return v;
    delete v;
  }
  return 0;
}

pcmsink_register_t mySinkRegStruct={GetFmt,GetExtension,ShowConfig,CreateSink};

<<<END_FILE sdk/example_raw/pcmsink_raw.cpp>>>

<<<BEGIN_FILE sdk/example_raw/pcmsrc_raw.cpp>>>
/*
 reaper_raw
 Simple PCM_source example plug-in
 Copyright (C) 2006-2008 Cockos Incorporated

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.



  This project makes a simple 16 bit stereo 44khz .RAW file reader.

*/


#ifdef _WIN32
#include <windows.h>
#else
#include "../../WDL/swell/swell.h"
#endif

#include <stdio.h>
#include <math.h>

#include "resource.h"
#include "../reaper_api_loader.hpp"

#define REAPERAPI_IMPLEMENT
#define REAPERAPI_MINIMAL
#define REAPERAPI_WANT_PeakBuild_Create
#define REAPERAPI_WANT_format_timestr
#define REAPERAPI_WANT_update_disk_counters
#define REAPERAPI_WANT_PCM_Source_CreateFromSimple
#define REAPERAPI_WANT_GetPreferredDiskWriteMode
#define REAPERAPI_WANT_get_ini_file
#define REAPER_PLUGIN_FUNCTIONS_IMPL_LOADFUNC
#include "../reaper_plugin.h"
#include "../../WDL/wdltypes.h"
#include "reaper_plugin_functions.h"

#include "../../WDL/fileread.h"

REAPER_PLUGIN_HINSTANCE g_hInst;


#define SOURCE_TYPE "RAW"

#define RAW_BPS 16 // 16 bit
#define RAW_NCH 2
#define RAW_SRATE 44100


class RAW_SimpleMediaDecoder : public ISimpleMediaDecoder
{
public:
  RAW_SimpleMediaDecoder()
  {
    m_filename=0;
    m_isopened=0;
    m_nch=0;
    m_bps=0;
    m_srate=0.0;
    m_length=0;

    m_fh=0;
    // todo: initialize any basic decoder stuff (i.e. set pointers to 0 etc)
  }
  ~RAW_SimpleMediaDecoder()
  {
    Close(true);
    free(m_filename);
  }

  ISimpleMediaDecoder *Duplicate()
  {
    RAW_SimpleMediaDecoder *r=new RAW_SimpleMediaDecoder;
    free(r->m_filename);
    r->m_filename = m_filename ? strdup(m_filename) : NULL;
    return r;
  }

  void Open(const char *filename, int diskreadmode, int diskreadbs, int diskreadnb)
  {
    Close(filename && strcmp(filename,m_filename?m_filename:""));
    if (filename) 
    {
      free(m_filename);
      m_filename=strdup(filename);
    }

    m_isopened=true;

    m_length=0;
    m_bps=0;
    m_nch=0;
    m_srate=0;

    m_fh = new WDL_FileRead(m_filename ? m_filename : "",diskreadmode,diskreadbs,diskreadnb);
    if (!m_fh->IsOpen())
    {
      delete m_fh;
      m_fh=0;
    }
    else
    {
      // create your decoder here. 
      // If the decoder already exists, check to make sure
      // that the file timestamp matches.
      m_bps=RAW_BPS;
      m_nch=RAW_NCH;
      m_srate=RAW_SRATE;

      int blockAlign=m_nch*(m_bps/8);
      if (blockAlign<1)blockAlign=1;
      m_length = m_fh->GetSize()/blockAlign;
    }

  }

  void Close(bool fullClose)
  {
    if (fullClose)
    {
      // delete any decoder data

    }
    delete m_fh;
    m_fh=0;
    m_isopened=false;
  }

  const char *GetFileName() { return m_filename?m_filename:""; }
  const char *GetType() { return SOURCE_TYPE; }

  void GetInfoString(char *buf, int buflen, char *title, int titlelen)
  {
    lstrcpyn(title,"RAW File Properties",titlelen);

    if (IsOpen())
    {
      // todo: add any decoder specific info
      char temp[4096],lengthbuf[128];
      format_timestr((double) m_length / (double)m_srate,lengthbuf,sizeof(lengthbuf));
      sprintf(temp,"Length: %s:\r\n"
                   "Samplerate: %.0f\r\n"
                   "Channels: %d\r\n"
                   "Bits/sample: %d\r\n",  
            lengthbuf,m_srate,m_nch,m_bps);
        
      lstrcpyn(buf,temp,buflen);
    }
    else if (!m_isopened) lstrcpyn(buf,"Media offline",buflen);
    else if (m_fh) lstrcpyn(buf,"Error initializing decoder",buflen);
    else lstrcpyn(buf,"Error opening file",buflen);
  }

  bool IsOpen()
  {
    return m_fh && m_bps && m_nch && m_srate>0; // todo: check to make sure decoder is initialized properly
  }

  int GetNumChannels() { return m_nch; }
  int GetBitsPerSample() { return m_bps; }
  double GetSampleRate() { return m_srate; }
  INT64 GetLength() { return m_length; }
  INT64 GetPosition() { return m_lastpos; }

  void SetPosition(INT64 pos)
  {
    if (m_fh)
    {
      // todo: if decoder, seek decoder (rather than file)
      m_fh->SetPosition((m_lastpos=pos) * (m_bps/8) * m_nch);
    }
  }

  int ReadSamples(double *buf, int length)
  {
    int rd=0;

    if (m_fh)
    {
      int blockAlign=m_nch*(m_bps/8);
      if (blockAlign<1)blockAlign=1; // should never happen but we hate div0's

      // see if we're at eof
      if (m_lastpos+length > m_length)
        length = m_length - m_lastpos;

      if (length > 0)
      {
        unsigned char *rdbuf=m_diskreadbuf.Resize(length*blockAlign,false);
        rd = m_fh->Read(rdbuf,length*blockAlign) / blockAlign;

        if (rd>0)
        {
          if (update_disk_counters) update_disk_counters(rd*blockAlign,0);

          if (m_bps==16) // we only support 16 bit
          {
            int x,sz=rd*m_nch;
            for (x = 0; x < sz; x ++)
            {
              buf[x]=((short)(rdbuf[0] | ((int)rdbuf[1]<<8)))/32768.0;
              rdbuf += 2;
            }
          }
          else memset(buf,0,rd*m_nch*sizeof(double));      
        }
      }
    }

    m_lastpos+=rd;

    return rd;
  }
private:

  WDL_FileRead *m_fh;
  
  char *m_filename;
  int m_isopened;

  WDL_TypedBuf<unsigned char> m_diskreadbuf;

  int m_nch, m_bps;
  double m_srate;
  INT64 m_lastpos;
  INT64 m_length; // length in sample-frames
};







PCM_source *CreateFromType(const char *type, int priority)
{
  if (priority > 4) // let other plug-ins override "RAW" if they want
  {
    if (!strcmp(type,SOURCE_TYPE))
      return PCM_Source_CreateFromSimple(new RAW_SimpleMediaDecoder,NULL);
  }

  return NULL;
}

PCM_source *CreateFromFile(const char *filename, int priority)
{
  int lfn=strlen(filename);
  if (priority > 4 && lfn>4 && !stricmp(filename+lfn-4,".raw"))
  {
    PCM_source *w=PCM_Source_CreateFromSimple(new RAW_SimpleMediaDecoder,filename);
    if (w->IsAvailable() || priority >= 7) return w;
    delete w;
  }
  return NULL;
}

  // this is used for UI only, not so muc
const char *EnumFileExtensions(int i, const char **descptr) // call increasing i until returns a string, if descptr's output is NULL, use last description
{
  if (i == 0)
  {
    if (descptr) *descptr = "RAW files";
    return "RAW";
  }
  if (descptr) *descptr=NULL;
  return NULL;
}




pcmsrc_register_t myRegStruct={CreateFromType,CreateFromFile,EnumFileExtensions};



extern pcmsink_register_t mySinkRegStruct; // from pcmsink_raw.cpp


extern "C"
{

REAPER_PLUGIN_DLL_EXPORT int REAPER_PLUGIN_ENTRYPOINT(REAPER_PLUGIN_HINSTANCE hInstance, reaper_plugin_info_t *rec)
{
  g_hInst=hInstance;
  if (rec)
  {
    ReaperAPILoader api(rec);
    if (!api)
      return 0;

    if (!rec->Register || 
        !rec->Register("pcmsrc",&myRegStruct) || 
        !rec->Register("pcmsink",&mySinkRegStruct))
      return 0;


    // our plugin registered, return success

    return 1;
  }
  else
  {
    return 0;
  }
}

};   


<<<END_FILE sdk/example_raw/pcmsrc_raw.cpp>>>

<<<BEGIN_FILE sdk/example_raw/resource.h>>>
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by res.rc
//
#define IDD_RAWSINK_CFG                 155

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        102
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1001
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif

<<<END_FILE sdk/example_raw/resource.h>>>

<<<BEGIN_FILE sdk/example_stream/basic_stream.cpp>>>
/*
  basic_stream
  Simple example demonstrating the reaper_stream API.
*/

#ifdef _WIN32
#include <windows.h>
#else
#include "../../WDL/swell/swell.h"
#endif

#include "../reaper_api_loader.hpp"

#define REAPERAPI_IMPLEMENT
#define REAPERAPI_MINIMAL
#define REAPER_PLUGIN_FUNCTIONS_IMPL_LOADFUNC
#include "../reaper_plugin.h"
#include "reaper_plugin_functions.h"
#include "../reaper_stream/reaper_stream.h"

REAPER_PLUGIN_HINSTANCE g_hInst;

extern "C" {

REAPER_PLUGIN_DLL_EXPORT int REAPER_PLUGIN_ENTRYPOINT(REAPER_PLUGIN_HINSTANCE instance, reaper_plugin_info_t *rec)
{
  g_hInst = instance;
  if (rec)
  {
    if (REAPERAPI_LoadAPI(rec->GetFunc)) return 0;

    int handle = stream_open("ws://localhost:9000");
    if (handle)
    {
      const int ns = 512;
      ReaSample buf[ns] = {0.0};
      PCM_source_transfer_t block = {};
      block.samplerate = 44100.0;
      block.nch = 1;
      block.length = ns;
      block.samples = buf;
      stream_send(handle, &block);
    }
    return 1;
  }
  return 0;
}

}

<<<END_FILE sdk/example_stream/basic_stream.cpp>>>

<<<BEGIN_FILE sdk/localize-import.h>>>
// used by plug-ins to access imported localization
// usage: 
// #define LOCALIZE_IMPORT_PREFIX "midi_" (should be the directory name with _)
// #include "../localize-import.h"
// ...
// IMPORT_LOCALIZE_VST(hostcb) 
// ...or
// IMPORT_LOCALIZE_RPLUG(rec)
//
#ifdef _REAPER_LOCALIZE_H_
#error you must include localize-import.h before localize.h, sorry
#endif

#include "../WDL/localize/localize-import.h"

#ifndef _REAPER_LOCALIZE_IMPORT_H_
#define _REAPER_LOCALIZE_IMPORT_H_

void (*vac_createGroupsFromTab)(const unsigned short *);

#define IMPORT_LOCALIZE_VST(hostcb) \
    import_vst_reaper_api((void **)&vac_createGroupsFromTab, "vac_createGroupsFromTab", hostcb); \
    import_vst_reaper_api((void **)&importedLocalizeFunc, "__localizeFunc", hostcb); \
    import_vst_reaper_api((void **)&importedLocalizeMenu, "__localizeMenu", hostcb); \
    import_vst_reaper_api((void **)&importedLocalizeInitializeDialog, "__localizeInitializeDialog", hostcb); \
    import_vst_reaper_api((void **)&importedLocalizePrepareDialog, "__localizePrepareDialog", hostcb);

#define IMPORT_LOCALIZE_RPLUG(rec) \
  *(void **)&vac_createGroupsFromTab = rec->GetFunc("vac_createGroupsFromTab"); \
  *(void **)&importedLocalizeFunc = rec->GetFunc("__localizeFunc"); \
  *(void **)&importedLocalizeMenu = rec->GetFunc("__localizeMenu"); \
  *(void **)&importedLocalizeInitializeDialog = rec->GetFunc("__localizeInitializeDialog"); \
  *(void **)&importedLocalizePrepareDialog = rec->GetFunc("__localizePrepareDialog");

#endif

<<<END_FILE sdk/localize-import.h>>>

<<<BEGIN_FILE sdk/otio/otio.cpp>>>
#ifdef _WIN32
#include <windows.h>
#else
#include "../../WDL/swell/swell.h"
#endif

#include "../../WDL/wdltypes.h"
#include "../reaper_plugin.h"

#define REAPERAPI_IMPLEMENT
#define REAPERAPI_MINIMAL
#define REAPERAPI_WANT_AddMediaItemToTrack
#define REAPERAPI_WANT_AddProjectMarker
#define REAPERAPI_WANT_CountProjectMarkers
#define REAPERAPI_WANT_CountTempoTimeSigMarkers
#define REAPERAPI_WANT_CountTrackMediaItems
#define REAPERAPI_WANT_CountTracks
#define REAPERAPI_WANT_EnumProjectMarkers2
#define REAPERAPI_WANT_EnumProjects
#define REAPERAPI_WANT_GetMediaItemInfo_Value
#define REAPERAPI_WANT_GetTempoTimeSigMarker
#define REAPERAPI_WANT_GetTrack
#define REAPERAPI_WANT_GetTrackMediaItem
#define REAPERAPI_WANT_InsertTrackAtIndex
#define REAPERAPI_WANT_SetMediaItemInfo_Value
#define REAPERAPI_WANT_SetTempoTimeSigMarker
#include "../reaper_plugin_functions.h"

#ifdef HAVE_OPENTIMELINEIO
#include <opentimelineio/timeline.h>
#include <opentimelineio/track.h>
#include <opentimelineio/clip.h>
#include <opentimelineio/marker.h>
#include <opentimelineio/serialization.h>
using namespace opentimelineio::OPENTIMELINEIO_VERSION;
#endif

// Export REAPER project to an OTIO file.
bool Project_ExportOTIO(ReaProject* proj, const char* fn)
{
#ifdef HAVE_OPENTIMELINEIO
  Timeline timeline("REAPER Export");
  // collect tracks and items
  int trackCount = CountTracks(proj);
  for (int ti = 0; ti < trackCount; ++ti)
  {
    MediaTrack* tr = GetTrack(proj, ti);
    Track* otioTrack = new Track();
    int itemCount = CountTrackMediaItems(tr);
    for (int ii = 0; ii < itemCount; ++ii)
    {
      MediaItem* item = GetTrackMediaItem(tr, ii);
      double pos = GetMediaItemInfo_Value(item, "D_POSITION");
      double len = GetMediaItemInfo_Value(item, "D_LENGTH");
      Clip* clip = new Clip();
      clip->set_start_time(RationalTime(pos, 48000.0));
      clip->set_duration(RationalTime(len, 48000.0));
      otioTrack->append_child(clip);
    }
    timeline.tracks()->append_child(otioTrack);
  }
  // markers
  int numMarkers = 0, numRegions = 0;
  int total = CountProjectMarkers(proj, &numMarkers, &numRegions);
  for (int i = 0; i < total; ++i)
  {
    bool isrgn; double pos, end; const char* name; int idx;
    EnumProjectMarkers2(proj, i, &isrgn, &pos, &end, &name, &idx);
    Marker* m = new Marker(name ? name : "");
    m->set_time(RationalTime(pos, 48000.0));
    timeline.global_markers().push_back(m);
  }
  // tempo markers
  int tempoCount = CountTempoTimeSigMarkers(proj);
  for (int i = 0; i < tempoCount; ++i)
  {
    double timepos, beatpos, bpm; int num, denom; bool lineartempo;
    GetTempoTimeSigMarker(proj, i, &timepos, NULL, &beatpos, &bpm, &num, &denom, &lineartempo);
    Any dict;
    dict["position"] = timepos;
    dict["bpm"] = bpm;
    timeline.metadata()["tempo"][i] = dict;
  }
  ErrorStatus err;
  serialize_json_to_file(&timeline, fn, &err);
  return !err;
#else
  (void)proj; (void)fn;
  return false;
#endif
}

// Import OTIO file into a REAPER project.
ReaProject* Project_ImportOTIO(const char* fn)
{
#ifdef HAVE_OPENTIMELINEIO
  ErrorStatus err;
  auto timeline = Timeline::from_json_file(fn, &err);
  if (err || !timeline) return NULL;
  ReaProject* proj = EnumProjects(-1, NULL, 0);
  int trackIndex = 0;
  for (auto& child : timeline->tracks()->children())
  {
    Track* otioTrack = dynamic_cast<Track*>(child);
    if (!otioTrack) continue;
    InsertTrackAtIndex(trackIndex, true);
    MediaTrack* tr = GetTrack(proj, trackIndex++);
    int itemIndex = 0;
    for (auto& clipChild : otioTrack->children())
    {
      Clip* clip = dynamic_cast<Clip*>(clipChild);
      if (!clip) continue;
      MediaItem* item = AddMediaItemToTrack(tr);
      SetMediaItemInfo_Value(item, "D_POSITION", clip->start_time().value());
      SetMediaItemInfo_Value(item, "D_LENGTH", clip->duration().value());
    }
  }
  for (auto& m : timeline->global_markers())
  {
    AddProjectMarker(proj, false, m->time().value(), 0.0, m->name().c_str(), -1);
  }
  auto tempoMeta = timeline->metadata()["tempo"];
  for (auto& it : tempoMeta)
  {
    double pos = it.second["position"].to_double();
    double bpm = it.second["bpm"].to_double();
    SetTempoTimeSigMarker(proj, -1, pos, 0, 0.0, bpm, 0, 0, false);
  }
  return proj;
#else
  (void)fn;
  return NULL;
#endif
}

<<<END_FILE sdk/otio/otio.cpp>>>

<<<BEGIN_FILE sdk/reaper_api_loader.hpp>>>
#ifndef REAPER_API_LOADER_HPP
#define REAPER_API_LOADER_HPP

#include "reaper_plugin.h"
#include "reaper_plugin_functions.h"
#include <utility>

class ReaperAPILoader {
public:
  using get_api_t = void *(*)(const char *);

  template <typename Sig> class Function;

  template <typename Ret, typename... Args> class Function<Ret(Args...)> {
  public:
    using Fn = Ret (*)(Args...);
    Function() : fn_(nullptr) {}
    Function(get_api_t api, const char *name) { load(api, name); }
    bool load(get_api_t api, const char *name) {
      fn_ = api ? reinterpret_cast<Fn>(api(name)) : nullptr;
      return fn_ != nullptr;
    }
    bool valid() const { return fn_ != nullptr; }
    explicit operator bool() const { return valid(); }
    Ret operator()(Args... args) const { return fn_(args...); }

  private:
    Fn fn_;
  };

  explicit ReaperAPILoader(reaper_plugin_info_t *rec) : api_(nullptr), ok_(false) {
    if (!rec || rec->caller_version != REAPER_PLUGIN_VERSION || !rec->GetFunc)
      return;
    api_ = rec->GetFunc;
    ok_ = (REAPERAPI_LoadAPI(api_) == 0);
  }
  ~ReaperAPILoader() = default;

  bool ok() const { return ok_; }
  explicit operator bool() const { return ok_; }

  template <typename Sig> Function<Sig> load(const char *name) const {
    return Function<Sig>(api_, name);
  }

private:
  get_api_t api_;
  bool ok_;
};

#endif

<<<END_FILE sdk/reaper_api_loader.hpp>>>

<<<BEGIN_FILE sdk/reaper_atmos.h>>>
#ifndef REAPER_ATMOS_H
#define REAPER_ATMOS_H

#include "reaper_plugin.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Mapping between tracks and Atmos objects/beds */
typedef struct reaper_atmos_object_mapping_t {
  int track_index;  /* index of the REAPER track */
  int object_id;    /* Dolby Atmos object identifier */
  int is_bed;       /* non-zero if this is a bed channel */
} reaper_atmos_object_mapping_t;

/* Speaker format template description */
typedef struct reaper_atmos_speaker_format {
  const char *name;            /* human readable name */
  int num_channels;            /* number of channels in format */
  const char **channel_names;  /* array of channel names */
} reaper_atmos_speaker_format;

/* API: obtain information about built in speaker formats */
REAPER_PLUGIN_DLL_EXPORT void REAPER_API_DECL Atmos_RegisterSpeakerFormat(const reaper_atmos_speaker_format *fmt);
REAPER_PLUGIN_DLL_EXPORT int REAPER_API_DECL Atmos_GetSpeakerFormatCount();
REAPER_PLUGIN_DLL_EXPORT const reaper_atmos_speaker_format *REAPER_API_DECL Atmos_GetSpeakerFormat(int idx);

/* API: assign a track to an Atmos object (object_id >=0) or bed (<0) */
REAPER_PLUGIN_DLL_EXPORT void REAPER_API_DECL Atmos_AssignTrackObject(MediaTrack *track, int object_id);
REAPER_PLUGIN_DLL_EXPORT int REAPER_API_DECL Atmos_GetTrackObject(MediaTrack *track);

/* API: export project using ADM or BWF standards */
REAPER_PLUGIN_DLL_EXPORT bool REAPER_API_DECL Atmos_ExportADM(const char *path);
REAPER_PLUGIN_DLL_EXPORT bool REAPER_API_DECL Atmos_ExportBWF(const char *path);

#ifdef __cplusplus
}
#endif

#endif /* REAPER_ATMOS_H */

<<<END_FILE sdk/reaper_atmos.h>>>

<<<BEGIN_FILE sdk/reaper_plugin_functions.h>>>
#ifndef _REAPER_PLUGIN_FUNCTIONS_H_
#define _REAPER_PLUGIN_FUNCTIONS_H_

// REAPER API functions
// Generated by REAPER v7.42

/*
*  Copyright 2006 and later, Cockos Incorporated
*
*  This software is provided 'as-is', without any express or implied
*  warranty.  In no event will the authors be held liable for any damages
*  arising from the use of this software.
*
*  Permission is granted to anyone to use this software for any purpose,
*  including commercial applications, and to alter it and redistribute it
*  freely, subject to the following restrictions:
*
*  1. The origin of this software must not be misrepresented; you must not
*     claim that you wrote the original software. If you use this software
*     in a product, an acknowledgment in the product documentation would be
*     appreciated but is not required.
*  2. Altered source versions must be plainly marked as such, and must not be
*     misrepresented as being the original software.
*  3. This notice may not be removed or altered from any source distribution.
*/

// Note: the C++ pure virtual interfaces assume a MSVC-compatible C++ ABI on
// Windows and can be used with MSVC or GCC/Clang targets such as MinGW.
//
// Reaper extensions: see http://www.cockos.com/reaper/sdk/plugin/plugin.php and reaper_plugin.h.
// The API functions in this header can be retrieved using reaper_plugin_info_t.GetFunc().
//
// VST plugins: see http://www.cockos.com/reaper/sdk/vst/vst_ext.php
// The API functions in this header can be retrieved using audioMasterCallback.
//
// Because the API is dynamic, callers should never assume a function exists.
// Check that a non-NULL function pointer was returned before using it (unless
// loaded functions are verified using REAPERAPI_LoadAPI(), see note below).

//   1) most source files should just #include "reaper_plugin_functions.h" as is.
//   2) one file should #define REAPERAPI_IMPLEMENT before including this file.
//   3) the plug-in should call REAPERAPI_LoadAPI(rec->GetFunc) from REAPER_PLUGIN_ENTRYPOINT
//      and check the return value for errors (REAPERAPI_LoadAPI will return 0 on success).

//   By default, all functions listed in this file are loaded. This means that an older version
//   of REAPER may not succeed in loading, and also it may bloat your plug-in. If you wish to only load
//   needed functions, #define REAPERAPI_MINIMAL and various #define REAPERAPI_WANT_<functionname> lines
//   before including this file. You must put these definitions where REAPERAPI_IMPLEMENT is defined
//   and you can optionally put them elsewhere (to detect needed REAPERAPI_WANT_xxx lines at compile-
//   time rather than link-time).
//   
#if !defined(_LICE_H) && !defined(REAPERAPI_NO_LICE)
typedef unsigned int LICE_pixel;
typedef unsigned char LICE_pixel_chan;
class LICE_IBitmap;
class LICE_IFont;
#endif

class WDL_VirtualWnd_BGCfg;
class AudioAccessor;
class joystick_device;

// easiest to include reaper_plugin.h before reaper_plugin_functions.h in your application code.
// if not, you may need to edit this path.
#ifndef _REAPER_PLUGIN_H_
#include "reaper_plugin.h"
#endif

#ifdef REAPERAPI_DEF
#undef REAPERAPI_DEF
#endif
#ifdef REAPERAPI_IMPLEMENT
  #define REAPERAPI_DEF
#else
  #define REAPERAPI_DEF extern
#endif

#ifndef REAPERAPI_FUNCNAME
  #define REAPERAPI_FUNCNAME(x) x
#endif


#if defined(REAPERAPI_WANT___mergesort) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// __mergesort
// __mergesort is a stable sorting function with an API similar to qsort().
// HOWEVER, it requires some temporary space, equal to the size of the data being sorted, so you can pass it as the last parameter,
// or NULL and it will allocate and free space internally.

  void (*REAPERAPI_FUNCNAME(__mergesort))(void* base, size_t nmemb, size_t size, int (*cmpfunc)(const void*,const void*), void* tmpspace);
#endif

#if defined(REAPERAPI_WANT_AddCustomizableMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddCustomizableMenu
// menuidstr is some unique identifying string (must be a persistent pointer)
// menuname is for main menus only (displayed in a menu bar somewhere), NULL otherwise
// kbdsecname is the name of the KbdSectionInfo registered by this plugin, or NULL for the main actions section

  bool (*REAPERAPI_FUNCNAME(AddCustomizableMenu))(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu);
#endif

#if defined(REAPERAPI_WANT_AddExtensionsMainMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddExtensionsMainMenu
// Add an Extensions main menu, which the extension can populate/modify with plugin_register("hookcustommenu")

  bool (*REAPERAPI_FUNCNAME(AddExtensionsMainMenu))();
#endif

#if defined(REAPERAPI_WANT_AddMediaItemToTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddMediaItemToTrack
// creates a new media item.

  MediaItem* (*REAPERAPI_FUNCNAME(AddMediaItemToTrack))(MediaTrack* tr);
#endif

#if defined(REAPERAPI_WANT_AddProjectMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddProjectMarker
// Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.

  int (*REAPERAPI_FUNCNAME(AddProjectMarker))(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx);
#endif

#if defined(REAPERAPI_WANT_AddProjectMarker2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddProjectMarker2
// Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000

  int (*REAPERAPI_FUNCNAME(AddProjectMarker2))(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color);
#endif

#if defined(REAPERAPI_WANT_AddRemoveReaScript) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddRemoveReaScript
// Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.

  int (*REAPERAPI_FUNCNAME(AddRemoveReaScript))(bool add, int sectionID, const char* scriptfn, bool commit);
#endif

#if defined(REAPERAPI_WANT_AddTakeToMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddTakeToMediaItem
// creates a new take in an item

  MediaItem_Take* (*REAPERAPI_FUNCNAME(AddTakeToMediaItem))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_AddTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddTempoTimeSigMarker
// Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.

  bool (*REAPERAPI_FUNCNAME(AddTempoTimeSigMarker))(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange);
#endif

#if defined(REAPERAPI_WANT_AddTrackMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AddTrackMarker
// Returns the index of the created track marker/region, or -1 on failure. lane specifies the marker lane.

  int (*REAPERAPI_FUNCNAME(AddTrackMarker))(MediaTrack* track, int lane, bool isrgn, double pos, double rgnend, const char* name, int wantidx);
#endif

#if defined(REAPERAPI_WANT_adjustZoom) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// adjustZoom
// forceset=0,doupd=true,centermode=-1 for default

  void (*REAPERAPI_FUNCNAME(adjustZoom))(double amt, int forceset, bool doupd, int centermode);
#endif

#if defined(REAPERAPI_WANT_AdvancePlaybackPosition) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AdvancePlaybackPosition
// Steps through audio blocks for project. opos is start of current block in seconds, *npos should be set to start of estimated next block, will be updated with new start. loopcnt should be set to GetPlayLoopCnt initially, will be updated if discontinuity. max_spls may be updated to shorter block length if discontinuity. sflags should be 0 initially and is the running state used internally. returns 1 if looped sel, 2 if looped project, 4 if loopendskip, 8 if smoothseek, 16 if fade audition (all during this block).  Typically called with code something like:
// 
//   int asflags = 0;
//   INT64 lc = GetPlayLoopCnt(proj, NULL);
//   double oldpos = GetPlayPosition2Ex(proj);
//   loop:
//     double nextpos = old_pos + len / srate;
//     int thislen = len;
//     int ret = AdvancePlaybackPosition(proj, old_pos, &nextpos, &lc, srate, &thislen, &asflags);
//     oldpos = nextpos;
//   goto loop
// 

  int (*REAPERAPI_FUNCNAME(AdvancePlaybackPosition))(ReaProject* proj, double opos, double* npos, WDL_INT64* loopcnt, double srate, int* max_spls, int* sflags);
#endif

#if defined(REAPERAPI_WANT_AnyTrackSolo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AnyTrackSolo

  bool (*REAPERAPI_FUNCNAME(AnyTrackSolo))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_APIExists) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// APIExists
// Returns true if function_name exists in the REAPER API

  bool (*REAPERAPI_FUNCNAME(APIExists))(const char* function_name);
#endif

#if defined(REAPERAPI_WANT_APITest) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// APITest
// Displays a message window if the API was successfully called.

  void (*REAPERAPI_FUNCNAME(APITest))();
#endif

#if defined(REAPERAPI_WANT_ARA_AttachProcessorToMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ARA_AttachProcessorToMediaItem
// Attach an ARA2 processor identified by processorId to the specified media item.
// Optional stateData contains serialized processor state or NULL.

  bool (*REAPERAPI_FUNCNAME(ARA_AttachProcessorToMediaItem))(MediaItem* item, const char* processorId, const char* stateData);
#endif

#if defined(REAPERAPI_WANT_ARA_DetachProcessorFromMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ARA_DetachProcessorFromMediaItem
// Detach any previously attached ARA2 processor from the media item.

  bool (*REAPERAPI_FUNCNAME(ARA_DetachProcessorFromMediaItem))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_ApplyNudge) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ApplyNudge
// nudgeflag: &1=set to value (otherwise nudge by value), &2=snap
// nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor
// nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections
// value: amount to nudge by, or value to set to
// reverse: in nudge mode, nudges left (otherwise ignored)
// copies: in nudge duplicate mode, number of copies (otherwise ignored)

  bool (*REAPERAPI_FUNCNAME(ApplyNudge))(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies);
#endif

#if defined(REAPERAPI_WANT_ArmCommand) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ArmCommand
// arms a command (or disarms if 0 passed) in section sectionname (empty string for main)

  void (*REAPERAPI_FUNCNAME(ArmCommand))(int cmd, const char* sectionname);
#endif

#if defined(REAPERAPI_WANT_Audio_Init) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Audio_Init
// open all audio and MIDI devices, if not open

  void (*REAPERAPI_FUNCNAME(Audio_Init))();
#endif

#if defined(REAPERAPI_WANT_Audio_IsPreBuffer) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Audio_IsPreBuffer
// is in pre-buffer? threadsafe

  int (*REAPERAPI_FUNCNAME(Audio_IsPreBuffer))();
#endif

#if defined(REAPERAPI_WANT_Audio_IsRunning) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Audio_IsRunning
// is audio running at all? threadsafe

  int (*REAPERAPI_FUNCNAME(Audio_IsRunning))();
#endif

#if defined(REAPERAPI_WANT_Audio_Quit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Audio_Quit
// close all audio and MIDI devices, if open

  void (*REAPERAPI_FUNCNAME(Audio_Quit))();
#endif

#if defined(REAPERAPI_WANT_Audio_RegHardwareHook) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Audio_RegHardwareHook
// return >0 on success

  int (*REAPERAPI_FUNCNAME(Audio_RegHardwareHook))(bool isAdd, audio_hook_register_t* reg);
#endif

#if defined(REAPERAPI_WANT_AudioAccessorStateChanged) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AudioAccessorStateChanged
// Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.

  bool (*REAPERAPI_FUNCNAME(AudioAccessorStateChanged))(AudioAccessor* accessor);
#endif

#if defined(REAPERAPI_WANT_AudioAccessorUpdate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AudioAccessorUpdate
// Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.

  void (*REAPERAPI_FUNCNAME(AudioAccessorUpdate))(AudioAccessor* accessor);
#endif

#if defined(REAPERAPI_WANT_AudioAccessorValidateState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// AudioAccessorValidateState
// Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.

  bool (*REAPERAPI_FUNCNAME(AudioAccessorValidateState))(AudioAccessor* accessor);
#endif

#if defined(REAPERAPI_WANT_BypassFxAllTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// BypassFxAllTracks
// -1 = bypass all if not all bypassed,otherwise unbypass all

  void (*REAPERAPI_FUNCNAME(BypassFxAllTracks))(int bypass);
#endif

#if defined(REAPERAPI_WANT_CalcMediaSrcLoudness) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CalcMediaSrcLoudness
// Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String("RENDER_STATS") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.

  int (*REAPERAPI_FUNCNAME(CalcMediaSrcLoudness))(PCM_source* mediasource);
#endif

#if defined(REAPERAPI_WANT_CalculateNormalization) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CalculateNormalization
// Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation.

  double (*REAPERAPI_FUNCNAME(CalculateNormalization))(PCM_source* source, int normalizeTo, double normalizeTarget, double normalizeStart, double normalizeEnd);
#endif

#if defined(REAPERAPI_WANT_CalculatePeaks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CalculatePeaks

  int (*REAPERAPI_FUNCNAME(CalculatePeaks))(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock);
#endif

#if defined(REAPERAPI_WANT_CalculatePeaksFloatSrcPtr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CalculatePeaksFloatSrcPtr
// NOTE: source samples field is a pointer to floats instead

  int (*REAPERAPI_FUNCNAME(CalculatePeaksFloatSrcPtr))(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock);
#endif

#if defined(REAPERAPI_WANT_CalibrateRoundTripLatency) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CalibrateRoundTripLatency
// measures roundtrip latency via ping/loopback probe

  double (*REAPERAPI_FUNCNAME(CalibrateRoundTripLatency))();
#endif

#if defined(REAPERAPI_WANT_GetRoundTripLatency) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetRoundTripLatency
// returns last measured roundtrip latency in seconds

  double (*REAPERAPI_FUNCNAME(GetRoundTripLatency))();
#endif

#if defined(REAPERAPI_WANT_ClearAllRecArmed) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ClearAllRecArmed

  void (*REAPERAPI_FUNCNAME(ClearAllRecArmed))();
#endif

#if defined(REAPERAPI_WANT_ClearConsole) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ClearConsole
// Clear the ReaScript console. See ShowConsoleMsg

  void (*REAPERAPI_FUNCNAME(ClearConsole))();
#endif

#if defined(REAPERAPI_WANT_ClearPeakCache) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ClearPeakCache
// resets the global peak caches

  void (*REAPERAPI_FUNCNAME(ClearPeakCache))();
#endif

#if defined(REAPERAPI_WANT_ColorFromNative) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ColorFromNative
// Extract RGB values from an OS dependent color. See ColorToNative.

  void (*REAPERAPI_FUNCNAME(ColorFromNative))(int col, int* rOut, int* gOut, int* bOut);
#endif

#if defined(REAPERAPI_WANT_ColorToNative) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ColorToNative
// Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.

  int (*REAPERAPI_FUNCNAME(ColorToNative))(int r, int g, int b);
#endif

#if defined(REAPERAPI_WANT_CountActionShortcuts) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountActionShortcuts
// Returns the number of shortcuts that exist for the given command ID.
// see GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog.

  int (*REAPERAPI_FUNCNAME(CountActionShortcuts))(KbdSectionInfo* section, int cmdID);
#endif

#if defined(REAPERAPI_WANT_CountAutomationItems) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountAutomationItems
// Returns the number of automation items on this envelope. See GetSetAutomationItemInfo

  int (*REAPERAPI_FUNCNAME(CountAutomationItems))(TrackEnvelope* env);
#endif

#if defined(REAPERAPI_WANT_CountEnvelopePoints) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountEnvelopePoints
// Returns the number of points in the envelope. See CountEnvelopePointsEx.

  int (*REAPERAPI_FUNCNAME(CountEnvelopePoints))(TrackEnvelope* envelope);
#endif

#if defined(REAPERAPI_WANT_CountEnvelopePointsEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountEnvelopePointsEx
// Returns the number of points in the envelope.
// autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
// For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
// even if the automation item is trimmed so that not all points are visible.
// Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
// See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.

  int (*REAPERAPI_FUNCNAME(CountEnvelopePointsEx))(TrackEnvelope* envelope, int autoitem_idx);
#endif

#if defined(REAPERAPI_WANT_CountMediaItems) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountMediaItems
// count the number of items in the project (proj=0 for active project)

  int (*REAPERAPI_FUNCNAME(CountMediaItems))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_CountProjectMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountProjectMarkers
// num_markersOut and num_regionsOut may be NULL.

  int (*REAPERAPI_FUNCNAME(CountProjectMarkers))(ReaProject* proj, int* num_markersOut, int* num_regionsOut);
#endif

#if defined(REAPERAPI_WANT_CountSelectedMediaItems) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountSelectedMediaItems
// Discouraged, because GetSelectedMediaItem can be inefficient if media items are added, rearranged, or deleted in between calls. Instead see CountMediaItems, GetMediaItem, IsMediaItemSelected.

  int (*REAPERAPI_FUNCNAME(CountSelectedMediaItems))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_CountSelectedTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountSelectedTracks
// Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.

  int (*REAPERAPI_FUNCNAME(CountSelectedTracks))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_CountSelectedTracks2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountSelectedTracks2
// Count the number of selected tracks in the project (proj=0 for active project).

  int (*REAPERAPI_FUNCNAME(CountSelectedTracks2))(ReaProject* proj, bool wantmaster);
#endif

#if defined(REAPERAPI_WANT_CountTakeEnvelopes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTakeEnvelopes
// See GetTakeEnvelope

  int (*REAPERAPI_FUNCNAME(CountTakeEnvelopes))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_CountTakes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTakes
// count the number of takes in the item

  int (*REAPERAPI_FUNCNAME(CountTakes))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_CountTCPFXParms) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTCPFXParms
// Count the number of FX parameter knobs displayed on the track control panel.

  int (*REAPERAPI_FUNCNAME(CountTCPFXParms))(ReaProject* project, MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_CountTempoTimeSigMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTempoTimeSigMarkers
// Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.

  int (*REAPERAPI_FUNCNAME(CountTempoTimeSigMarkers))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_CountTrackEnvelopes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTrackEnvelopes
// see GetTrackEnvelope

  int (*REAPERAPI_FUNCNAME(CountTrackEnvelopes))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_CountTrackMediaItems) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTrackMediaItems
// count the number of items in the track

  int (*REAPERAPI_FUNCNAME(CountTrackMediaItems))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_CountTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CountTracks
// count the number of tracks in the project (proj=0 for active project)

  int (*REAPERAPI_FUNCNAME(CountTracks))(ReaProject* projOptional);
#endif

#if defined(REAPERAPI_WANT_CreateLocalOscHandler) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateLocalOscHandler
// callback is a function pointer: void (*callback)(void* obj, const char* msg, int msglen), which handles OSC messages sent from REAPER. The function return is a local osc handler. See SendLocalOscMessage, DestroyOscHandler.

  void* (*REAPERAPI_FUNCNAME(CreateLocalOscHandler))(void* obj, void* callback);
#endif

#if defined(REAPERAPI_WANT_CreateMIDIInput) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateMIDIInput
// Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc.

  midi_Input* (*REAPERAPI_FUNCNAME(CreateMIDIInput))(int dev);
#endif

#if defined(REAPERAPI_WANT_CreateMIDIOutput) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateMIDIOutput
// Can only reliably create midi access for devices not already opened in prefs/MIDI, suitable for control surfaces etc. If streamMode is set, msoffset100 points to a persistent variable that can change and reflects added delay to output in 100ths of a millisecond.

  midi_Output* (*REAPERAPI_FUNCNAME(CreateMIDIOutput))(int dev, bool streamMode, int* msoffset100);
#endif

#if defined(REAPERAPI_WANT_CreateNewMIDIItemInProj) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateNewMIDIItemInProj
// Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.

  MediaItem* (*REAPERAPI_FUNCNAME(CreateNewMIDIItemInProj))(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional);
#endif

#if defined(REAPERAPI_WANT_CreateTakeAudioAccessor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateTakeAudioAccessor
// Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.

  AudioAccessor* (*REAPERAPI_FUNCNAME(CreateTakeAudioAccessor))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_CreateTrackAudioAccessor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateTrackAudioAccessor
// Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.

  AudioAccessor* (*REAPERAPI_FUNCNAME(CreateTrackAudioAccessor))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_CreateTrackSend) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CreateTrackSend
// Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.

  int (*REAPERAPI_FUNCNAME(CreateTrackSend))(MediaTrack* tr, MediaTrack* desttrInOptional);
#endif

#if defined(REAPERAPI_WANT_CrossfadeEditor_OnCommand) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CrossfadeEditor_OnCommand
// Run a command from the Crossfade Editor section of the actions list.

  void (*REAPERAPI_FUNCNAME(CrossfadeEditor_OnCommand))(int command);
#endif

#if defined(REAPERAPI_WANT_CrossfadeEditor_Show) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CrossfadeEditor_Show
// Show or hide the Crossfade Editor window

  void (*REAPERAPI_FUNCNAME(CrossfadeEditor_Show))(bool show);
#endif

#if defined(REAPERAPI_WANT_CSurf_FlushUndo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_FlushUndo
// call this to force flushing of the undo states after using CSurf_On*Change()

  void (*REAPERAPI_FUNCNAME(CSurf_FlushUndo))(bool force);
#endif

#if defined(REAPERAPI_WANT_CSurf_GetTouchState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_GetTouchState

  bool (*REAPERAPI_FUNCNAME(CSurf_GetTouchState))(MediaTrack* trackid, int isPan);
#endif

#if defined(REAPERAPI_WANT_CSurf_GoEnd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_GoEnd

  void (*REAPERAPI_FUNCNAME(CSurf_GoEnd))();
#endif

#if defined(REAPERAPI_WANT_CSurf_GoStart) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_GoStart

  void (*REAPERAPI_FUNCNAME(CSurf_GoStart))();
#endif

#if defined(REAPERAPI_WANT_CSurf_NumTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_NumTracks

  int (*REAPERAPI_FUNCNAME(CSurf_NumTracks))(bool mcpView);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnArrow) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnArrow

  void (*REAPERAPI_FUNCNAME(CSurf_OnArrow))(int whichdir, bool wantzoom);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnFwd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnFwd

  void (*REAPERAPI_FUNCNAME(CSurf_OnFwd))(int seekplay);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnFXChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnFXChange

  bool (*REAPERAPI_FUNCNAME(CSurf_OnFXChange))(MediaTrack* trackid, int en);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnInputMonitorChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnInputMonitorChange

  int (*REAPERAPI_FUNCNAME(CSurf_OnInputMonitorChange))(MediaTrack* trackid, int monitor);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnInputMonitorChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnInputMonitorChangeEx

  int (*REAPERAPI_FUNCNAME(CSurf_OnInputMonitorChangeEx))(MediaTrack* trackid, int monitor, bool allowgang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnMuteChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnMuteChange

  bool (*REAPERAPI_FUNCNAME(CSurf_OnMuteChange))(MediaTrack* trackid, int mute);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnMuteChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnMuteChangeEx

  bool (*REAPERAPI_FUNCNAME(CSurf_OnMuteChangeEx))(MediaTrack* trackid, int mute, bool allowgang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnOscControlMessage) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnOscControlMessage

  void (*REAPERAPI_FUNCNAME(CSurf_OnOscControlMessage))(const char* msg, const float* arg);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnOscControlMessage2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnOscControlMessage2

  void (*REAPERAPI_FUNCNAME(CSurf_OnOscControlMessage2))(const char* msg, const float* arg, const char* argstr);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnPanChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnPanChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnPanChange))(MediaTrack* trackid, double pan, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnPanChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnPanChangeEx

  double (*REAPERAPI_FUNCNAME(CSurf_OnPanChangeEx))(MediaTrack* trackid, double pan, bool relative, bool allowGang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnPause) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnPause

  void (*REAPERAPI_FUNCNAME(CSurf_OnPause))();
#endif

#if defined(REAPERAPI_WANT_CSurf_OnPlay) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnPlay

  void (*REAPERAPI_FUNCNAME(CSurf_OnPlay))();
#endif

#if defined(REAPERAPI_WANT_CSurf_OnPlayRateChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnPlayRateChange

  void (*REAPERAPI_FUNCNAME(CSurf_OnPlayRateChange))(double playrate);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRecArmChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRecArmChange

  bool (*REAPERAPI_FUNCNAME(CSurf_OnRecArmChange))(MediaTrack* trackid, int recarm);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRecArmChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRecArmChangeEx

  bool (*REAPERAPI_FUNCNAME(CSurf_OnRecArmChangeEx))(MediaTrack* trackid, int recarm, bool allowgang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRecord) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRecord

  void (*REAPERAPI_FUNCNAME(CSurf_OnRecord))();
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRecvPanChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRecvPanChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnRecvPanChange))(MediaTrack* trackid, int recv_index, double pan, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRecvVolumeChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRecvVolumeChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnRecvVolumeChange))(MediaTrack* trackid, int recv_index, double volume, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRew) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRew

  void (*REAPERAPI_FUNCNAME(CSurf_OnRew))(int seekplay);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnRewFwd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnRewFwd

  void (*REAPERAPI_FUNCNAME(CSurf_OnRewFwd))(int seekplay, int dir);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnScroll) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnScroll

  void (*REAPERAPI_FUNCNAME(CSurf_OnScroll))(int xdir, int ydir);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnSelectedChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnSelectedChange

  bool (*REAPERAPI_FUNCNAME(CSurf_OnSelectedChange))(MediaTrack* trackid, int selected);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnSendPanChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnSendPanChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnSendPanChange))(MediaTrack* trackid, int send_index, double pan, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnSendVolumeChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnSendVolumeChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnSendVolumeChange))(MediaTrack* trackid, int send_index, double volume, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnSoloChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnSoloChange

  bool (*REAPERAPI_FUNCNAME(CSurf_OnSoloChange))(MediaTrack* trackid, int solo);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnSoloChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnSoloChangeEx

  bool (*REAPERAPI_FUNCNAME(CSurf_OnSoloChangeEx))(MediaTrack* trackid, int solo, bool allowgang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnStop) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnStop

  void (*REAPERAPI_FUNCNAME(CSurf_OnStop))();
#endif

#if defined(REAPERAPI_WANT_CSurf_OnTempoChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnTempoChange

  void (*REAPERAPI_FUNCNAME(CSurf_OnTempoChange))(double bpm);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnTrackSelection) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnTrackSelection

  void (*REAPERAPI_FUNCNAME(CSurf_OnTrackSelection))(MediaTrack* trackid);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnVolumeChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnVolumeChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnVolumeChange))(MediaTrack* trackid, double volume, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnVolumeChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnVolumeChangeEx

  double (*REAPERAPI_FUNCNAME(CSurf_OnVolumeChangeEx))(MediaTrack* trackid, double volume, bool relative, bool allowGang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnWidthChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnWidthChange

  double (*REAPERAPI_FUNCNAME(CSurf_OnWidthChange))(MediaTrack* trackid, double width, bool relative);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnWidthChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnWidthChangeEx

  double (*REAPERAPI_FUNCNAME(CSurf_OnWidthChangeEx))(MediaTrack* trackid, double width, bool relative, bool allowGang);
#endif

#if defined(REAPERAPI_WANT_CSurf_OnZoom) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_OnZoom

  void (*REAPERAPI_FUNCNAME(CSurf_OnZoom))(int xdir, int ydir);
#endif

#if defined(REAPERAPI_WANT_CSurf_ResetAllCachedVolPanStates) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_ResetAllCachedVolPanStates

  void (*REAPERAPI_FUNCNAME(CSurf_ResetAllCachedVolPanStates))();
#endif

#if defined(REAPERAPI_WANT_CSurf_ScrubAmt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_ScrubAmt

  void (*REAPERAPI_FUNCNAME(CSurf_ScrubAmt))(double amt);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetAutoMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetAutoMode

  void (*REAPERAPI_FUNCNAME(CSurf_SetAutoMode))(int mode, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetPlayState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetPlayState

  void (*REAPERAPI_FUNCNAME(CSurf_SetPlayState))(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetRepeatState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetRepeatState

  void (*REAPERAPI_FUNCNAME(CSurf_SetRepeatState))(bool rep, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetSurfaceMute) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetSurfaceMute

  void (*REAPERAPI_FUNCNAME(CSurf_SetSurfaceMute))(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetSurfacePan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetSurfacePan

  void (*REAPERAPI_FUNCNAME(CSurf_SetSurfacePan))(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetSurfaceRecArm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetSurfaceRecArm

  void (*REAPERAPI_FUNCNAME(CSurf_SetSurfaceRecArm))(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetSurfaceSelected) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetSurfaceSelected

  void (*REAPERAPI_FUNCNAME(CSurf_SetSurfaceSelected))(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetSurfaceSolo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetSurfaceSolo

  void (*REAPERAPI_FUNCNAME(CSurf_SetSurfaceSolo))(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetSurfaceVolume) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetSurfaceVolume

  void (*REAPERAPI_FUNCNAME(CSurf_SetSurfaceVolume))(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf);
#endif

#if defined(REAPERAPI_WANT_CSurf_SetTrackListChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_SetTrackListChange

  void (*REAPERAPI_FUNCNAME(CSurf_SetTrackListChange))();
#endif

#if defined(REAPERAPI_WANT_CSurf_TrackFromID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_TrackFromID

  MediaTrack* (*REAPERAPI_FUNCNAME(CSurf_TrackFromID))(int idx, bool mcpView);
#endif

#if defined(REAPERAPI_WANT_CSurf_TrackToID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// CSurf_TrackToID

  int (*REAPERAPI_FUNCNAME(CSurf_TrackToID))(MediaTrack* track, bool mcpView);
#endif

#if defined(REAPERAPI_WANT_DB2SLIDER) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DB2SLIDER

  double (*REAPERAPI_FUNCNAME(DB2SLIDER))(double x);
#endif

#if defined(REAPERAPI_WANT_DeleteActionShortcut) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteActionShortcut
// Delete the specific shortcut for the given command ID.
// See CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog.

  bool (*REAPERAPI_FUNCNAME(DeleteActionShortcut))(KbdSectionInfo* section, int cmdID, int shortcutidx);
#endif

#if defined(REAPERAPI_WANT_DeleteEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteEnvelopePointEx
// Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
// autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
// For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
// even if the automation item is trimmed so that not all points are visible.
// Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
// See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(DeleteEnvelopePointEx))(TrackEnvelope* envelope, int autoitem_idx, int ptidx);
#endif

#if defined(REAPERAPI_WANT_DeleteEnvelopePointRange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteEnvelopePointRange
// Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(DeleteEnvelopePointRange))(TrackEnvelope* envelope, double time_start, double time_end);
#endif

#if defined(REAPERAPI_WANT_DeleteEnvelopePointRangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteEnvelopePointRangeEx
// Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.

  bool (*REAPERAPI_FUNCNAME(DeleteEnvelopePointRangeEx))(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end);
#endif

#if defined(REAPERAPI_WANT_DeleteExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteExtState
// Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.

  void (*REAPERAPI_FUNCNAME(DeleteExtState))(const char* section, const char* key, bool persist);
#endif

#if defined(REAPERAPI_WANT_DeleteProjectMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteProjectMarker
// Delete a marker.  proj==NULL for the active project.

  bool (*REAPERAPI_FUNCNAME(DeleteProjectMarker))(ReaProject* proj, int markrgnindexnumber, bool isrgn);
#endif

#if defined(REAPERAPI_WANT_DeleteProjectMarkerByIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteProjectMarkerByIndex
// Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).

  bool (*REAPERAPI_FUNCNAME(DeleteProjectMarkerByIndex))(ReaProject* proj, int markrgnidx);
#endif

#if defined(REAPERAPI_WANT_DeleteTakeMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteTakeMarker
// Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker

  bool (*REAPERAPI_FUNCNAME(DeleteTakeMarker))(MediaItem_Take* take, int idx);
#endif

#if defined(REAPERAPI_WANT_DeleteTakeStretchMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteTakeStretchMarkers
// Deletes one or more stretch markers. Returns number of stretch markers deleted.

  int (*REAPERAPI_FUNCNAME(DeleteTakeStretchMarkers))(MediaItem_Take* take, int idx, const int* countInOptional);
#endif

#if defined(REAPERAPI_WANT_DeleteTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteTempoTimeSigMarker
// Delete a tempo/time signature marker.

  bool (*REAPERAPI_FUNCNAME(DeleteTempoTimeSigMarker))(ReaProject* project, int markerindex);
#endif

#if defined(REAPERAPI_WANT_DeleteTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteTrack
// deletes a track

  void (*REAPERAPI_FUNCNAME(DeleteTrack))(MediaTrack* tr);
#endif

#if defined(REAPERAPI_WANT_DeleteTrackMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteTrackMarker
// Delete a marker or region from a specific track and lane.

  bool (*REAPERAPI_FUNCNAME(DeleteTrackMarker))(MediaTrack* track, int lane, int markrgnindexnumber, bool isrgn);
#endif

#if defined(REAPERAPI_WANT_DeleteTrackMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DeleteTrackMediaItem

  bool (*REAPERAPI_FUNCNAME(DeleteTrackMediaItem))(MediaTrack* tr, MediaItem* it);
#endif

#if defined(REAPERAPI_WANT_DestroyAudioAccessor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DestroyAudioAccessor
// Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. 

  void (*REAPERAPI_FUNCNAME(DestroyAudioAccessor))(AudioAccessor* accessor);
#endif

#if defined(REAPERAPI_WANT_DestroyLocalOscHandler) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DestroyLocalOscHandler
// See CreateLocalOscHandler, SendLocalOscMessage.

  void (*REAPERAPI_FUNCNAME(DestroyLocalOscHandler))(void* local_osc_handler);
#endif

#if defined(REAPERAPI_WANT_DoActionShortcutDialog) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DoActionShortcutDialog
// Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.
// See CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut.

  bool (*REAPERAPI_FUNCNAME(DoActionShortcutDialog))(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx);
#endif

#if defined(REAPERAPI_WANT_Dock_UpdateDockID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Dock_UpdateDockID
// updates preference for docker window ident_str to be in dock whichDock on next open

  void (*REAPERAPI_FUNCNAME(Dock_UpdateDockID))(const char* ident_str, int whichDock);
#endif

#if defined(REAPERAPI_WANT_DockGetPosition) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockGetPosition
// -1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating

  int (*REAPERAPI_FUNCNAME(DockGetPosition))(int whichDock);
#endif

#if defined(REAPERAPI_WANT_DockIsChildOfDock) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockIsChildOfDock
// returns dock index that contains hwnd, or -1

  int (*REAPERAPI_FUNCNAME(DockIsChildOfDock))(HWND hwnd, bool* isFloatingDockerOut);
#endif

#if defined(REAPERAPI_WANT_DockWindowActivate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockWindowActivate

  void (*REAPERAPI_FUNCNAME(DockWindowActivate))(HWND hwnd);
#endif

#if defined(REAPERAPI_WANT_DockWindowAdd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockWindowAdd

  void (*REAPERAPI_FUNCNAME(DockWindowAdd))(HWND hwnd, const char* name, int pos, bool allowShow);
#endif

#if defined(REAPERAPI_WANT_DockWindowAddEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockWindowAddEx

  void (*REAPERAPI_FUNCNAME(DockWindowAddEx))(HWND hwnd, const char* name, const char* identstr, bool allowShow);
#endif

#if defined(REAPERAPI_WANT_DockWindowRefresh) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockWindowRefresh

  void (*REAPERAPI_FUNCNAME(DockWindowRefresh))();
#endif

#if defined(REAPERAPI_WANT_DockWindowRefreshForHWND) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockWindowRefreshForHWND

  void (*REAPERAPI_FUNCNAME(DockWindowRefreshForHWND))(HWND hwnd);
#endif

#if defined(REAPERAPI_WANT_DockWindowRemove) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DockWindowRemove

  void (*REAPERAPI_FUNCNAME(DockWindowRemove))(HWND hwnd);
#endif

#if defined(REAPERAPI_WANT_DuplicateCustomizableMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// DuplicateCustomizableMenu
// Populate destmenu with all the entries and submenus found in srcmenu

  bool (*REAPERAPI_FUNCNAME(DuplicateCustomizableMenu))(void* srcmenu, void* destmenu);
#endif

#if defined(REAPERAPI_WANT_EditTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EditTempoTimeSigMarker
// Open the tempo/time signature marker editor dialog.

  bool (*REAPERAPI_FUNCNAME(EditTempoTimeSigMarker))(ReaProject* project, int markerindex);
#endif

#if defined(REAPERAPI_WANT_EnsureNotCompletelyOffscreen) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnsureNotCompletelyOffscreen
// call with a saved window rect for your window and it'll correct any positioning info.

  void (*REAPERAPI_FUNCNAME(EnsureNotCompletelyOffscreen))(RECT* rInOut);
#endif

#if defined(REAPERAPI_WANT_EnumerateFiles) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumerateFiles
// List the files in the "path" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories

  const char* (*REAPERAPI_FUNCNAME(EnumerateFiles))(const char* path, int fileindex);
#endif

#if defined(REAPERAPI_WANT_EnumerateSubdirectories) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumerateSubdirectories
// List the subdirectories in the "path" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles

  const char* (*REAPERAPI_FUNCNAME(EnumerateSubdirectories))(const char* path, int subdirindex);
#endif

#if defined(REAPERAPI_WANT_EnumInstalledFX) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumInstalledFX
// Enumerates installed FX. Returns true if successful, sets nameOut and identOut to name and ident of FX at index. In REAPER 7.42+, use index=-1 to re-read JSFX info.

  bool (*REAPERAPI_FUNCNAME(EnumInstalledFX))(int index, const char** nameOut, const char** identOut);
#endif

#if defined(REAPERAPI_WANT_EnumPitchShiftModes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumPitchShiftModes
// Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported

  bool (*REAPERAPI_FUNCNAME(EnumPitchShiftModes))(int mode, const char** strOut);
#endif

#if defined(REAPERAPI_WANT_EnumPitchShiftSubModes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumPitchShiftSubModes
// Returns submode name, or NULL

  const char* (*REAPERAPI_FUNCNAME(EnumPitchShiftSubModes))(int mode, int submode);
#endif

#if defined(REAPERAPI_WANT_EnumProjectMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumProjectMarkers

  int (*REAPERAPI_FUNCNAME(EnumProjectMarkers))(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut);
#endif

#if defined(REAPERAPI_WANT_EnumProjectMarkers2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumProjectMarkers2

  int (*REAPERAPI_FUNCNAME(EnumProjectMarkers2))(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut);
#endif

#if defined(REAPERAPI_WANT_EnumProjectMarkers3) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumProjectMarkers3

  int (*REAPERAPI_FUNCNAME(EnumProjectMarkers3))(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut);
#endif

#if defined(REAPERAPI_WANT_EnumProjects) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumProjects
// idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.

  ReaProject* (*REAPERAPI_FUNCNAME(EnumProjects))(int idx, char* projfnOutOptional, int projfnOutOptional_sz);
#endif

#if defined(REAPERAPI_WANT_EnumProjExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumProjExtState
// Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.

  bool (*REAPERAPI_FUNCNAME(EnumProjExtState))(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz);
#endif

#if defined(REAPERAPI_WANT_EnumRegionRenderMatrix) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumRegionRenderMatrix
// Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.

  MediaTrack* (*REAPERAPI_FUNCNAME(EnumRegionRenderMatrix))(ReaProject* proj, int regionindex, int rendertrack);
#endif

#if defined(REAPERAPI_WANT_EnumTrackMIDIProgramNames) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumTrackMIDIProgramNames
// returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated

  bool (*REAPERAPI_FUNCNAME(EnumTrackMIDIProgramNames))(int track, int programNumber, char* programName, int programName_sz);
#endif

#if defined(REAPERAPI_WANT_EnumTrackMIDIProgramNamesEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumTrackMIDIProgramNamesEx
// returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated

  bool (*REAPERAPI_FUNCNAME(EnumTrackMIDIProgramNamesEx))(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz);
#endif

#if defined(REAPERAPI_WANT_EnumTrackMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// EnumTrackMarkers
// Enumerate markers and regions on a track. Returns 0 when no more markers are available.

  int (*REAPERAPI_FUNCNAME(EnumTrackMarkers))(MediaTrack* track, int idx, int* laneOut, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut);
#endif

#if defined(REAPERAPI_WANT_Envelope_Evaluate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Envelope_Evaluate
// Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.

  int (*REAPERAPI_FUNCNAME(Envelope_Evaluate))(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOut, double* dVdSOut, double* ddVdSOut, double* dddVdSOut);
#endif

#if defined(REAPERAPI_WANT_Envelope_FormatValue) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Envelope_FormatValue
// Formats the value of an envelope to a user-readable form

  void (*REAPERAPI_FUNCNAME(Envelope_FormatValue))(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_Envelope_GetParentTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Envelope_GetParentTake
// If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.

  MediaItem_Take* (*REAPERAPI_FUNCNAME(Envelope_GetParentTake))(TrackEnvelope* env, int* indexOut, int* index2Out);
#endif

#if defined(REAPERAPI_WANT_Envelope_GetParentTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Envelope_GetParentTrack
// If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.

  MediaTrack* (*REAPERAPI_FUNCNAME(Envelope_GetParentTrack))(TrackEnvelope* env, int* indexOut, int* index2Out);
#endif

#if defined(REAPERAPI_WANT_Envelope_SortPoints) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Envelope_SortPoints
// Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.

  bool (*REAPERAPI_FUNCNAME(Envelope_SortPoints))(TrackEnvelope* envelope);
#endif

#if defined(REAPERAPI_WANT_Envelope_SortPointsEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Envelope_SortPointsEx
// Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.

  bool (*REAPERAPI_FUNCNAME(Envelope_SortPointsEx))(TrackEnvelope* envelope, int autoitem_idx);
#endif

#if defined(REAPERAPI_WANT_ExecProcess) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ExecProcess
// Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize

  const char* (*REAPERAPI_FUNCNAME(ExecProcess))(const char* cmdline, int timeoutmsec);
#endif

#if defined(REAPERAPI_WANT_ExportTrackMIDIToMusicXML) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ExportTrackMIDIToMusicXML
// Export track MIDI data to a MusicXML file.

  bool (*REAPERAPI_FUNCNAME(ExportTrackMIDIToMusicXML))(MediaTrack* tr, const char* fn);
#endif

#if defined(REAPERAPI_WANT_ImportTrackMIDIFromMusicXML) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ImportTrackMIDIFromMusicXML
// Import MIDI data from a MusicXML file into a track.

  bool (*REAPERAPI_FUNCNAME(ImportTrackMIDIFromMusicXML))(MediaTrack* tr, const char* fn);
#endif

#if defined(REAPERAPI_WANT_file_exists) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// file_exists
// returns true if path points to a valid, readable file

  bool (*REAPERAPI_FUNCNAME(file_exists))(const char* path);
#endif

#if defined(REAPERAPI_WANT_FindTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// FindTempoTimeSigMarker
// Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).

  int (*REAPERAPI_FUNCNAME(FindTempoTimeSigMarker))(ReaProject* project, double time);
#endif

#if defined(REAPERAPI_WANT_format_timestr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// format_timestr
// Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.

  void (*REAPERAPI_FUNCNAME(format_timestr))(double tpos, char* buf, int buf_sz);
#endif

#if defined(REAPERAPI_WANT_format_timestr_len) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// format_timestr_len
// time formatting mode overrides: -1=proj default.
// 0=time
// 1=measures.beats + time
// 2=measures.beats
// 3=seconds
// 4=samples
// 5=h:m:s:f
// offset is start of where the length will be calculated from

  void (*REAPERAPI_FUNCNAME(format_timestr_len))(double tpos, char* buf, int buf_sz, double offset, int modeoverride);
#endif

#if defined(REAPERAPI_WANT_format_timestr_pos) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// format_timestr_pos
// time formatting mode overrides: -1=proj default.
// 0=time
// 1=measures.beats + time
// 2=measures.beats
// 3=seconds
// 4=samples
// 5=h:m:s:f
// 

  void (*REAPERAPI_FUNCNAME(format_timestr_pos))(double tpos, char* buf, int buf_sz, int modeoverride);
#endif

#if defined(REAPERAPI_WANT_FreeHeapPtr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// FreeHeapPtr
// free heap memory returned from a Reaper API function

  void (*REAPERAPI_FUNCNAME(FreeHeapPtr))(void* ptr);
#endif

#if defined(REAPERAPI_WANT_genGuid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// genGuid

  void (*REAPERAPI_FUNCNAME(genGuid))(GUID* g);
#endif

#if defined(REAPERAPI_WANT_get_config_var) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// get_config_var
// gets ini configuration variable by name, raw, returns size of variable in szOut and pointer to variable. special values queryable are also:
//   __numcpu (int) cpu count.
//   __fx_loadstate_ctx (char): 0 if unknown, or during FX state loading: 'u' (instantiating via undo), 'U' (updating via undo), 'P' (loading preset). __langpack_filename can query langpack filename. If empty or <> then no langpack loaded; if relative pathname, then langpack is not yet loaded.

  void* (*REAPERAPI_FUNCNAME(get_config_var))(const char* name, int* szOut);
#endif

#if defined(REAPERAPI_WANT_get_config_var_string) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// get_config_var_string
// gets ini configuration variable value as string

  bool (*REAPERAPI_FUNCNAME(get_config_var_string))(const char* name, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_get_ini_file) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// get_ini_file
// Get reaper.ini full filename.

  const char* (*REAPERAPI_FUNCNAME(get_ini_file))();
#endif

#if defined(REAPERAPI_WANT_get_midi_config_var) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// get_midi_config_var
// Deprecated.

  void* (*REAPERAPI_FUNCNAME(get_midi_config_var))(const char* name, int* szOut);
#endif

#if defined(REAPERAPI_WANT_GetActionShortcutDesc) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetActionShortcutDesc
// Get the text description of a specific shortcut for the given command ID.
// See CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog.

  bool (*REAPERAPI_FUNCNAME(GetActionShortcutDesc))(KbdSectionInfo* section, int cmdID, int shortcutidx, char* descOut, int descOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetActiveTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetActiveTake
// get the active take in this item

  MediaItem_Take* (*REAPERAPI_FUNCNAME(GetActiveTake))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_GetAllProjectPlayStates) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAllProjectPlayStates
// returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)

  int (*REAPERAPI_FUNCNAME(GetAllProjectPlayStates))(ReaProject* ignoreProject);
#endif

#if defined(REAPERAPI_WANT_GetAppVersion) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAppVersion
// Returns app version which may include an OS/arch signifier, such as: "6.17" (windows 32-bit), "6.17/x64" (windows 64-bit), "6.17/OSX64" (macOS 64-bit Intel), "6.17/OSX" (macOS 32-bit), "6.17/macOS-arm64", "6.17/linux-x86_64", "6.17/linux-i686", "6.17/linux-aarch64", "6.17/linux-armv7l", etc

  const char* (*REAPERAPI_FUNCNAME(GetAppVersion))();
#endif

#if defined(REAPERAPI_WANT_GetArmedCommand) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetArmedCommand
// gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.

  int (*REAPERAPI_FUNCNAME(GetArmedCommand))(char* secOut, int secOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetAudioAccessorEndTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAudioAccessorEndTime
// Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.

  double (*REAPERAPI_FUNCNAME(GetAudioAccessorEndTime))(AudioAccessor* accessor);
#endif

#if defined(REAPERAPI_WANT_GetAudioAccessorHash) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAudioAccessorHash
// Deprecated. See AudioAccessorStateChanged instead.

  void (*REAPERAPI_FUNCNAME(GetAudioAccessorHash))(AudioAccessor* accessor, char* hashNeed128);
#endif

#if defined(REAPERAPI_WANT_GetAudioAccessorSamples) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAudioAccessorSamples
// Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.// 
// 
// This function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:
// 
// <code>tr = RPR_GetTrack(0, 0)
// aa = RPR_CreateTrackAudioAccessor(tr)
// buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero
// pos = 0.0
// (ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)
// # buf now holds the first 2*1024 audio samples from the track.
// # typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.
// </code>

  int (*REAPERAPI_FUNCNAME(GetAudioAccessorSamples))(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer);
#endif

#if defined(REAPERAPI_WANT_GetAudioAccessorStartTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAudioAccessorStartTime
// Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.

  double (*REAPERAPI_FUNCNAME(GetAudioAccessorStartTime))(AudioAccessor* accessor);
#endif

#if defined(REAPERAPI_WANT_GetAudioDeviceInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetAudioDeviceInfo
// get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.

  bool (*REAPERAPI_FUNCNAME(GetAudioDeviceInfo))(const char* attribute, char* descOut, int descOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetColorTheme) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetColorTheme
// Deprecated, see GetColorThemeStruct.

  INT_PTR (*REAPERAPI_FUNCNAME(GetColorTheme))(int idx, int defval);
#endif

#if defined(REAPERAPI_WANT_GetColorThemeStruct) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetColorThemeStruct
// returns the whole color theme (icontheme.h) and the size

  void* (*REAPERAPI_FUNCNAME(GetColorThemeStruct))(int* szOut);
#endif

#if defined(REAPERAPI_WANT_GetConfigWantsDock) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetConfigWantsDock
// gets the dock ID desired by ident_str, if any

  int (*REAPERAPI_FUNCNAME(GetConfigWantsDock))(const char* ident_str);
#endif

#if defined(REAPERAPI_WANT_GetContextMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetContextMenu
// gets context menus. submenu 0:trackctl, 1:mediaitems, 2:ruler, 3:empty track area

  HMENU (*REAPERAPI_FUNCNAME(GetContextMenu))(int idx);
#endif

#if defined(REAPERAPI_WANT_GetCurrentProjectInLoadSave) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetCurrentProjectInLoadSave
// returns current project if in load/save (usually only used from project_config_extension_t)

  ReaProject* (*REAPERAPI_FUNCNAME(GetCurrentProjectInLoadSave))();
#endif

#if defined(REAPERAPI_WANT_GetCursorContext) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetCursorContext
// return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown

  int (*REAPERAPI_FUNCNAME(GetCursorContext))();
#endif

#if defined(REAPERAPI_WANT_GetCursorContext2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetCursorContext2
// 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)

  int (*REAPERAPI_FUNCNAME(GetCursorContext2))(bool want_last_valid);
#endif

#if defined(REAPERAPI_WANT_GetCursorPosition) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetCursorPosition
// edit cursor position

  double (*REAPERAPI_FUNCNAME(GetCursorPosition))();
#endif

#if defined(REAPERAPI_WANT_GetCursorPositionEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetCursorPositionEx
// edit cursor position

  double (*REAPERAPI_FUNCNAME(GetCursorPositionEx))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetDisplayedMediaItemColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetDisplayedMediaItemColor
// see GetDisplayedMediaItemColor2.

  int (*REAPERAPI_FUNCNAME(GetDisplayedMediaItemColor))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_GetDisplayedMediaItemColor2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetDisplayedMediaItemColor2
// Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means "no color", not black.

  int (*REAPERAPI_FUNCNAME(GetDisplayedMediaItemColor2))(MediaItem* item, MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopeInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopeInfo_Value
// Gets an envelope numerical-value attribute:
// I_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)
// I_TCPH : int : visible height of envelope
// I_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding
// I_TCPH_USED : int : visible height of envelope, exclusive of padding
// P_TRACK : MediaTrack * : parent track pointer (if any)
// P_DESTTRACK : MediaTrack * : destination track pointer, if on a send
// P_ITEM : MediaItem * : parent item pointer (if any)
// P_TAKE : MediaItem_Take * : parent take pointer (if any)
// I_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send
// I_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output
// I_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive
// 

  double (*REAPERAPI_FUNCNAME(GetEnvelopeInfo_Value))(TrackEnvelope* env, const char* parmname);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopeName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopeName

  bool (*REAPERAPI_FUNCNAME(GetEnvelopeName))(TrackEnvelope* env, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopePoint) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopePoint
// Get the attributes of an envelope point. See GetEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(GetEnvelopePoint))(TrackEnvelope* envelope, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopePointByTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopePointByTime
// Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.

  int (*REAPERAPI_FUNCNAME(GetEnvelopePointByTime))(TrackEnvelope* envelope, double time);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopePointByTimeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopePointByTimeEx
// Returns the envelope point at or immediately prior to the given time position.
// autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
// For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
// even if the automation item is trimmed so that not all points are visible.
// Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
// See GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.

  int (*REAPERAPI_FUNCNAME(GetEnvelopePointByTimeEx))(TrackEnvelope* envelope, int autoitem_idx, double time);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopePointEx
// Get the attributes of an envelope point.
// autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
// For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
// even if the automation item is trimmed so that not all points are visible.
// Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
// See CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(GetEnvelopePointEx))(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopeScalingMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopeScalingMode
// Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.

  int (*REAPERAPI_FUNCNAME(GetEnvelopeScalingMode))(TrackEnvelope* env);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopeStateChunk) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopeStateChunk
// Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.

  bool (*REAPERAPI_FUNCNAME(GetEnvelopeStateChunk))(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional);
#endif

#if defined(REAPERAPI_WANT_GetEnvelopeUIState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetEnvelopeUIState
// gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change

  int (*REAPERAPI_FUNCNAME(GetEnvelopeUIState))(TrackEnvelope* env);
#endif

#if defined(REAPERAPI_WANT_GetExePath) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetExePath
// returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER

  const char* (*REAPERAPI_FUNCNAME(GetExePath))();
#endif

#if defined(REAPERAPI_WANT_GetExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetExtState
// Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.

  const char* (*REAPERAPI_FUNCNAME(GetExtState))(const char* section, const char* key);
#endif

#if defined(REAPERAPI_WANT_GetFocusedFX) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetFocusedFX
// This function is deprecated (returns GetFocusedFX2()&3), see GetTouchedOrFocusedFX.

  int (*REAPERAPI_FUNCNAME(GetFocusedFX))(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut);
#endif

#if defined(REAPERAPI_WANT_GetFocusedFX2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetFocusedFX2
// Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX. Deprecated, see GetTouchedOrFocusedFX

  int (*REAPERAPI_FUNCNAME(GetFocusedFX2))(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut);
#endif

#if defined(REAPERAPI_WANT_GetFreeDiskSpaceForRecordPath) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetFreeDiskSpaceForRecordPath
// returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.

  int (*REAPERAPI_FUNCNAME(GetFreeDiskSpaceForRecordPath))(ReaProject* proj, int pathidx);
#endif

#if defined(REAPERAPI_WANT_GetFXEnvelope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetFXEnvelope
// Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed.

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetFXEnvelope))(MediaTrack* track, int fxindex, int parameterindex, bool create);
#endif

#if defined(REAPERAPI_WANT_GetGlobalAutomationOverride) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetGlobalAutomationOverride
// return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass

  int (*REAPERAPI_FUNCNAME(GetGlobalAutomationOverride))();
#endif

#if defined(REAPERAPI_WANT_GetHZoomLevel) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetHZoomLevel
// returns pixels/second

  double (*REAPERAPI_FUNCNAME(GetHZoomLevel))();
#endif

#if defined(REAPERAPI_WANT_GetIconThemePointer) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetIconThemePointer
// returns a named icontheme entry

  void* (*REAPERAPI_FUNCNAME(GetIconThemePointer))(const char* name);
#endif

#if defined(REAPERAPI_WANT_GetIconThemePointerForDPI) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetIconThemePointerForDPI
// returns a named icontheme entry for a given DPI-scaling (256=1:1). Note: the return value should not be stored, it should be queried at each paint! Querying name=NULL returns the start of the structure

  void* (*REAPERAPI_FUNCNAME(GetIconThemePointerForDPI))(const char* name, int dpisc);
#endif

#if defined(REAPERAPI_WANT_GetIconThemeStruct) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetIconThemeStruct
// returns a pointer to the icon theme (icontheme.h) and the size of that struct

  void* (*REAPERAPI_FUNCNAME(GetIconThemeStruct))(int* szOut);
#endif

#if defined(REAPERAPI_WANT_GetInputActivityLevel) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetInputActivityLevel
// returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices

  double (*REAPERAPI_FUNCNAME(GetInputActivityLevel))(int input_id);
#endif

#if defined(REAPERAPI_WANT_GetInputChannelName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetInputChannelName

  const char* (*REAPERAPI_FUNCNAME(GetInputChannelName))(int channelIndex);
#endif

#if defined(REAPERAPI_WANT_GetInputOutputLatency) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetInputOutputLatency
// Gets the audio device input/output latency in samples

  void (*REAPERAPI_FUNCNAME(GetInputOutputLatency))(int* inputlatencyOut, int* outputLatencyOut);
#endif

#if defined(REAPERAPI_WANT_GetItemEditingTime2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetItemEditingTime2
// returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)

  double (*REAPERAPI_FUNCNAME(GetItemEditingTime2))(PCM_source** which_itemOut, int* flagsOut);
#endif

#if defined(REAPERAPI_WANT_GetItemFromPoint) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetItemFromPoint
// Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint.

  MediaItem* (*REAPERAPI_FUNCNAME(GetItemFromPoint))(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional);
#endif

#if defined(REAPERAPI_WANT_GetItemProjectContext) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetItemProjectContext

  ReaProject* (*REAPERAPI_FUNCNAME(GetItemProjectContext))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_GetItemStateChunk) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetItemStateChunk
// Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.

  bool (*REAPERAPI_FUNCNAME(GetItemStateChunk))(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional);
#endif

#if defined(REAPERAPI_WANT_GetLastColorThemeFile) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetLastColorThemeFile

  const char* (*REAPERAPI_FUNCNAME(GetLastColorThemeFile))();
#endif

#if defined(REAPERAPI_WANT_GetLastMarkerAndCurRegion) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetLastMarkerAndCurRegion
// Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.

  void (*REAPERAPI_FUNCNAME(GetLastMarkerAndCurRegion))(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut);
#endif

#if defined(REAPERAPI_WANT_GetLastTouchedFX) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetLastTouchedFX
// Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number. Deprecated, see GetTouchedOrFocusedFX.

  bool (*REAPERAPI_FUNCNAME(GetLastTouchedFX))(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut);
#endif

#if defined(REAPERAPI_WANT_GetLastTouchedTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetLastTouchedTrack

  MediaTrack* (*REAPERAPI_FUNCNAME(GetLastTouchedTrack))();
#endif

#if defined(REAPERAPI_WANT_GetMainHwnd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMainHwnd

  HWND (*REAPERAPI_FUNCNAME(GetMainHwnd))();
#endif

#if defined(REAPERAPI_WANT_GetMasterMuteSoloFlags) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMasterMuteSoloFlags
// &1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.

  int (*REAPERAPI_FUNCNAME(GetMasterMuteSoloFlags))();
#endif

#if defined(REAPERAPI_WANT_GetMasterTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMasterTrack

  MediaTrack* (*REAPERAPI_FUNCNAME(GetMasterTrack))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetMasterTrackVisibility) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMasterTrackVisibility
// returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility.

  int (*REAPERAPI_FUNCNAME(GetMasterTrackVisibility))();
#endif

#if defined(REAPERAPI_WANT_GetMaxMidiInputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMaxMidiInputs
// returns max dev for midi inputs/outputs

  int (*REAPERAPI_FUNCNAME(GetMaxMidiInputs))();
#endif

#if defined(REAPERAPI_WANT_GetMaxMidiOutputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMaxMidiOutputs

  int (*REAPERAPI_FUNCNAME(GetMaxMidiOutputs))();
#endif

#if defined(REAPERAPI_WANT_GetMediaFileMetadata) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaFileMetadata
// Get text-based metadata from a media file for a given identifier. Call with identifier="" to list all identifiers contained in the file, separated by newlines. May return "[Binary data]" for metadata that REAPER doesn't handle.

  int (*REAPERAPI_FUNCNAME(GetMediaFileMetadata))(PCM_source* mediaSource, const char* identifier, char* bufOutNeedBig, int bufOutNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_GetMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItem
// get an item from a project by item count (zero-based) (proj=0 for active project)

  MediaItem* (*REAPERAPI_FUNCNAME(GetMediaItem))(ReaProject* proj, int itemidx);
#endif

#if defined(REAPERAPI_WANT_GetMediaItem_Track) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItem_Track
// Get parent track of media item

  MediaTrack* (*REAPERAPI_FUNCNAME(GetMediaItem_Track))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemInfo_Value
// Get media item numerical-value attributes.
// B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.
// B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
// C_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)
// C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
// B_LOOPSRC : bool * : loop source
// B_ALLTAKESPLAY : bool * : all takes play
// B_UISEL : bool * : selected in arrange view
// C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
// C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
// C_LOCK : char * : locked, &1=locked
// D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
// D_POSITION : double * : item position in seconds
// D_LENGTH : double * : item length in seconds
// D_SNAPOFFSET : double * : item snap offset in seconds
// D_FADEINLEN : double * : item manual fadein length in seconds
// D_FADEOUTLEN : double * : item manual fadeout length in seconds
// D_FADEINDIR : double * : item fadein curvature, -1..1
// D_FADEOUTDIR : double * : item fadeout curvature, -1..1
// D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
// D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
// C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
// C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
// I_GROUPID : int * : group ID, 0=no group
// I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
// I_LASTH : int * : height in pixels (read-only)
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// I_CURTAKE : int * : active take number
// IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
// F_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track
// F_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height
// I_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)
// B_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)
// P_TRACK : MediaTrack * : (read-only)
// 

  double (*REAPERAPI_FUNCNAME(GetMediaItemInfo_Value))(MediaItem* item, const char* parmname);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemNumTakes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemNumTakes

  int (*REAPERAPI_FUNCNAME(GetMediaItemNumTakes))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTake

  MediaItem_Take* (*REAPERAPI_FUNCNAME(GetMediaItemTake))(MediaItem* item, int tk);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTake_Item) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTake_Item
// Get parent item of media item take

  MediaItem* (*REAPERAPI_FUNCNAME(GetMediaItemTake_Item))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTake_Peaks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTake_Peaks
// Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.

  int (*REAPERAPI_FUNCNAME(GetMediaItemTake_Peaks))(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTake_Source) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTake_Source
// Get media source of media item take

  PCM_source* (*REAPERAPI_FUNCNAME(GetMediaItemTake_Source))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTake_Track) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTake_Track
// Get parent track of media item take

  MediaTrack* (*REAPERAPI_FUNCNAME(GetMediaItemTake_Track))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTakeByGUID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTakeByGUID

  MediaItem_Take* (*REAPERAPI_FUNCNAME(GetMediaItemTakeByGUID))(ReaProject* project, const GUID* guid);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTakeInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTakeInfo_Value
// Get media item take numerical-value attributes.
// D_STARTOFFS : double * : start offset in source media, in seconds
// D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
// D_PAN : double * : take pan, -1..1
// D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
// D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
// D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
// B_PPITCH : bool * : preserve pitch when changing playback rate
// I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
// I_LASTH : int * : height in pixels (read-only)
// I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
// I_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
// I_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)
// F_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)
// I_RECPASSID : int * : record pass ID
// I_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// IP_SPECEDIT:CNT : int : spectral edit count (read-only)
// IP_SPECEDIT:DELETE:x : int : read or write this key to remove the spectral edit specified
// IP_SPECEDIT:ADD : int : read or write this key to add a new spectral edit (returns index)
// IP_SPECEDIT:SORT : int : read or write this key to re-sort spectral edits (be sure to do this following a position change or insert of new edit)
// I_SPECEDIT:FFT_SIZE : int * : FFT size used by spectral edits for this take
// D_SPECEDIT:x:POSITION : double * : position of spectral edit start (changing this requires a resort of spectral edits)
// D_SPECEDIT:x:LENGTH : double * : length of spectral edit
// F_SPECEDIT:x:GAIN : float * : gain of spectral edit
// F_SPECEDIT:x:FADE_IN : float * : fade-in size 0..1
// F_SPECEDIT:x:FADE_OUT : float * : fade-out size 0..1
// F_SPECEDIT:x:FADE_LOW : float * : fade-lf size 0..1
// F_SPECEDIT:x:FADE_HI : float * : fade-hf size 0..1
// I_SPECEDIT:x:CHAN : int * : channel index, -1 for omni
// I_SPECEDIT:x:FLAGS : int * : flags, &1=bypassed, &2=solo
// F_SPECEDIT:x:GATE_THRESH : float * : gate threshold
// F_SPECEDIT:x:GATE_FLOOR : float * : gate floor
// F_SPECEDIT:x:COMP_THRESH : float * : comp threshold
// F_SPECEDIT:x:COMP_RATIO : float * : comp ratio
// B_SPECEDIT:x:SELECTED : bool * : selection state
// I_SPECEDIT:x:TOPFREQ_CNT : int * : (read-only) number of top frequency-points
// I_SPECEDIT:x:TOPFREQ_ADD:pos:val : int * : reading or writing will insert top frequency-point with position/value pair, returns index
// I_SPECEDIT:x:TOPFREQ_DEL:y : int * : reading or writing will delete top frequency-point y. there will always be at least one point.
// F_SPECEDIT:x:TOPFREQ_POS:y : float * : (read-only) get position of top frequency-point y
// F_SPECEDIT:x:TOPFREQ_FREQ:y : float * : (read-only) get frequency of top frequency-point y
// I_SPECEDIT:x:BOTFREQ_CNT : int * : number of bottom frequency-points
// I_SPECEDIT:x:BOTFREQ_ADD:pos:val : int * : reading or writing will insert bottom frequency-point with position/value pair, returns index
// I_SPECEDIT:x:BOTFREQ_DEL:y : int * : reading or writing will delete bottom frequency-point y. there will always be at least one point.
// F_SPECEDIT:x:BOTFREQ_POS:y : float * : (read-only) get position of bottom frequency-point y
// F_SPECEDIT:x:BOTFREQ_FREQ:y : float * : (read-only) get frequency of bottom frequency-point y
// IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
// P_TRACK : pointer to MediaTrack (read-only)
// P_ITEM : pointer to MediaItem (read-only)
// P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
// 

  double (*REAPERAPI_FUNCNAME(GetMediaItemTakeInfo_Value))(MediaItem_Take* take, const char* parmname);
#endif

#if defined(REAPERAPI_WANT_GetMediaItemTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaItemTrack

  MediaTrack* (*REAPERAPI_FUNCNAME(GetMediaItemTrack))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_GetMediaSourceFileName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaSourceFileName
// Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.

  void (*REAPERAPI_FUNCNAME(GetMediaSourceFileName))(PCM_source* source, char* filenamebufOut, int filenamebufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetMediaSourceLength) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaSourceLength
// Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.

  double (*REAPERAPI_FUNCNAME(GetMediaSourceLength))(PCM_source* source, bool* lengthIsQNOut);
#endif

#if defined(REAPERAPI_WANT_GetMediaSourceNumChannels) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaSourceNumChannels
// Returns the number of channels in the source media.

  int (*REAPERAPI_FUNCNAME(GetMediaSourceNumChannels))(PCM_source* source);
#endif

#if defined(REAPERAPI_WANT_GetMediaSourceParent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaSourceParent
// Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.

  PCM_source* (*REAPERAPI_FUNCNAME(GetMediaSourceParent))(PCM_source* src);
#endif

#if defined(REAPERAPI_WANT_GetMediaSourceSampleRate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaSourceSampleRate
// Returns the sample rate. MIDI source media will return zero.

  int (*REAPERAPI_FUNCNAME(GetMediaSourceSampleRate))(PCM_source* source);
#endif

#if defined(REAPERAPI_WANT_GetMediaSourceType) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaSourceType
// copies the media source type ("WAV", "MIDI", etc) to typebuf

  void (*REAPERAPI_FUNCNAME(GetMediaSourceType))(PCM_source* source, char* typebufOut, int typebufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetMediaTrackInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMediaTrackInfo_Value
// Get track numerical-value attributes.
// B_MUTE : bool * : muted
// B_PHASE : bool * : track phase inverted
// B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
// IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
// I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
// B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
// I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
// I_RECARM : int * : record armed, 0=not record armed, 1=record armed
// I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
// I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
// I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
// I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
// I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
// B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
// I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only
// I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
// I_NCHAN : int * : number of track channels, 2-128, even numbers only
// I_SELECTED : int * : track selected, 0=unselected, 1=selected
// I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
// I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
// I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
// I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)
// I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)
// I_MCPW : int * : current MCP width in pixels (read-only)
// I_MCPH : int * : current MCP height in pixels (read-only)
// I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
// I_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed
// I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
// I_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel
// I_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels
// I_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned
// I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
// I_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
// D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
// D_PAN : double * : trim pan of track, -1..1
// D_WIDTH : double * : width of track, -1..1
// D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
// D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
// I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
// D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
// I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
// D_PLAYRATE : double * : track playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
// D_PITCH : double * : track pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
// B_PPITCH : bool * : preserve pitch when changing playback rate
// I_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
// P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
// B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
// B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
// B_MAINSEND : bool * : track sends audio to parent
// C_MAINSEND_OFFS : char * : channel offset of track send to parent
// C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
// I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
// I_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)
// C_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)
// C_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons
// C_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)
// C_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)
// C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
// F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
// F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
// F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
// F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
// I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
// D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
// P_PARTRACK : MediaTrack * : parent track (read-only)
// P_PROJECT : ReaProject * : parent project (read-only)
// 

  double (*REAPERAPI_FUNCNAME(GetMediaTrackInfo_Value))(MediaTrack* tr, const char* parmname);
#endif

#if defined(REAPERAPI_WANT_GetMIDIInputName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMIDIInputName
// returns true if device present

  bool (*REAPERAPI_FUNCNAME(GetMIDIInputName))(int dev, char* nameout, int nameout_sz);
#endif

#if defined(REAPERAPI_WANT_GetMIDIOutputName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMIDIOutputName
// returns true if device present

  bool (*REAPERAPI_FUNCNAME(GetMIDIOutputName))(int dev, char* nameout, int nameout_sz);
#endif

#if defined(REAPERAPI_WANT_GetMIDI_LiveMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMIDI_LiveMode
// Query whether minimal-buffering live mode is enabled for MIDI tracks in the project.

  bool (*REAPERAPI_FUNCNAME(GetMIDI_LiveMode))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetMixerScroll) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMixerScroll
// Get the leftmost track visible in the mixer

  MediaTrack* (*REAPERAPI_FUNCNAME(GetMixerScroll))();
#endif

#if defined(REAPERAPI_WANT_GetMouseModifier) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMouseModifier
// Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.
// action will be filled in with the command ID number for a built-in mouse modifier
// or built-in REAPER command ID, or the custom action ID string.
// Note: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.
// See SetMouseModifier for more information.
// 

  void (*REAPERAPI_FUNCNAME(GetMouseModifier))(const char* context, int modifier_flag, char* actionOut, int actionOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetMousePosition) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetMousePosition
// get mouse position in screen coordinates

  void (*REAPERAPI_FUNCNAME(GetMousePosition))(int* xOut, int* yOut);
#endif

#if defined(REAPERAPI_WANT_GetNumAudioInputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetNumAudioInputs
// Return number of normal audio hardware inputs available

  int (*REAPERAPI_FUNCNAME(GetNumAudioInputs))();
#endif

#if defined(REAPERAPI_WANT_GetNumAudioOutputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetNumAudioOutputs
// Return number of normal audio hardware outputs available

  int (*REAPERAPI_FUNCNAME(GetNumAudioOutputs))();
#endif

#if defined(REAPERAPI_WANT_GetNumMIDIInputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetNumMIDIInputs
// returns max number of real midi hardware inputs

  int (*REAPERAPI_FUNCNAME(GetNumMIDIInputs))();
#endif

#if defined(REAPERAPI_WANT_GetNumMIDIOutputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetNumMIDIOutputs
// returns max number of real midi hardware outputs

  int (*REAPERAPI_FUNCNAME(GetNumMIDIOutputs))();
#endif

#if defined(REAPERAPI_WANT_GetNumTakeMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetNumTakeMarkers
// Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker

  int (*REAPERAPI_FUNCNAME(GetNumTakeMarkers))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetNumTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetNumTracks
// Returns number of tracks in current project, see CountTracks()

  int (*REAPERAPI_FUNCNAME(GetNumTracks))();
#endif

#if defined(REAPERAPI_WANT_GetOS) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetOS
// Returns "Win32", "Win64", "OSX32", "OSX64", "macOS-arm64", or "Other".

  const char* (*REAPERAPI_FUNCNAME(GetOS))();
#endif

#if defined(REAPERAPI_WANT_GetOutputChannelName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetOutputChannelName

  const char* (*REAPERAPI_FUNCNAME(GetOutputChannelName))(int channelIndex);
#endif

#if defined(REAPERAPI_WANT_GetOutputLatency) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetOutputLatency
// returns output latency in seconds

  double (*REAPERAPI_FUNCNAME(GetOutputLatency))();
#endif

#if defined(REAPERAPI_WANT_GetParentTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetParentTrack

  MediaTrack* (*REAPERAPI_FUNCNAME(GetParentTrack))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_GetPeakFileName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPeakFileName
// get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)

  void (*REAPERAPI_FUNCNAME(GetPeakFileName))(const char* fn, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetPeakFileNameEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPeakFileNameEx
// get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)

  void (*REAPERAPI_FUNCNAME(GetPeakFileNameEx))(const char* fn, char* buf, int buf_sz, bool forWrite);
#endif

#if defined(REAPERAPI_WANT_GetPeakFileNameEx2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPeakFileNameEx2
// Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"

  void (*REAPERAPI_FUNCNAME(GetPeakFileNameEx2))(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension);
#endif

#if defined(REAPERAPI_WANT_GetPeaksBitmap) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPeaksBitmap
// see note in reaper_plugin.h about PCM_source_peaktransfer_t::samplerate

  void* (*REAPERAPI_FUNCNAME(GetPeaksBitmap))(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp);
#endif

#if defined(REAPERAPI_WANT_GetPlayLoopCnt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayLoopCnt
// Queries the playback loopcnt for project. if render_skip_loopcnt is non-NULL, sets to either -1 or the loopcnt for a skipped render-pass (used during 2nd-pass rendering).

  WDL_INT64 (*REAPERAPI_FUNCNAME(GetPlayLoopCnt))(ReaProject* proj, WDL_INT64* render_skip_loopcnt);
#endif

#if defined(REAPERAPI_WANT_GetPlayPosition) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayPosition
// returns latency-compensated actual-what-you-hear position

  double (*REAPERAPI_FUNCNAME(GetPlayPosition))();
#endif

#if defined(REAPERAPI_WANT_GetPlayPosition2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayPosition2
// returns position of next audio block being processed

  double (*REAPERAPI_FUNCNAME(GetPlayPosition2))();
#endif

#if defined(REAPERAPI_WANT_GetPlayPosition2Ex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayPosition2Ex
// returns position of next audio block being processed

  double (*REAPERAPI_FUNCNAME(GetPlayPosition2Ex))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetPlayPositionEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayPositionEx
// returns latency-compensated actual-what-you-hear position

  double (*REAPERAPI_FUNCNAME(GetPlayPositionEx))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetPlayState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayState
// &1=playing, &2=paused, &4=is recording

  int (*REAPERAPI_FUNCNAME(GetPlayState))();
#endif

#if defined(REAPERAPI_WANT_GetPlayStateEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPlayStateEx
// &1=playing, &2=paused, &4=is recording

  int (*REAPERAPI_FUNCNAME(GetPlayStateEx))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetPreferredDiskReadMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPreferredDiskReadMode
// Gets user configured preferred disk read mode. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.

  void (*REAPERAPI_FUNCNAME(GetPreferredDiskReadMode))(int* mode, int* nb, int* bs);
#endif

#if defined(REAPERAPI_WANT_GetPreferredDiskReadModePeak) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPreferredDiskReadModePeak
// Gets user configured preferred disk read mode for use when building peaks. mode/nb/bs are all parameters that should be passed to WDL_FileRead, see for more information.

  void (*REAPERAPI_FUNCNAME(GetPreferredDiskReadModePeak))(int* mode, int* nb, int* bs);
#endif

#if defined(REAPERAPI_WANT_GetPreferredDiskWriteMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetPreferredDiskWriteMode
// Gets user configured preferred disk write mode. nb will receive two values, the initial and maximum write buffer counts. mode/nb/bs are all parameters that should be passed to WDL_FileWrite, see for more information. 

  void (*REAPERAPI_FUNCNAME(GetPreferredDiskWriteMode))(int* mode, int* nb, int* bs);
#endif

#if defined(REAPERAPI_WANT_GetProjectLength) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectLength
// returns length of project (maximum of end of media item, markers, end of regions, tempo map

  double (*REAPERAPI_FUNCNAME(GetProjectLength))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetProjectName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectName

  void (*REAPERAPI_FUNCNAME(GetProjectName))(ReaProject* proj, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetProjectPath) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectPath
// Get the project recording path.

  void (*REAPERAPI_FUNCNAME(GetProjectPath))(char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetProjectPathEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectPathEx
// Get the project recording path.

  void (*REAPERAPI_FUNCNAME(GetProjectPathEx))(ReaProject* proj, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetProjectStateChangeCount) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectStateChangeCount
// returns an integer that changes when the project state changes

  int (*REAPERAPI_FUNCNAME(GetProjectStateChangeCount))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetProjectTimeOffset) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectTimeOffset
// Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.

  double (*REAPERAPI_FUNCNAME(GetProjectTimeOffset))(ReaProject* proj, bool rndframe);
#endif

#if defined(REAPERAPI_WANT_GetProjectTimeSignature) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectTimeSignature
// deprecated

  void (*REAPERAPI_FUNCNAME(GetProjectTimeSignature))(double* bpmOut, double* bpiOut);
#endif

#if defined(REAPERAPI_WANT_GetProjectTimeSignature2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjectTimeSignature2
// Gets basic time signature (beats per minute, numerator of time signature in bpi)
// this does not reflect tempo envelopes but is purely what is set in the project settings.

  void (*REAPERAPI_FUNCNAME(GetProjectTimeSignature2))(ReaProject* proj, double* bpmOut, double* bpiOut);
#endif

#if defined(REAPERAPI_WANT_GetProjExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetProjExtState
// Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.

  int (*REAPERAPI_FUNCNAME(GetProjExtState))(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_GetResourcePath) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetResourcePath
// returns path where ini files are stored, other things are in subdirectories.

  const char* (*REAPERAPI_FUNCNAME(GetResourcePath))();
#endif

#if defined(REAPERAPI_WANT_GetSelectedEnvelope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSelectedEnvelope
// get the currently selected envelope, returns NULL/nil if no envelope is selected

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetSelectedEnvelope))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetSelectedMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSelectedMediaItem
// Discouraged, because GetSelectedMediaItem can be inefficient if media items are added, rearranged, or deleted in between calls. Instead see CountMediaItems, GetMediaItem, IsMediaItemSelected.

  MediaItem* (*REAPERAPI_FUNCNAME(GetSelectedMediaItem))(ReaProject* proj, int selitem);
#endif

#if defined(REAPERAPI_WANT_GetSelectedTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSelectedTrack
// Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.

  MediaTrack* (*REAPERAPI_FUNCNAME(GetSelectedTrack))(ReaProject* proj, int seltrackidx);
#endif

#if defined(REAPERAPI_WANT_GetSelectedTrack2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSelectedTrack2
// Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).

  MediaTrack* (*REAPERAPI_FUNCNAME(GetSelectedTrack2))(ReaProject* proj, int seltrackidx, bool wantmaster);
#endif

#if defined(REAPERAPI_WANT_GetSelectedTrackEnvelope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSelectedTrackEnvelope
// get the currently selected track envelope, returns NULL/nil if no envelope is selected

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetSelectedTrackEnvelope))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_GetSet_ArrangeView2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSet_ArrangeView2
// Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time

  void (*REAPERAPI_FUNCNAME(GetSet_ArrangeView2))(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeInOut, double* end_timeInOut);
#endif

#if defined(REAPERAPI_WANT_GetSet_LoopTimeRange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSet_LoopTimeRange

  void (*REAPERAPI_FUNCNAME(GetSet_LoopTimeRange))(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek);
#endif

#if defined(REAPERAPI_WANT_GetSet_LoopTimeRange2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSet_LoopTimeRange2

  void (*REAPERAPI_FUNCNAME(GetSet_LoopTimeRange2))(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek);
#endif

#if defined(REAPERAPI_WANT_GetSetAutomationItemInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetAutomationItemInfo
// Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:
// D_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID
// D_POSITION : double * : automation item timeline position in seconds
// D_LENGTH : double * : automation item length in seconds
// D_STARTOFFS : double * : automation item start offset in seconds
// D_PLAYRATE : double * : automation item playback rate
// D_BASELINE : double * : automation item baseline value in the range [0,1]
// D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]
// D_LOOPSRC : double * : nonzero if the automation item contents are looped
// D_UISEL : double * : nonzero if the automation item is selected in the arrange view
// D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)
// 

  double (*REAPERAPI_FUNCNAME(GetSetAutomationItemInfo))(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set);
#endif

#if defined(REAPERAPI_WANT_GetSetAutomationItemInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetAutomationItemInfo_String
// Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:
// P_POOL_NAME : char * : name of the underlying automation item pool
// P_POOL_EXT:xyz : char * : extension-specific persistent data
// 

  bool (*REAPERAPI_FUNCNAME(GetSetAutomationItemInfo_String))(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set);
#endif

#if defined(REAPERAPI_WANT_GetSetEnvelopeInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetEnvelopeInfo_String
// Gets/sets an attribute string:
// ACTIVE : active state (bool as a string "0" or "1")
// ARM : armed state (bool...)
// VISIBLE : visible state (bool...)
// SHOWLANE : show envelope in separate lane (bool...)
// GUID : (read-only) GUID as a string {xyz-....}
// P_EXT:xyz : extension-specific persistent data
// Note that when writing some of these attributes you will need to manually update the arrange and/or track panels, see TrackList_AdjustWindows

  bool (*REAPERAPI_FUNCNAME(GetSetEnvelopeInfo_String))(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetEnvelopeState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetEnvelopeState
// deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk

  bool (*REAPERAPI_FUNCNAME(GetSetEnvelopeState))(TrackEnvelope* env, char* str, int str_sz);
#endif

#if defined(REAPERAPI_WANT_GetSetEnvelopeState2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetEnvelopeState2
// deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk

  bool (*REAPERAPI_FUNCNAME(GetSetEnvelopeState2))(TrackEnvelope* env, char* str, int str_sz, bool isundo);
#endif

#if defined(REAPERAPI_WANT_GetSetItemState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetItemState
// deprecated -- see SetItemStateChunk, GetItemStateChunk

  bool (*REAPERAPI_FUNCNAME(GetSetItemState))(MediaItem* item, char* str, int str_sz);
#endif

#if defined(REAPERAPI_WANT_GetSetItemState2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetItemState2
// deprecated -- see SetItemStateChunk, GetItemStateChunk

  bool (*REAPERAPI_FUNCNAME(GetSetItemState2))(MediaItem* item, char* str, int str_sz, bool isundo);
#endif

#if defined(REAPERAPI_WANT_GetSetMediaItemInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetMediaItemInfo
// P_TRACK : MediaTrack * : (read-only)
// B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.
// B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
// C_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)
// C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
// B_LOOPSRC : bool * : loop source
// B_ALLTAKESPLAY : bool * : all takes play
// B_UISEL : bool * : selected in arrange view
// C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
// C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
// C_LOCK : char * : locked, &1=locked
// D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
// D_POSITION : double * : item position in seconds
// D_LENGTH : double * : item length in seconds
// D_SNAPOFFSET : double * : item snap offset in seconds
// D_FADEINLEN : double * : item manual fadein length in seconds
// D_FADEOUTLEN : double * : item manual fadeout length in seconds
// D_FADEINDIR : double * : item fadein curvature, -1..1
// D_FADEOUTDIR : double * : item fadeout curvature, -1..1
// D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
// D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
// C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
// C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
// I_GROUPID : int * : group ID, 0=no group
// I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
// I_LASTH : int * : height in pixels (read-only)
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// I_CURTAKE : int * : active take number
// IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
// F_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track
// F_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height
// I_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)
// B_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)
// P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
// P_EXT:xyz : char * : extension-specific persistent data
// GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
// 

  void* (*REAPERAPI_FUNCNAME(GetSetMediaItemInfo))(MediaItem* item, const char* parmname, void* setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetMediaItemInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetMediaItemInfo_String
// Gets/sets an item attribute string:
// P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)
// P_EXT:xyz : char * : extension-specific persistent data
// GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
// 

  bool (*REAPERAPI_FUNCNAME(GetSetMediaItemInfo_String))(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetMediaItemTakeInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetMediaItemTakeInfo
// P_TRACK : pointer to MediaTrack (read-only)
// P_ITEM : pointer to MediaItem (read-only)
// P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.
// P_NAME : char * : take name
// P_EXT:xyz : char * : extension-specific persistent data
// GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
// D_STARTOFFS : double * : start offset in source media, in seconds
// D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
// D_PAN : double * : take pan, -1..1
// D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
// D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
// D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
// B_PPITCH : bool * : preserve pitch when changing playback rate
// I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
// I_LASTH : int * : height in pixels (read-only)
// I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
// I_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
// I_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)
// F_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)
// I_RECPASSID : int * : record pass ID
// I_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// IP_SPECEDIT:CNT : int : spectral edit count (read-only)
// IP_SPECEDIT:DELETE:x : int : read or write this key to remove the spectral edit specified
// IP_SPECEDIT:ADD : int : read or write this key to add a new spectral edit (returns index)
// IP_SPECEDIT:SORT : int : read or write this key to re-sort spectral edits (be sure to do this following a position change or insert of new edit)
// I_SPECEDIT:FFT_SIZE : int * : FFT size used by spectral edits for this take
// D_SPECEDIT:x:POSITION : double * : position of spectral edit start (changing this requires a resort of spectral edits)
// D_SPECEDIT:x:LENGTH : double * : length of spectral edit
// F_SPECEDIT:x:GAIN : float * : gain of spectral edit
// F_SPECEDIT:x:FADE_IN : float * : fade-in size 0..1
// F_SPECEDIT:x:FADE_OUT : float * : fade-out size 0..1
// F_SPECEDIT:x:FADE_LOW : float * : fade-lf size 0..1
// F_SPECEDIT:x:FADE_HI : float * : fade-hf size 0..1
// I_SPECEDIT:x:CHAN : int * : channel index, -1 for omni
// I_SPECEDIT:x:FLAGS : int * : flags, &1=bypassed, &2=solo
// F_SPECEDIT:x:GATE_THRESH : float * : gate threshold
// F_SPECEDIT:x:GATE_FLOOR : float * : gate floor
// F_SPECEDIT:x:COMP_THRESH : float * : comp threshold
// F_SPECEDIT:x:COMP_RATIO : float * : comp ratio
// B_SPECEDIT:x:SELECTED : bool * : selection state
// I_SPECEDIT:x:TOPFREQ_CNT : int * : (read-only) number of top frequency-points
// I_SPECEDIT:x:TOPFREQ_ADD:pos:val : int * : reading or writing will insert top frequency-point with position/value pair, returns index
// I_SPECEDIT:x:TOPFREQ_DEL:y : int * : reading or writing will delete top frequency-point y. there will always be at least one point.
// F_SPECEDIT:x:TOPFREQ_POS:y : float * : (read-only) get position of top frequency-point y
// F_SPECEDIT:x:TOPFREQ_FREQ:y : float * : (read-only) get frequency of top frequency-point y
// I_SPECEDIT:x:BOTFREQ_CNT : int * : number of bottom frequency-points
// I_SPECEDIT:x:BOTFREQ_ADD:pos:val : int * : reading or writing will insert bottom frequency-point with position/value pair, returns index
// I_SPECEDIT:x:BOTFREQ_DEL:y : int * : reading or writing will delete bottom frequency-point y. there will always be at least one point.
// F_SPECEDIT:x:BOTFREQ_POS:y : float * : (read-only) get position of bottom frequency-point y
// F_SPECEDIT:x:BOTFREQ_FREQ:y : float * : (read-only) get frequency of bottom frequency-point y
// IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
// 

  void* (*REAPERAPI_FUNCNAME(GetSetMediaItemTakeInfo))(MediaItem_Take* tk, const char* parmname, void* setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetMediaItemTakeInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetMediaItemTakeInfo_String
// Gets/sets a take attribute string:
// P_NAME : char * : take name
// P_EXT:xyz : char * : extension-specific persistent data
// GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
// 

  bool (*REAPERAPI_FUNCNAME(GetSetMediaItemTakeInfo_String))(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetMediaTrackInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetMediaTrackInfo
// Get or set track attributes.
// P_PARTRACK : MediaTrack * : parent track (read-only)
// P_PROJECT : ReaProject * : parent project (read-only)
// P_NAME : char * : track name (on master returns NULL)
// P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
// P_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)
// P_MCP_LAYOUT : const char * : layout name
// P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.
//   Example: "0.0 1.0 \"\" 0.0 1.0 "{xyz-...}"
// P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.
//   Example: "0.0 1.0,0.0 1.0 "{xyz-...}",1.0 2.0 "" 0.25 0.75"
// P_TCP_LAYOUT : const char * : layout name
// P_EXT:xyz : char * : extension-specific persistent data
// P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).
// GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
// B_MUTE : bool * : muted
// B_PHASE : bool * : track phase inverted
// B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
// IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
// I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
// B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
// I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
// I_RECARM : int * : record armed, 0=not record armed, 1=record armed
// I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
// I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
// I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
// I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
// I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
// B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
// I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only
// I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
// I_NCHAN : int * : number of track channels, 2-128, even numbers only
// I_SELECTED : int * : track selected, 0=unselected, 1=selected
// I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
// I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
// I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
// I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)
// I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)
// I_MCPW : int * : current MCP width in pixels (read-only)
// I_MCPH : int * : current MCP height in pixels (read-only)
// I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
// I_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed
// I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
// I_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel
// I_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels
// I_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned
// I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
// I_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
// D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
// D_PAN : double * : trim pan of track, -1..1
// D_WIDTH : double * : width of track, -1..1
// D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
// D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
// I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
// D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
// I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
// D_PLAYRATE : double * : track playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
// D_PITCH : double * : track pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
// B_PPITCH : bool * : preserve pitch when changing playback rate
// I_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
// P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
// B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
// B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
// B_MAINSEND : bool * : track sends audio to parent
// C_MAINSEND_OFFS : char * : channel offset of track send to parent
// C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
// I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
// I_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)
// C_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)
// C_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons
// C_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)
// C_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)
// C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
// F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
// F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
// F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
// F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
// I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
// D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
// 

  void* (*REAPERAPI_FUNCNAME(GetSetMediaTrackInfo))(MediaTrack* tr, const char* parmname, void* setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetMediaTrackInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetMediaTrackInfo_String
// Get or set track string attributes.
// P_NAME : char * : track name (on master returns NULL)
// P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)
// P_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)
// P_MCP_LAYOUT : const char * : layout name
// P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.
//   Example: "0.0 1.0 \"\" 0.0 1.0 "{xyz-...}"
// P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.
//   Example: "0.0 1.0,0.0 1.0 "{xyz-...}",1.0 2.0 "" 0.25 0.75"
// P_TCP_LAYOUT : const char * : layout name
// P_EXT:xyz : char * : extension-specific persistent data
// P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).
// GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.
// 

  bool (*REAPERAPI_FUNCNAME(GetSetMediaTrackInfo_String))(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetObjectState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetObjectState
// get or set the state of a {track,item,envelope} as an RPPXML chunk
// str="" to get the chunk string returned (must call FreeHeapPtr when done)
// supply str to set the state (returns zero)

  char* (*REAPERAPI_FUNCNAME(GetSetObjectState))(void* obj, const char* str);
#endif

#if defined(REAPERAPI_WANT_GetSetObjectState2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetObjectState2
// get or set the state of a {track,item,envelope} as an RPPXML chunk
// str="" to get the chunk string returned (must call FreeHeapPtr when done)
// supply str to set the state (returns zero)
// set isundo if the state will be used for undo purposes (which may allow REAPER to get the state more efficiently

  char* (*REAPERAPI_FUNCNAME(GetSetObjectState2))(void* obj, const char* str, bool isundo);
#endif

#if defined(REAPERAPI_WANT_GetSetProjectAuthor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetProjectAuthor
// deprecated, see GetSetProjectInfo_String with desc="PROJECT_AUTHOR"

  void (*REAPERAPI_FUNCNAME(GetSetProjectAuthor))(ReaProject* proj, bool set, char* author, int author_sz);
#endif

#if defined(REAPERAPI_WANT_GetSetProjectGrid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetProjectGrid
// Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags

  int (*REAPERAPI_FUNCNAME(GetSetProjectGrid))(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional);
#endif

#if defined(REAPERAPI_WANT_GetSetProjectInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetProjectInfo
// Get or set project information.
// RENDER_SETTINGS : (&(1|2)==0)=master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render, &4096=render razor edits, &8192=pre-fader stems (not if via master), &16384=only stem channels sent to parent, &32768=preserve source metadata if possible, &(1<<16)=preserve source start offset if possible, &(2<<16)=preserve source media sample rate if possible, &(4<<16)=if rendering selected items or razor edits, render as a single file, &(8<<16)=parallel render via master, &(16<<16)=delay render start to allow FX to initialize and load samples
// RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers
// RENDER_CHANNELS : number of channels in rendered file
// RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)
// RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0
// RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0
// RENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions
// RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)
// RENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent
// RENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems, &16=disable all
// RENDER_NORMALIZE: &1=enable normalization, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &16=adjust mono media -3dB, &(16|(8<<16))=adjust mono media +3dB, (&(32|4096|(16<<16))==32)=normalize as if files play together, (&(32|4096|(16<<16))==4096)=normalize to loudest file, (&(32|4096|(16<<16))==(32|4096))=normalize as if files play together (common gain), (&(32|4096|(16<<16))==(16<<16))=normalize to master mix, &64=enable brickwall limit, &128=brickwall limit true peak, (&(256|2048)==256)=only normalize files that are too loud, (&(256|2048)==2048)=only normalize files that are too quiet, &512=apply fade-in, &1024=apply fade-out, &16384=trim starting silence, &32768=trim ending silence, &(1<<16)=pad start with silence, &(2<<16)=pad end with silence, &(4<<16)=disable all render postprocessing, (&((32<<16)|(64<<16))==(32<<16))=limit as if files play together, (&((32<<16)|(64<<16))==(64<<16))=limit to master mix
// RENDER_NORMALIZE_TARGET: render normalization target (0.5 means -6.02dB, requires RENDER_NORMALIZE&1)
// RENDER_BRICKWALL: render brickwall limit (0.5 means -6.02dB, requires RENDER_NORMALIZE&64)
// RENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)
// RENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)
// RENDER_FADEINSHAPE: render fade-in shape
// RENDER_FADEOUTSHAPE: render fade-out shape
// RENDER_PADSTART: pad render start with silence (0.001 means 1ms, requires RENDER_NORMALIZE&(1<<16))
// RENDER_PADEND: pad render end with silence (0.001 means 1ms, requires RENDER_NORMALIZE&(2<<16))
// RENDER_TRIMSTART: trim render start threshold (0.5 means -6.02dB, requires RENDER_NORMALIZE&16384)
// RENDER_TRIMEND: trim render end threshold (0.5 means -6.02dB, requires RENDER_NORMALIZE&32768)
// RENDER_DELAY: seconds to delay start of render to allow FX to initialize and load samples (requires RENDER_SETTINGS&(16<<16))
// PROJECT_SRATE : sample rate (ignored unless PROJECT_SRATE_USE set)
// PROJECT_SRATE_USE : set to 1 if project sample rate is used
// MIDI_LIVE_MODE : 1 to stream MIDI instrument tracks directly to outputs with minimal buffering, 0 otherwise (serialized in project files)
//

  double (*REAPERAPI_FUNCNAME(GetSetProjectInfo))(ReaProject* project, const char* desc, double value, bool is_set);
#endif

#if defined(REAPERAPI_WANT_GetSetProjectInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetProjectInfo_String
// Get or set project information.
// PROJECT_NAME : project file name (read-only, is_set will be ignored)
// PROJECT_TITLE : title field from Project Settings/Notes dialog
// PROJECT_AUTHOR : author field from Project Settings/Notes dialog
// TRACK_GROUP_NAME:X : track group name, X should be 1..64
// MARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)
// MARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)
// OPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT
// RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()
// RECORD_PATH_SECONDARY : secondary recording directory
// RECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
// APPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
// RECTAG : project recording tag wildcard ($rectag). Can be used in Preferences/Audio/Recording to auto-name recorded files.
// RENDER_FILE : render directory
// RENDER_PATTERN : render file name (may contain wildcards)
// RENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr="ID3:TALB" to get, valuestr="ID3:TALB|my album name" to set. Call with valuestr="" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.
// RENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings
// RENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr="XXX" to run an action (for example, "42437"=dry run render selected items) before returning statistics.
// RENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.
// RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type, or "" to disable secondary render.
// 

  bool (*REAPERAPI_FUNCNAME(GetSetProjectInfo_String))(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set);
#endif

#if defined(REAPERAPI_WANT_GetSetProjectNotes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetProjectNotes
// gets or sets project notes, notesNeedBig_sz is ignored when setting

  void (*REAPERAPI_FUNCNAME(GetSetProjectNotes))(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_GetSetRepeat) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetRepeat
// -1 == query,0=clear,1=set,>1=toggle . returns new value

  int (*REAPERAPI_FUNCNAME(GetSetRepeat))(int val);
#endif

#if defined(REAPERAPI_WANT_GetSetRepeatEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetRepeatEx
// -1 == query,0=clear,1=set,>1=toggle . returns new value

  int (*REAPERAPI_FUNCNAME(GetSetRepeatEx))(ReaProject* proj, int val);
#endif

#if defined(REAPERAPI_WANT_GetSetTempoTimeSigMarkerFlag) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTempoTimeSigMarkerFlag
// Gets or sets the attribute flag of a tempo/time signature marker. flag &1=sets time signature and starts new measure, &2=does not set tempo, &4=allow previous partial measure if starting new measure, &8=set new metronome pattern if starting new measure, &16=reset ruler grid if starting new measure

  int (*REAPERAPI_FUNCNAME(GetSetTempoTimeSigMarkerFlag))(ReaProject* project, int point_index, int flag, bool is_set);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackGroupMembership) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackGroupMembership
// Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
// MEDIA_EDIT_LEAD
// MEDIA_EDIT_FOLLOW
// VOLUME_LEAD
// VOLUME_FOLLOW
// VOLUME_VCA_LEAD
// VOLUME_VCA_FOLLOW
// PAN_LEAD
// PAN_FOLLOW
// WIDTH_LEAD
// WIDTH_FOLLOW
// MUTE_LEAD
// MUTE_FOLLOW
// SOLO_LEAD
// SOLO_FOLLOW
// RECARM_LEAD
// RECARM_FOLLOW
// POLARITY_LEAD
// POLARITY_FOLLOW
// AUTOMODE_LEAD
// AUTOMODE_FOLLOW
// VOLUME_REVERSE
// PAN_REVERSE
// WIDTH_REVERSE
// NO_LEAD_WHEN_FOLLOW
// VOLUME_VCA_FOLLOW_ISPREFX
// 
// Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).
// 

  unsigned int (*REAPERAPI_FUNCNAME(GetSetTrackGroupMembership))(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackGroupMembershipEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackGroupMembershipEx
// Gets or modifies 32 bits (at offset, where 0 is the low 32 bits of the grouping) of the group membership for a track. Returns group state prior to call. if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
// MEDIA_EDIT_LEAD
// MEDIA_EDIT_FOLLOW
// VOLUME_LEAD
// VOLUME_FOLLOW
// VOLUME_VCA_LEAD
// VOLUME_VCA_FOLLOW
// PAN_LEAD
// PAN_FOLLOW
// WIDTH_LEAD
// WIDTH_FOLLOW
// MUTE_LEAD
// MUTE_FOLLOW
// SOLO_LEAD
// SOLO_FOLLOW
// RECARM_LEAD
// RECARM_FOLLOW
// POLARITY_LEAD
// POLARITY_FOLLOW
// AUTOMODE_LEAD
// AUTOMODE_FOLLOW
// VOLUME_REVERSE
// PAN_REVERSE
// WIDTH_REVERSE
// NO_LEAD_WHEN_FOLLOW
// VOLUME_VCA_FOLLOW_ISPREFX
// 
// Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).
// 

  unsigned int (*REAPERAPI_FUNCNAME(GetSetTrackGroupMembershipEx))(MediaTrack* tr, const char* groupname, int offset, unsigned int setmask, unsigned int setvalue);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackGroupMembershipHigh) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackGroupMembershipHigh
// Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:
// MEDIA_EDIT_LEAD
// MEDIA_EDIT_FOLLOW
// VOLUME_LEAD
// VOLUME_FOLLOW
// VOLUME_VCA_LEAD
// VOLUME_VCA_FOLLOW
// PAN_LEAD
// PAN_FOLLOW
// WIDTH_LEAD
// WIDTH_FOLLOW
// MUTE_LEAD
// MUTE_FOLLOW
// SOLO_LEAD
// SOLO_FOLLOW
// RECARM_LEAD
// RECARM_FOLLOW
// POLARITY_LEAD
// POLARITY_FOLLOW
// AUTOMODE_LEAD
// AUTOMODE_FOLLOW
// VOLUME_REVERSE
// PAN_REVERSE
// WIDTH_REVERSE
// NO_LEAD_WHEN_FOLLOW
// VOLUME_VCA_FOLLOW_ISPREFX
// 
// Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).
// 

  unsigned int (*REAPERAPI_FUNCNAME(GetSetTrackGroupMembershipHigh))(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackMIDISupportFile) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackMIDISupportFile
// Get or set the filename for storage of various track MIDI characteristics. 0=MIDI colormap image file, 1 or 2=MIDI bank/program select file (2=set new default). If fn != NULL, a new track MIDI storage file will be set; otherwise the existing track MIDI storage file will be returned. 

  const char* (*REAPERAPI_FUNCNAME(GetSetTrackMIDISupportFile))(ReaProject* proj, MediaTrack* track, int which, const char* filename);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackSendInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackSendInfo
// Get or set send/receive/hardware output attributes.
// category is <0 for receives, 0=sends, >0 for hardware outputs
//  sendidx is 0..n (to enumerate, iterate over sendidx until it returns NULL)
// parameter names:
// P_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)
// P_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)
// P_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)
// P_EXT:xyz : char * : extension-specific persistent data
// B_MUTE : bool *
// B_PHASE : bool * : true to flip phase
// B_MONO : bool *
// D_VOL : double * : 1.0 = +0dB etc
// D_PAN : double * : -1..+1
// D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
// I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
// I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
// I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.
// I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.
// I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)
// See CreateTrackSend, RemoveTrackSend.

  void* (*REAPERAPI_FUNCNAME(GetSetTrackSendInfo))(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackSendInfo_String) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackSendInfo_String
// Gets/sets a send attribute string:
// P_EXT:xyz : char * : extension-specific persistent data
// 

  bool (*REAPERAPI_FUNCNAME(GetSetTrackSendInfo_String))(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackState
// deprecated -- see SetTrackStateChunk, GetTrackStateChunk

  bool (*REAPERAPI_FUNCNAME(GetSetTrackState))(MediaTrack* track, char* str, int str_sz);
#endif

#if defined(REAPERAPI_WANT_GetSetTrackState2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSetTrackState2
// deprecated -- see SetTrackStateChunk, GetTrackStateChunk

  bool (*REAPERAPI_FUNCNAME(GetSetTrackState2))(MediaTrack* track, char* str, int str_sz, bool isundo);
#endif

#if defined(REAPERAPI_WANT_GetSubProjectFromSource) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetSubProjectFromSource

  ReaProject* (*REAPERAPI_FUNCNAME(GetSubProjectFromSource))(PCM_source* src);
#endif

#if defined(REAPERAPI_WANT_GetTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTake
// get a take from an item by take count (zero-based)

  MediaItem_Take* (*REAPERAPI_FUNCNAME(GetTake))(MediaItem* item, int takeidx);
#endif

#if defined(REAPERAPI_WANT_GetTakeEnvelope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeEnvelope

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetTakeEnvelope))(MediaItem_Take* take, int envidx);
#endif

#if defined(REAPERAPI_WANT_GetTakeEnvelopeByName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeEnvelopeByName

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetTakeEnvelopeByName))(MediaItem_Take* take, const char* envname);
#endif

#if defined(REAPERAPI_WANT_GetTakeMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeMarker
// Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker

  double (*REAPERAPI_FUNCNAME(GetTakeMarker))(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional);
#endif

#if defined(REAPERAPI_WANT_GetTakeName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeName
// returns NULL if the take is not valid

  const char* (*REAPERAPI_FUNCNAME(GetTakeName))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetTakeNumStretchMarkers) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeNumStretchMarkers
// Returns number of stretch markers in take

  int (*REAPERAPI_FUNCNAME(GetTakeNumStretchMarkers))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_GetTakeStretchMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeStretchMarker
// Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.

  int (*REAPERAPI_FUNCNAME(GetTakeStretchMarker))(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional);
#endif

#if defined(REAPERAPI_WANT_GetTakeStretchMarkerSlope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTakeStretchMarkerSlope
// See SetTakeStretchMarkerSlope

  double (*REAPERAPI_FUNCNAME(GetTakeStretchMarkerSlope))(MediaItem_Take* take, int idx);
#endif

#if defined(REAPERAPI_WANT_GetTCPFXParm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTCPFXParm
// Get information about a specific FX parameter knob (see CountTCPFXParms).

  bool (*REAPERAPI_FUNCNAME(GetTCPFXParm))(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut);
#endif

#if defined(REAPERAPI_WANT_GetTempoMatchPlayRate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTempoMatchPlayRate
// finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256

  bool (*REAPERAPI_FUNCNAME(GetTempoMatchPlayRate))(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut);
#endif

#if defined(REAPERAPI_WANT_GetTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTempoTimeSigMarker
// Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.

  bool (*REAPERAPI_FUNCNAME(GetTempoTimeSigMarker))(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut);
#endif

#if defined(REAPERAPI_WANT_GetThemeColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetThemeColor
// Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key.

  int (*REAPERAPI_FUNCNAME(GetThemeColor))(const char* ini_key, int flagsOptional);
#endif

#if defined(REAPERAPI_WANT_GetThingFromPoint) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetThingFromPoint
// Hit tests a point in screen coordinates. Updates infoOut with information such as "arrange", "fx_chain", "fx_0" (first FX in chain, floating), "spacer_0" (spacer before first track). If a track panel is hit, string will begin with "tcp" or "mcp" or "tcp.mute" etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing.

  MediaTrack* (*REAPERAPI_FUNCNAME(GetThingFromPoint))(int screen_x, int screen_y, char* infoOut, int infoOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetToggleCommandState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetToggleCommandState
// See GetToggleCommandStateEx.

  int (*REAPERAPI_FUNCNAME(GetToggleCommandState))(int command_id);
#endif

#if defined(REAPERAPI_WANT_GetToggleCommandState2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetToggleCommandState2
// See GetToggleCommandStateEx.

  int (*REAPERAPI_FUNCNAME(GetToggleCommandState2))(KbdSectionInfo* section, int command_id);
#endif

#if defined(REAPERAPI_WANT_GetToggleCommandStateEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetToggleCommandStateEx
// For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.

  int (*REAPERAPI_FUNCNAME(GetToggleCommandStateEx))(int section_id, int command_id);
#endif

#if defined(REAPERAPI_WANT_GetToggleCommandStateThroughHooks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetToggleCommandStateThroughHooks
// Returns the state of an action via extension plugins' hooks.

  int (*REAPERAPI_FUNCNAME(GetToggleCommandStateThroughHooks))(KbdSectionInfo* section, int command_id);
#endif

#if defined(REAPERAPI_WANT_GetTooltipWindow) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTooltipWindow
// gets a tooltip window,in case you want to ask it for font information. Can return NULL.

  HWND (*REAPERAPI_FUNCNAME(GetTooltipWindow))();
#endif

#if defined(REAPERAPI_WANT_GetTouchedOrFocusedFX) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTouchedOrFocusedFX
// mode can be 0 to query last touched parameter, or 1 to query currently focused FX. Returns false if failed. If successful, trackIdxOut will be track index (-1 is master track, 0 is first track). itemidxOut will be 0-based item index if an item, or -1 if not an item. takeidxOut will be 0-based take index. fxidxOut will be FX index, potentially with 0x2000000 set to signify container-addressing, or with 0x1000000 set to signify record-input FX. parmOut will be set to the parameter index if querying last-touched. parmOut will have 1 set if querying focused state and FX is no longer focused but still open.

  bool (*REAPERAPI_FUNCNAME(GetTouchedOrFocusedFX))(int mode, int* trackidxOut, int* itemidxOut, int* takeidxOut, int* fxidxOut, int* parmOut);
#endif

#if defined(REAPERAPI_WANT_GetTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrack
// get a track from a project by track count (zero-based) (proj=0 for active project)

  MediaTrack* (*REAPERAPI_FUNCNAME(GetTrack))(ReaProject* proj, int trackidx);
#endif

#if defined(REAPERAPI_WANT_GetTrackAutomationMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackAutomationMode
// return the track mode, regardless of global override

  int (*REAPERAPI_FUNCNAME(GetTrackAutomationMode))(MediaTrack* tr);
#endif

#if defined(REAPERAPI_WANT_GetTrackColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackColor
// Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0.

  int (*REAPERAPI_FUNCNAME(GetTrackColor))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_GetTrackDepth) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackDepth

  int (*REAPERAPI_FUNCNAME(GetTrackDepth))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_GetTrackEnvelope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackEnvelope

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetTrackEnvelope))(MediaTrack* track, int envidx);
#endif

#if defined(REAPERAPI_WANT_GetTrackEnvelopeByChunkName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackEnvelopeByChunkName
// Gets a built-in track envelope by configuration chunk name, like "<VOLENV", or GUID string, like "{B577250D-146F-B544-9B34-F24FBE488F1F}".
// 

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetTrackEnvelopeByChunkName))(MediaTrack* tr, const char* cfgchunkname_or_guid);
#endif

#if defined(REAPERAPI_WANT_GetTrackEnvelopeByName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackEnvelopeByName

  TrackEnvelope* (*REAPERAPI_FUNCNAME(GetTrackEnvelopeByName))(MediaTrack* track, const char* envname);
#endif

#if defined(REAPERAPI_WANT_GetTrackFromPoint) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackFromPoint
// Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. For a free item positioning or fixed lane track, the second byte of infoOutOptional will be set to the (approximate, for fipm tracks) item lane underneath the mouse. See GetThingFromPoint.

  MediaTrack* (*REAPERAPI_FUNCNAME(GetTrackFromPoint))(int screen_x, int screen_y, int* infoOutOptional);
#endif

#if defined(REAPERAPI_WANT_GetTrackGUID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackGUID

  GUID* (*REAPERAPI_FUNCNAME(GetTrackGUID))(MediaTrack* tr);
#endif

#if defined(REAPERAPI_WANT_GetTrackInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackInfo
// gets track info (returns name).
// track index, -1=master, 0..n, or cast a MediaTrack* to int
// if flags is non-NULL, will be set to:
// &1=folder
// &2=selected
// &4=has fx enabled
// &8=muted
// &16=soloed
// &32=SIP'd (with &16)
// &64=rec armed
// &128=rec monitoring on
// &256=rec monitoring auto
// &512=hide from TCP
// &1024=hide from MCP

  const char* (*REAPERAPI_FUNCNAME(GetTrackInfo))(INT_PTR track, int* flags);
#endif

#if defined(REAPERAPI_WANT_GetTrackMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackMediaItem

  MediaItem* (*REAPERAPI_FUNCNAME(GetTrackMediaItem))(MediaTrack* tr, int itemidx);
#endif

#if defined(REAPERAPI_WANT_GetTrackMIDILyrics) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackMIDILyrics
// Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	"). See SetTrackMIDILyrics

  bool (*REAPERAPI_FUNCNAME(GetTrackMIDILyrics))(MediaTrack* track, int flag, char* bufOutWantNeedBig, int* bufOutWantNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_GetTrackMIDINoteName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackMIDINoteName
// see GetTrackMIDINoteNameEx

  const char* (*REAPERAPI_FUNCNAME(GetTrackMIDINoteName))(int track, int pitch, int chan);
#endif

#if defined(REAPERAPI_WANT_GetTrackMIDINoteNameEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackMIDINoteNameEx
// Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx

  const char* (*REAPERAPI_FUNCNAME(GetTrackMIDINoteNameEx))(ReaProject* proj, MediaTrack* track, int pitch, int chan);
#endif

#if defined(REAPERAPI_WANT_GetTrackMIDINoteRange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackMIDINoteRange

  void (*REAPERAPI_FUNCNAME(GetTrackMIDINoteRange))(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackName
// Returns "MASTER" for master track, "Track N" if track has no name.

  bool (*REAPERAPI_FUNCNAME(GetTrackName))(MediaTrack* track, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetTrackMarkerLaneInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackMarkerLaneInfo
// Retrieve visibility and color information for a track marker lane. color is ColorToNative(r,g,b)|0x1000000 or 0 for default.

  bool (*REAPERAPI_FUNCNAME(GetTrackMarkerLaneInfo))(MediaTrack* track, int lane, bool* visibleOut, int* colorOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackNumMediaItems) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackNumMediaItems

  int (*REAPERAPI_FUNCNAME(GetTrackNumMediaItems))(MediaTrack* tr);
#endif

#if defined(REAPERAPI_WANT_GetTrackNumSends) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackNumSends
// returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs

  int (*REAPERAPI_FUNCNAME(GetTrackNumSends))(MediaTrack* tr, int category);
#endif

#if defined(REAPERAPI_WANT_GetTrackReceiveName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackReceiveName
// See GetTrackSendName.

  bool (*REAPERAPI_FUNCNAME(GetTrackReceiveName))(MediaTrack* track, int recv_index, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetTrackReceiveUIMute) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackReceiveUIMute
// See GetTrackSendUIMute.

  bool (*REAPERAPI_FUNCNAME(GetTrackReceiveUIMute))(MediaTrack* track, int recv_index, bool* muteOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackReceiveUIVolPan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackReceiveUIVolPan
// See GetTrackSendUIVolPan.

  bool (*REAPERAPI_FUNCNAME(GetTrackReceiveUIVolPan))(MediaTrack* track, int recv_index, double* volumeOut, double* panOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackSendInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackSendInfo_Value
// Get send/receive/hardware output numerical-value attributes.
// category is <0 for receives, 0=sends, >0 for hardware outputs
// parameter names:
// B_MUTE : bool *
// B_PHASE : bool * : true to flip phase
// B_MONO : bool *
// D_VOL : double * : 1.0 = +0dB etc
// D_PAN : double * : -1..+1
// D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
// I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
// I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
// I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.
// I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.
// I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)
// P_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)
// P_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)
// P_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)
// See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.

  double (*REAPERAPI_FUNCNAME(GetTrackSendInfo_Value))(MediaTrack* tr, int category, int sendidx, const char* parmname);
#endif

#if defined(REAPERAPI_WANT_GetTrackSendName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackSendName
// send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.

  bool (*REAPERAPI_FUNCNAME(GetTrackSendName))(MediaTrack* track, int send_index, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_GetTrackSendUIMute) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackSendUIMute
// send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.

  bool (*REAPERAPI_FUNCNAME(GetTrackSendUIMute))(MediaTrack* track, int send_index, bool* muteOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackSendUIVolPan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackSendUIVolPan
// send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.

  bool (*REAPERAPI_FUNCNAME(GetTrackSendUIVolPan))(MediaTrack* track, int send_index, double* volumeOut, double* panOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackState
// Gets track state, returns track name.
// flags will be set to:
// &1=folder
// &2=selected
// &4=has fx enabled
// &8=muted
// &16=soloed
// &32=SIP'd (with &16)
// &64=rec armed
// &128=rec monitoring on
// &256=rec monitoring auto
// &512=hide from TCP
// &1024=hide from MCP

  const char* (*REAPERAPI_FUNCNAME(GetTrackState))(MediaTrack* track, int* flagsOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackStateChunk) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackStateChunk
// Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.

  bool (*REAPERAPI_FUNCNAME(GetTrackStateChunk))(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional);
#endif

#if defined(REAPERAPI_WANT_GetTrackUIMute) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackUIMute

  bool (*REAPERAPI_FUNCNAME(GetTrackUIMute))(MediaTrack* track, bool* muteOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackUIPan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackUIPan

  bool (*REAPERAPI_FUNCNAME(GetTrackUIPan))(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut);
#endif

#if defined(REAPERAPI_WANT_GetTrackUIVolPan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetTrackUIVolPan

  bool (*REAPERAPI_FUNCNAME(GetTrackUIVolPan))(MediaTrack* track, double* volumeOut, double* panOut);
#endif

#if defined(REAPERAPI_WANT_GetUnderrunTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetUnderrunTime
// retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)

  void (*REAPERAPI_FUNCNAME(GetUnderrunTime))(unsigned int* audio_xrunOut, unsigned int* media_xrunOut, unsigned int* curtimeOut);
#endif

#if defined(REAPERAPI_WANT_GetUserFileNameForRead) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetUserFileNameForRead
// returns true if the user selected a valid file, false if the user canceled the dialog

  bool (*REAPERAPI_FUNCNAME(GetUserFileNameForRead))(char* filenameNeed4096, const char* title, const char* defext);
#endif

#if defined(REAPERAPI_WANT_GetUserInputs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GetUserInputs
// Get values from the user.
// If a caption begins with *, for example "*password", the edit field will not display the input text.
// Maximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields.

  bool (*REAPERAPI_FUNCNAME(GetUserInputs))(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz);
#endif

#if defined(REAPERAPI_WANT_GoToMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GoToMarker
// Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.

  void (*REAPERAPI_FUNCNAME(GoToMarker))(ReaProject* proj, int marker_index, bool use_timeline_order);
#endif

#if defined(REAPERAPI_WANT_GoToRegion) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GoToRegion
// Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.

  void (*REAPERAPI_FUNCNAME(GoToRegion))(ReaProject* proj, int region_index, bool use_timeline_order);
#endif

#if defined(REAPERAPI_WANT_GR_SelectColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GR_SelectColor
// Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.

  int (*REAPERAPI_FUNCNAME(GR_SelectColor))(HWND hwnd, int* colorOut);
#endif

#if defined(REAPERAPI_WANT_GSC_mainwnd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// GSC_mainwnd
// this is just like win32 GetSysColor() but can have overrides.

  int (*REAPERAPI_FUNCNAME(GSC_mainwnd))(int t);
#endif

#if defined(REAPERAPI_WANT_guidToString) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// guidToString
// dest should be at least 64 chars long to be safe

  void (*REAPERAPI_FUNCNAME(guidToString))(const GUID* g, char* destNeed64);
#endif

#if defined(REAPERAPI_WANT_HasExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// HasExtState
// Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.

  bool (*REAPERAPI_FUNCNAME(HasExtState))(const char* section, const char* key);
#endif

#if defined(REAPERAPI_WANT_HasTrackMIDIPrograms) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// HasTrackMIDIPrograms
// returns name of track plugin that is supplying MIDI programs,or NULL if there is none

  const char* (*REAPERAPI_FUNCNAME(HasTrackMIDIPrograms))(int track);
#endif

#if defined(REAPERAPI_WANT_HasTrackMIDIProgramsEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// HasTrackMIDIProgramsEx
// returns name of track plugin that is supplying MIDI programs,or NULL if there is none

  const char* (*REAPERAPI_FUNCNAME(HasTrackMIDIProgramsEx))(ReaProject* proj, MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_Help_Set) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Help_Set

  void (*REAPERAPI_FUNCNAME(Help_Set))(const char* helpstring, bool is_temporary_help);
#endif

#if defined(REAPERAPI_WANT_HiresPeaksFromSource) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// HiresPeaksFromSource

  void (*REAPERAPI_FUNCNAME(HiresPeaksFromSource))(PCM_source* src, PCM_source_peaktransfer_t* block);
#endif

#if defined(REAPERAPI_WANT_image_resolve_fn) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// image_resolve_fn

  void (*REAPERAPI_FUNCNAME(image_resolve_fn))(const char* in, char* out, int out_sz);
#endif

#if defined(REAPERAPI_WANT_InsertAutomationItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertAutomationItem
// Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.

  int (*REAPERAPI_FUNCNAME(InsertAutomationItem))(TrackEnvelope* env, int pool_id, double position, double length);
#endif

#if defined(REAPERAPI_WANT_InsertEnvelopePoint) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertEnvelopePoint
// Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(InsertEnvelopePoint))(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_InsertEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertEnvelopePointEx
// Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
// autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
// For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
// even if the automation item is trimmed so that not all points are visible.
// Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
// See CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(InsertEnvelopePointEx))(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_InsertMedia) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertMedia
// mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse. &16384=apply ripple according to project setting

  int (*REAPERAPI_FUNCNAME(InsertMedia))(const char* file, int mode);
#endif

#if defined(REAPERAPI_WANT_InsertMediaSection) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertMediaSection
// See InsertMedia.

  int (*REAPERAPI_FUNCNAME(InsertMediaSection))(const char* file, int mode, double startpct, double endpct, double pitchshift);
#endif

#if defined(REAPERAPI_WANT_InsertTrackAtIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertTrackAtIndex
// inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env. Superseded, see InsertTrackInProject 

  void (*REAPERAPI_FUNCNAME(InsertTrackAtIndex))(int idx, bool wantDefaults);
#endif

#if defined(REAPERAPI_WANT_InsertTrackInProject) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// InsertTrackInProject
// inserts a track in project proj at idx, this will be clamped to 0..CountTracks(proj). flags&1 for default envelopes/FX, otherwise no enabled fx/envelopes will be added.

  void (*REAPERAPI_FUNCNAME(InsertTrackInProject))(ReaProject* proj, int idx, int flags);
#endif

#if defined(REAPERAPI_WANT_IsInRealTimeAudio) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsInRealTimeAudio
// are we in a realtime audio thread (between OnAudioBuffer calls,not in some worker/anticipative FX thread)? threadsafe

  int (*REAPERAPI_FUNCNAME(IsInRealTimeAudio))();
#endif

#if defined(REAPERAPI_WANT_IsItemTakeActiveForPlayback) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsItemTakeActiveForPlayback
// get whether a take will be played (active take, unmuted, etc)

  bool (*REAPERAPI_FUNCNAME(IsItemTakeActiveForPlayback))(MediaItem* item, MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_IsMediaExtension) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsMediaExtension
// Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.
// If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.

  bool (*REAPERAPI_FUNCNAME(IsMediaExtension))(const char* ext, bool wantOthers);
#endif

#if defined(REAPERAPI_WANT_IsMediaItemSelected) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsMediaItemSelected

  bool (*REAPERAPI_FUNCNAME(IsMediaItemSelected))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_IsProjectDirty) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsProjectDirty
// Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.

  int (*REAPERAPI_FUNCNAME(IsProjectDirty))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_IsREAPER) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsREAPER
// Returns true if dealing with REAPER, returns false for ReaMote, etc

  bool (*REAPERAPI_FUNCNAME(IsREAPER))();
#endif

#if defined(REAPERAPI_WANT_IsTrackSelected) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsTrackSelected

  bool (*REAPERAPI_FUNCNAME(IsTrackSelected))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_IsTrackVisible) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsTrackVisible
// If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel.

  bool (*REAPERAPI_FUNCNAME(IsTrackVisible))(MediaTrack* track, bool mixer);
#endif

#if defined(REAPERAPI_WANT_IsWindowTextField) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// IsWindowTextField
// Returns true if window is a text field or should behave as such (jsfx editor, hooked via hwnd_info, etc)

  bool (*REAPERAPI_FUNCNAME(IsWindowTextField))(HWND hwnd);
#endif

#if defined(REAPERAPI_WANT_joystick_create) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_create
// creates a joystick device

  joystick_device* (*REAPERAPI_FUNCNAME(joystick_create))(const GUID* guid);
#endif

#if defined(REAPERAPI_WANT_joystick_destroy) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_destroy
// destroys a joystick device

  void (*REAPERAPI_FUNCNAME(joystick_destroy))(joystick_device* device);
#endif

#if defined(REAPERAPI_WANT_joystick_enum) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_enum
// enumerates installed devices, returns GUID as a string

  const char* (*REAPERAPI_FUNCNAME(joystick_enum))(int index, const char** namestrOutOptional);
#endif

#if defined(REAPERAPI_WANT_joystick_getaxis) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_getaxis
// returns axis value (-1..1)

  double (*REAPERAPI_FUNCNAME(joystick_getaxis))(joystick_device* dev, int axis);
#endif

#if defined(REAPERAPI_WANT_joystick_getbuttonmask) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_getbuttonmask
// returns button pressed mask, 1=first button, 2=second...

  unsigned int (*REAPERAPI_FUNCNAME(joystick_getbuttonmask))(joystick_device* dev);
#endif

#if defined(REAPERAPI_WANT_joystick_getinfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_getinfo
// returns button count

  int (*REAPERAPI_FUNCNAME(joystick_getinfo))(joystick_device* dev, int* axesOutOptional, int* povsOutOptional);
#endif

#if defined(REAPERAPI_WANT_joystick_getpov) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_getpov
// returns POV value (usually 0..655.35, or 655.35 on error)

  double (*REAPERAPI_FUNCNAME(joystick_getpov))(joystick_device* dev, int pov);
#endif

#if defined(REAPERAPI_WANT_joystick_update) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// joystick_update
// Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)

  bool (*REAPERAPI_FUNCNAME(joystick_update))(joystick_device* dev);
#endif

#if defined(REAPERAPI_WANT_kbd_enumerateActions) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_enumerateActions

  int (*REAPERAPI_FUNCNAME(kbd_enumerateActions))(KbdSectionInfo* section, int idx, const char** nameOut);
#endif

#if defined(REAPERAPI_WANT_kbd_formatKeyName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_formatKeyName

  void (*REAPERAPI_FUNCNAME(kbd_formatKeyName))(ACCEL* ac, char* s);
#endif

#if defined(REAPERAPI_WANT_kbd_getCommandName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_getCommandName
// Get the string of a key assigned to command "cmd" in a section.
// This function is poorly named as it doesn't return the command's name, see kbd_getTextFromCmd.

  void (*REAPERAPI_FUNCNAME(kbd_getCommandName))(int cmd, char* s, KbdSectionInfo* section);
#endif

#if defined(REAPERAPI_WANT_kbd_getTextFromCmd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_getTextFromCmd

  const char* (*REAPERAPI_FUNCNAME(kbd_getTextFromCmd))(int cmd, KbdSectionInfo* section);
#endif

#if defined(REAPERAPI_WANT_KBD_OnMainActionEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// KBD_OnMainActionEx
// val/valhw are used for midi stuff.
// val=[0..127] and valhw=-1 (midi CC),
// valhw >=0 (midi pitch (valhw | val<<7)),
// relmode absolute (0) or 1/2/3 for relative adjust modes

  int (*REAPERAPI_FUNCNAME(KBD_OnMainActionEx))(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_kbd_OnMidiEvent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_OnMidiEvent
// can be called from anywhere (threadsafe)

  void (*REAPERAPI_FUNCNAME(kbd_OnMidiEvent))(MIDI_event_t* evt, int dev_index);
#endif

#if defined(REAPERAPI_WANT_kbd_OnMidiList) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_OnMidiList
// can be called from anywhere (threadsafe)

  void (*REAPERAPI_FUNCNAME(kbd_OnMidiList))(MIDI_eventlist* list, int dev_index);
#endif

#if defined(REAPERAPI_WANT_kbd_ProcessActionsMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_ProcessActionsMenu

  void (*REAPERAPI_FUNCNAME(kbd_ProcessActionsMenu))(HMENU menu, KbdSectionInfo* section);
#endif

#if defined(REAPERAPI_WANT_kbd_processMidiEventActionEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_processMidiEventActionEx

  bool (*REAPERAPI_FUNCNAME(kbd_processMidiEventActionEx))(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx);
#endif

#if defined(REAPERAPI_WANT_kbd_reprocessMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_reprocessMenu
// Reprocess a menu recursively, setting key assignments to what their command IDs are mapped to.

  void (*REAPERAPI_FUNCNAME(kbd_reprocessMenu))(HMENU menu, KbdSectionInfo* section);
#endif

#if defined(REAPERAPI_WANT_kbd_RunCommandThroughHooks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_RunCommandThroughHooks
// actioncommandID may get modified

  bool (*REAPERAPI_FUNCNAME(kbd_RunCommandThroughHooks))(KbdSectionInfo* section, const int* actionCommandID, const int* val, const int* valhw, const int* relmode, HWND hwnd);
#endif

#if defined(REAPERAPI_WANT_kbd_translateAccelerator) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// kbd_translateAccelerator
// Pass in the HWND to receive commands, a MSG of a key command,  and a valid section,
// and kbd_translateAccelerator() will process it looking for any keys bound to it, and send the messages off.
// Returns 1 if processed, 0 if no key binding found.

  int (*REAPERAPI_FUNCNAME(kbd_translateAccelerator))(HWND hwnd, MSG* msg, KbdSectionInfo* section);
#endif

#ifndef REAPERAPI_NO_LICE
#if defined(REAPERAPI_WANT_LICE__Destroy) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__Destroy

  void (*REAPERAPI_FUNCNAME(LICE__Destroy))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__DestroyFont) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__DestroyFont

  void (*REAPERAPI_FUNCNAME(LICE__DestroyFont))(LICE_IFont* font);
#endif

#if defined(REAPERAPI_WANT_LICE__DrawText) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__DrawText

  int (*REAPERAPI_FUNCNAME(LICE__DrawText))(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags);
#endif

#if defined(REAPERAPI_WANT_LICE__GetBits) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__GetBits

  void* (*REAPERAPI_FUNCNAME(LICE__GetBits))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__GetDC) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__GetDC

  HDC (*REAPERAPI_FUNCNAME(LICE__GetDC))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__GetHeight) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__GetHeight

  int (*REAPERAPI_FUNCNAME(LICE__GetHeight))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__GetRowSpan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__GetRowSpan

  int (*REAPERAPI_FUNCNAME(LICE__GetRowSpan))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__GetWidth) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__GetWidth

  int (*REAPERAPI_FUNCNAME(LICE__GetWidth))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__IsFlipped) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__IsFlipped

  bool (*REAPERAPI_FUNCNAME(LICE__IsFlipped))(LICE_IBitmap* bm);
#endif

#if defined(REAPERAPI_WANT_LICE__resize) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__resize

  bool (*REAPERAPI_FUNCNAME(LICE__resize))(LICE_IBitmap* bm, int w, int h);
#endif

#if defined(REAPERAPI_WANT_LICE__SetBkColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__SetBkColor

  LICE_pixel (*REAPERAPI_FUNCNAME(LICE__SetBkColor))(LICE_IFont* font, LICE_pixel color);
#endif

#if defined(REAPERAPI_WANT_LICE__SetFromHFont) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__SetFromHFont
// font must REMAIN valid,unless LICE_FONT_FLAG_PRECALCALL is set

  void (*REAPERAPI_FUNCNAME(LICE__SetFromHFont))(LICE_IFont* font, HFONT hfont, int flags);
#endif

#if defined(REAPERAPI_WANT_LICE__SetTextColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__SetTextColor

  LICE_pixel (*REAPERAPI_FUNCNAME(LICE__SetTextColor))(LICE_IFont* font, LICE_pixel color);
#endif

#if defined(REAPERAPI_WANT_LICE__SetTextCombineMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE__SetTextCombineMode

  void (*REAPERAPI_FUNCNAME(LICE__SetTextCombineMode))(LICE_IFont* ifont, int mode, float alpha);
#endif

#if defined(REAPERAPI_WANT_LICE_Arc) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Arc

  void (*REAPERAPI_FUNCNAME(LICE_Arc))(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa);
#endif

#if defined(REAPERAPI_WANT_LICE_Blit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Blit

  void (*REAPERAPI_FUNCNAME(LICE_Blit))(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_Blur) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Blur

  void (*REAPERAPI_FUNCNAME(LICE_Blur))(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch);
#endif

#if defined(REAPERAPI_WANT_LICE_BorderedRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_BorderedRect

  void (*REAPERAPI_FUNCNAME(LICE_BorderedRect))(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_Circle) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Circle

  void (*REAPERAPI_FUNCNAME(LICE_Circle))(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa);
#endif

#if defined(REAPERAPI_WANT_LICE_Clear) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Clear

  void (*REAPERAPI_FUNCNAME(LICE_Clear))(LICE_IBitmap* dest, LICE_pixel color);
#endif

#if defined(REAPERAPI_WANT_LICE_ClearRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_ClearRect

  void (*REAPERAPI_FUNCNAME(LICE_ClearRect))(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits);
#endif

#if defined(REAPERAPI_WANT_LICE_ClipLine) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_ClipLine
// Returns false if the line is entirely offscreen.

  bool (*REAPERAPI_FUNCNAME(LICE_ClipLine))(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi);
#endif

#if defined(REAPERAPI_WANT_LICE_CombinePixels) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_CombinePixels

  LICE_pixel (*REAPERAPI_FUNCNAME(LICE_CombinePixels))(LICE_pixel dest, LICE_pixel src, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_Copy) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Copy

  void (*REAPERAPI_FUNCNAME(LICE_Copy))(LICE_IBitmap* dest, LICE_IBitmap* src);
#endif

#if defined(REAPERAPI_WANT_LICE_CreateBitmap) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_CreateBitmap
// create a new bitmap. this is like calling new LICE_MemBitmap (mode=0) or new LICE_SysBitmap (mode=1).

  LICE_IBitmap* (*REAPERAPI_FUNCNAME(LICE_CreateBitmap))(int mode, int w, int h);
#endif

#if defined(REAPERAPI_WANT_LICE_CreateFont) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_CreateFont

  LICE_IFont* (*REAPERAPI_FUNCNAME(LICE_CreateFont))();
#endif

#if defined(REAPERAPI_WANT_LICE_DrawCBezier) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_DrawCBezier

  void (*REAPERAPI_FUNCNAME(LICE_DrawCBezier))(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol);
#endif

#if defined(REAPERAPI_WANT_LICE_DrawChar) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_DrawChar

  void (*REAPERAPI_FUNCNAME(LICE_DrawChar))(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_DrawGlyph) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_DrawGlyph

  void (*REAPERAPI_FUNCNAME(LICE_DrawGlyph))(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_DrawRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_DrawRect

  void (*REAPERAPI_FUNCNAME(LICE_DrawRect))(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_DrawText) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_DrawText

  void (*REAPERAPI_FUNCNAME(LICE_DrawText))(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_FillCBezier) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_FillCBezier

  void (*REAPERAPI_FUNCNAME(LICE_FillCBezier))(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);
#endif

#if defined(REAPERAPI_WANT_LICE_FillCircle) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_FillCircle

  void (*REAPERAPI_FUNCNAME(LICE_FillCircle))(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa);
#endif

#if defined(REAPERAPI_WANT_LICE_FillConvexPolygon) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_FillConvexPolygon

  void (*REAPERAPI_FUNCNAME(LICE_FillConvexPolygon))(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_FillRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_FillRect

  void (*REAPERAPI_FUNCNAME(LICE_FillRect))(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_FillTrapezoid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_FillTrapezoid

  void (*REAPERAPI_FUNCNAME(LICE_FillTrapezoid))(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_FillTriangle) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_FillTriangle

  void (*REAPERAPI_FUNCNAME(LICE_FillTriangle))(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_GetPixel) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_GetPixel

  LICE_pixel (*REAPERAPI_FUNCNAME(LICE_GetPixel))(LICE_IBitmap* bm, int x, int y);
#endif

#if defined(REAPERAPI_WANT_LICE_GradRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_GradRect

  void (*REAPERAPI_FUNCNAME(LICE_GradRect))(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_Line) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_Line

  void (*REAPERAPI_FUNCNAME(LICE_Line))(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa);
#endif

#if defined(REAPERAPI_WANT_LICE_LineInt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_LineInt

  void (*REAPERAPI_FUNCNAME(LICE_LineInt))(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa);
#endif

#if defined(REAPERAPI_WANT_LICE_LoadPNG) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_LoadPNG

  LICE_IBitmap* (*REAPERAPI_FUNCNAME(LICE_LoadPNG))(const char* filename, LICE_IBitmap* bmp);
#endif

#if defined(REAPERAPI_WANT_LICE_LoadPNGFromResource) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_LoadPNGFromResource

  LICE_IBitmap* (*REAPERAPI_FUNCNAME(LICE_LoadPNGFromResource))(HINSTANCE hInst, const char* resid, LICE_IBitmap* bmp);
#endif

#if defined(REAPERAPI_WANT_LICE_MeasureText) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_MeasureText

  void (*REAPERAPI_FUNCNAME(LICE_MeasureText))(const char* string, int* w, int* h);
#endif

#if defined(REAPERAPI_WANT_LICE_MultiplyAddRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_MultiplyAddRect

  void (*REAPERAPI_FUNCNAME(LICE_MultiplyAddRect))(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd);
#endif

#if defined(REAPERAPI_WANT_LICE_PutPixel) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_PutPixel

  void (*REAPERAPI_FUNCNAME(LICE_PutPixel))(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_RotatedBlit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_RotatedBlit
// these coordinates are offset from the center of the image,in source pixel coordinates

  void (*REAPERAPI_FUNCNAME(LICE_RotatedBlit))(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent);
#endif

#if defined(REAPERAPI_WANT_LICE_RoundRect) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_RoundRect

  void (*REAPERAPI_FUNCNAME(LICE_RoundRect))(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa);
#endif

#if defined(REAPERAPI_WANT_LICE_ScaledBlit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_ScaledBlit

  void (*REAPERAPI_FUNCNAME(LICE_ScaledBlit))(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode);
#endif

#if defined(REAPERAPI_WANT_LICE_SimpleFill) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_SimpleFill

  void (*REAPERAPI_FUNCNAME(LICE_SimpleFill))(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask);
#endif

#if defined(REAPERAPI_WANT_LICE_ThickFLine) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LICE_ThickFLine
// always AA. wid is not affected by scaling (1 is always normal line, 2 is always 2 physical pixels, etc)

  void (*REAPERAPI_FUNCNAME(LICE_ThickFLine))(LICE_IBitmap* dest, double x1, double y1, double x2, double y2, LICE_pixel color, float alpha, int mode, int wid);
#endif

#endif // !REAPERAPI_NO_LICE
#if defined(REAPERAPI_WANT_LocalizeString) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// LocalizeString
// Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.

  const char* (*REAPERAPI_FUNCNAME(LocalizeString))(const char* src_string, const char* section, int flagsOptional);
#endif

#if defined(REAPERAPI_WANT_Loop_OnArrow) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Loop_OnArrow
// Move the loop selection left or right. Returns true if snap is enabled.

  bool (*REAPERAPI_FUNCNAME(Loop_OnArrow))(ReaProject* project, int direction);
#endif

#if defined(REAPERAPI_WANT_Main_OnCommand) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Main_OnCommand
// See Main_OnCommandEx.

  void (*REAPERAPI_FUNCNAME(Main_OnCommand))(int command, int flag);
#endif

#if defined(REAPERAPI_WANT_Main_OnCommandEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Main_OnCommandEx
// Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().

  void (*REAPERAPI_FUNCNAME(Main_OnCommandEx))(int command, int flag, ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Main_openProject) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Main_openProject
// opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.
// If passed a .RTrackTemplate file, adds the template to the existing project.

  void (*REAPERAPI_FUNCNAME(Main_openProject))(const char* name);
#endif

#if defined(REAPERAPI_WANT_Main_SaveProject) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Main_SaveProject
// Save the project.

  void (*REAPERAPI_FUNCNAME(Main_SaveProject))(ReaProject* proj, bool forceSaveAsInOptional);
#endif

#if defined(REAPERAPI_WANT_Main_SaveProjectEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Main_SaveProjectEx
// Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template, &8=if not saving template, set as the new project filename for this ReaProject. See Main_openProject, Main_SaveProject.

  void (*REAPERAPI_FUNCNAME(Main_SaveProjectEx))(ReaProject* proj, const char* filename, int options);
#endif

#if defined(REAPERAPI_WANT_Main_UpdateLoopInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Main_UpdateLoopInfo

  void (*REAPERAPI_FUNCNAME(Main_UpdateLoopInfo))(int ignoremask);
#endif

#if defined(REAPERAPI_WANT_MarkProjectDirty) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MarkProjectDirty
// Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.

  void (*REAPERAPI_FUNCNAME(MarkProjectDirty))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_MarkTrackItemsDirty) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MarkTrackItemsDirty
// If track is supplied, item is ignored

  void (*REAPERAPI_FUNCNAME(MarkTrackItemsDirty))(MediaTrack* track, MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_Master_GetPlayRate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Master_GetPlayRate

  double (*REAPERAPI_FUNCNAME(Master_GetPlayRate))(ReaProject* project);
#endif

#if defined(REAPERAPI_WANT_Master_GetPlayRateAtTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Master_GetPlayRateAtTime

  double (*REAPERAPI_FUNCNAME(Master_GetPlayRateAtTime))(double time_s, ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Master_GetTempo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Master_GetTempo

  double (*REAPERAPI_FUNCNAME(Master_GetTempo))();
#endif

#if defined(REAPERAPI_WANT_Master_NormalizePlayRate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Master_NormalizePlayRate
// Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.

  double (*REAPERAPI_FUNCNAME(Master_NormalizePlayRate))(double playrate, bool isnormalized);
#endif

#if defined(REAPERAPI_WANT_Master_NormalizeTempo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Master_NormalizeTempo
// Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.

  double (*REAPERAPI_FUNCNAME(Master_NormalizeTempo))(double bpm, bool isnormalized);
#endif

#if defined(REAPERAPI_WANT_MB) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MB
// type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO

  int (*REAPERAPI_FUNCNAME(MB))(const char* msg, const char* title, int type);
#endif

#if defined(REAPERAPI_WANT_MediaExplorerGetLastPlayedFileInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MediaExplorerGetLastPlayedFileInfo
// Get information about the most recently previewed Media Explorer file. filename: last played file name. filemode: &1:insert on new track, &2:insert into sampler, &8:tempo sync 1x, &16:tempo sync 0.5x, &32:tempo sync 2x, &64:do not preserve pitch when changing playrate, &128:loop selection exists, &256:time selection exists, &512:apply pitch/rate adjustment on insert, &1024:apply volume adjustment on insert, &2048:apply normalization on insert, &8192:reverse preview. startpct/endpct: time selection in [0.0, 1.0]. pitchshift/voladj/rateadj: current pitch/volume/playrate preview adjustments. srcbpm: source media tempo. extrainfo: currently unused.

  bool (*REAPERAPI_FUNCNAME(MediaExplorerGetLastPlayedFileInfo))(char* filenameOut, int filenameOut_sz, int* filemodeOut, double* selstartOut, double* selendOut, double* pitchshiftOut, double* voladjOut, double* rateadjOut, double* sourcebpmOut, char* extrainfoOut, int extrainfoOut_sz);
#endif

#if defined(REAPERAPI_WANT_MediaItemDescendsFromTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MediaItemDescendsFromTrack
// Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.

  int (*REAPERAPI_FUNCNAME(MediaItemDescendsFromTrack))(MediaItem* item, MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_Menu_GetHash) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Menu_GetHash
// Get a string that only changes when menu/toolbar entries are added or removed (not re-ordered). Can be used to determine if a customized menu/toolbar differs from the default, or if the default changed after a menu/toolbar was customized. flag==0: current default menu/toolbar; flag==1: current customized menu/toolbar; flag==2: default menu/toolbar at the time the current menu/toolbar was most recently customized, if it was customized in REAPER v7.08 or later.

  bool (*REAPERAPI_FUNCNAME(Menu_GetHash))(const char* menuname, int flag, char* hashOut, int hashOut_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_CountEvts) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_CountEvts
// Count the number of notes, CC events, and text/sysex events in a given MIDI item.

  int (*REAPERAPI_FUNCNAME(MIDI_CountEvts))(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut);
#endif

#if defined(REAPERAPI_WANT_MIDI_DeleteCC) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_DeleteCC
// Delete a MIDI CC event.

  bool (*REAPERAPI_FUNCNAME(MIDI_DeleteCC))(MediaItem_Take* take, int ccidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_DeleteEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_DeleteEvt
// Delete a MIDI event.

  bool (*REAPERAPI_FUNCNAME(MIDI_DeleteEvt))(MediaItem_Take* take, int evtidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_DeleteNote) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_DeleteNote
// Delete a MIDI note.

  bool (*REAPERAPI_FUNCNAME(MIDI_DeleteNote))(MediaItem_Take* take, int noteidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_DeleteTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_DeleteTextSysexEvt
// Delete a MIDI text or sysex event.

  bool (*REAPERAPI_FUNCNAME(MIDI_DeleteTextSysexEvt))(MediaItem_Take* take, int textsyxevtidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_DisableSort) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_DisableSort
// Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.

  void (*REAPERAPI_FUNCNAME(MIDI_DisableSort))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_MIDI_EnumSelCC) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_EnumSelCC
// Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).

  int (*REAPERAPI_FUNCNAME(MIDI_EnumSelCC))(MediaItem_Take* take, int ccidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_EnumSelEvts) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_EnumSelEvts
// Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).

  int (*REAPERAPI_FUNCNAME(MIDI_EnumSelEvts))(MediaItem_Take* take, int evtidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_EnumSelNotes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_EnumSelNotes
// Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).

  int (*REAPERAPI_FUNCNAME(MIDI_EnumSelNotes))(MediaItem_Take* take, int noteidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_EnumSelTextSysexEvts) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_EnumSelTextSysexEvts
// Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).

  int (*REAPERAPI_FUNCNAME(MIDI_EnumSelTextSysexEvts))(MediaItem_Take* take, int textsyxidx);
#endif

#if defined(REAPERAPI_WANT_MIDI_eventlist_Create) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_eventlist_Create
// Create a MIDI_eventlist object. The returned object must be deleted with MIDI_eventlist_destroy().

  MIDI_eventlist* (*REAPERAPI_FUNCNAME(MIDI_eventlist_Create))();
#endif

#if defined(REAPERAPI_WANT_MIDI_eventlist_Destroy) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_eventlist_Destroy
// Destroy a MIDI_eventlist object that was created using MIDI_eventlist_Create().

  void (*REAPERAPI_FUNCNAME(MIDI_eventlist_Destroy))(MIDI_eventlist* evtlist);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetAllEvts) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetAllEvts
// Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
// offset: MIDI ticks from previous event
// flag: &1=selected &2=muted
// flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier
// msg: the MIDI message.
// A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.
// For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
// See MIDI_SetAllEvts.

  bool (*REAPERAPI_FUNCNAME(MIDI_GetAllEvts))(MediaItem_Take* take, char* bufOutNeedBig, int* bufOutNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetCC) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetCC
// Get MIDI CC event properties.

  bool (*REAPERAPI_FUNCNAME(MIDI_GetCC))(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetCCShape) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetCCShape
// Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape

  bool (*REAPERAPI_FUNCNAME(MIDI_GetCCShape))(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetEvt
// Get MIDI event properties.

  bool (*REAPERAPI_FUNCNAME(MIDI_GetEvt))(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msgOut, int* msgOut_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetGrid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetGrid
// Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.

  double (*REAPERAPI_FUNCNAME(MIDI_GetGrid))(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetHash) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetHash
// Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash

  bool (*REAPERAPI_FUNCNAME(MIDI_GetHash))(MediaItem_Take* take, bool notesonly, char* hashOut, int hashOut_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetNote) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetNote
// Get MIDI note properties.

  bool (*REAPERAPI_FUNCNAME(MIDI_GetNote))(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetPPQPos_EndOfMeasure) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetPPQPos_EndOfMeasure
// Returns the MIDI tick (ppq) position corresponding to the end of the measure.

  double (*REAPERAPI_FUNCNAME(MIDI_GetPPQPos_EndOfMeasure))(MediaItem_Take* take, double ppqpos);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetPPQPos_StartOfMeasure) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetPPQPos_StartOfMeasure
// Returns the MIDI tick (ppq) position corresponding to the start of the measure.

  double (*REAPERAPI_FUNCNAME(MIDI_GetPPQPos_StartOfMeasure))(MediaItem_Take* take, double ppqpos);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetPPQPosFromProjQN) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetPPQPosFromProjQN
// Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.

  double (*REAPERAPI_FUNCNAME(MIDI_GetPPQPosFromProjQN))(MediaItem_Take* take, double projqn);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetPPQPosFromProjTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetPPQPosFromProjTime
// Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.

  double (*REAPERAPI_FUNCNAME(MIDI_GetPPQPosFromProjTime))(MediaItem_Take* take, double projtime);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetProjQNFromPPQPos) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetProjQNFromPPQPos
// Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.

  double (*REAPERAPI_FUNCNAME(MIDI_GetProjQNFromPPQPos))(MediaItem_Take* take, double ppqpos);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetProjTimeFromPPQPos) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetProjTimeFromPPQPos
// Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.

  double (*REAPERAPI_FUNCNAME(MIDI_GetProjTimeFromPPQPos))(MediaItem_Take* take, double ppqpos);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetRecentInputEvent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetRecentInputEvent
// Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.

  int (*REAPERAPI_FUNCNAME(MIDI_GetRecentInputEvent))(int idx, char* bufOut, int* bufOut_sz, int* tsOut, int* devIdxOut, double* projPosOut, int* projLoopCntOut);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetScale) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetScale
// Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.

  bool (*REAPERAPI_FUNCNAME(MIDI_GetScale))(MediaItem_Take* take, int* rootOut, int* scaleOut, char* nameOut, int nameOut_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetTextSysexEvt
// Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt.

  bool (*REAPERAPI_FUNCNAME(MIDI_GetTextSysexEvt))(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_GetTrackHash) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_GetTrackHash
// Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash

  bool (*REAPERAPI_FUNCNAME(MIDI_GetTrackHash))(MediaTrack* track, bool notesonly, char* hashOut, int hashOut_sz);
#endif

#if defined(REAPERAPI_WANT_midi_init) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// midi_init
// Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).

  void (*REAPERAPI_FUNCNAME(midi_init))(int force_reinit_input, int force_reinit_output);
#endif

#if defined(REAPERAPI_WANT_MIDI_InsertCC) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_InsertCC
// Insert a new MIDI CC event.

  bool (*REAPERAPI_FUNCNAME(MIDI_InsertCC))(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3);
#endif

#if defined(REAPERAPI_WANT_MIDI_InsertEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_InsertEvt
// Insert a new MIDI event.

  bool (*REAPERAPI_FUNCNAME(MIDI_InsertEvt))(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_InsertNote) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_InsertNote
// Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.

  bool (*REAPERAPI_FUNCNAME(MIDI_InsertNote))(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_InsertTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_InsertTextSysexEvt
// Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.

  bool (*REAPERAPI_FUNCNAME(MIDI_InsertTextSysexEvt))(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_RefreshEditors) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_RefreshEditors
// Synchronously updates any open MIDI editors for MIDI take

  void (*REAPERAPI_FUNCNAME(MIDI_RefreshEditors))(MediaItem_Take* tk);
#endif

#if defined(REAPERAPI_WANT_midi_reinit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// midi_reinit
// Reset (close and re-open) all MIDI devices

  void (*REAPERAPI_FUNCNAME(midi_reinit))();
#endif

#if defined(REAPERAPI_WANT_MIDI_SelectAll) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SelectAll
// Select or deselect all MIDI content.

  void (*REAPERAPI_FUNCNAME(MIDI_SelectAll))(MediaItem_Take* take, bool select);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetAllEvts) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetAllEvts
// Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.
// offset: MIDI ticks from previous event
// flag: &1=selected &2=muted
// flag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier
// msg: the MIDI message.
// A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.
// For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.
// See MIDI_GetAllEvts.

  bool (*REAPERAPI_FUNCNAME(MIDI_SetAllEvts))(MediaItem_Take* take, const char* buf, int buf_sz);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetCC) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetCC
// Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.

  bool (*REAPERAPI_FUNCNAME(MIDI_SetCC))(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetCCShape) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetCCShape
// Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape

  bool (*REAPERAPI_FUNCNAME(MIDI_SetCCShape))(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetEvt
// Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done.

  bool (*REAPERAPI_FUNCNAME(MIDI_SetEvt))(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetItemExtents) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetItemExtents
// Set the start/end positions of a media item that contains a MIDI take.

  bool (*REAPERAPI_FUNCNAME(MIDI_SetItemExtents))(MediaItem* item, double startQN, double endQN);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetNote) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetNote
// Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.

  bool (*REAPERAPI_FUNCNAME(MIDI_SetNote))(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_SetTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_SetTextSysexEvt
// Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.

  bool (*REAPERAPI_FUNCNAME(MIDI_SetTextSysexEvt))(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_MIDI_Sort) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDI_Sort
// Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.

  void (*REAPERAPI_FUNCNAME(MIDI_Sort))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_EnumTakes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_EnumTakes
// list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake

  MediaItem_Take* (*REAPERAPI_FUNCNAME(MIDIEditor_EnumTakes))(HWND midieditor, int takeindex, bool editable_only);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_GetActive) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_GetActive
// get a pointer to the focused MIDI editor window
// see MIDIEditor_GetMode, MIDIEditor_OnCommand

  HWND (*REAPERAPI_FUNCNAME(MIDIEditor_GetActive))();
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_GetMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_GetMode
// get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)
// see MIDIEditor_GetActive, MIDIEditor_OnCommand

  int (*REAPERAPI_FUNCNAME(MIDIEditor_GetMode))(HWND midieditor);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_GetSetting_int) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_GetSetting_int
// Get settings from a MIDI editor. setting_desc can be:
// snap_enabled: returns 0 or 1
// active_note_row: returns 0-127
// last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x209=aftertouch, 0x210=media item lane
// default_note_vel: returns 0-127
// default_note_chan: returns 0-15
// default_note_len: returns default length in MIDI ticks
// scale_enabled: returns 0-1
// scale_root: returns 0-12 (0=C)
// list_cnt: if viewing list view, returns event count
// if setting_desc is unsupported, the function returns -1.
// See MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str
// 

  int (*REAPERAPI_FUNCNAME(MIDIEditor_GetSetting_int))(HWND midieditor, const char* setting_desc);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_GetSetting_str) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_GetSetting_str
// Get settings from a MIDI editor. setting_desc can be:
// last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)
// scale: returns the scale record, for example "102034050607" for a major scale
// list_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.
// if setting_desc is unsupported, the function returns false.
// See MIDIEditor_GetActive, MIDIEditor_GetSetting_int
// 

  bool (*REAPERAPI_FUNCNAME(MIDIEditor_GetSetting_str))(HWND midieditor, const char* setting_desc, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_GetTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_GetTake
// get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes

  MediaItem_Take* (*REAPERAPI_FUNCNAME(MIDIEditor_GetTake))(HWND midieditor);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_LastFocused_OnCommand) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_LastFocused_OnCommand
// Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.
// see MIDIEditor_OnCommand

  bool (*REAPERAPI_FUNCNAME(MIDIEditor_LastFocused_OnCommand))(int command_id, bool islistviewcommand);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_OnCommand) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_OnCommand
// Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).
// see MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand

  bool (*REAPERAPI_FUNCNAME(MIDIEditor_OnCommand))(HWND midieditor, int command_id);
#endif

#if defined(REAPERAPI_WANT_MIDIEditor_SetSetting_int) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditor_SetSetting_int
// Set settings for a MIDI editor. setting_desc can be:
// active_note_row: 0-127
// See MIDIEditor_GetSetting_int
// 

  bool (*REAPERAPI_FUNCNAME(MIDIEditor_SetSetting_int))(HWND midieditor, const char* setting_desc, int setting);
#endif

#if defined(REAPERAPI_WANT_MIDIEditorFlagsForTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MIDIEditorFlagsForTrack
// Get or set MIDI editor settings for this track. pitchwheelrange: semitones up or down. flags &1: snap pitch lane edits to semitones if pitchwheel range is defined.

  void (*REAPERAPI_FUNCNAME(MIDIEditorFlagsForTrack))(MediaTrack* track, int* pitchwheelrangeInOut, int* flagsInOut, bool is_set);
#endif

#if defined(REAPERAPI_WANT_mkpanstr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// mkpanstr

  void (*REAPERAPI_FUNCNAME(mkpanstr))(char* strNeed64, double pan);
#endif

#if defined(REAPERAPI_WANT_mkvolpanstr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// mkvolpanstr

  void (*REAPERAPI_FUNCNAME(mkvolpanstr))(char* strNeed64, double vol, double pan);
#endif

#if defined(REAPERAPI_WANT_mkvolstr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// mkvolstr

  void (*REAPERAPI_FUNCNAME(mkvolstr))(char* strNeed64, double vol);
#endif

#if defined(REAPERAPI_WANT_MoveEditCursor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MoveEditCursor

  void (*REAPERAPI_FUNCNAME(MoveEditCursor))(double adjamt, bool dosel);
#endif

#if defined(REAPERAPI_WANT_MoveMediaItemToTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MoveMediaItemToTrack
// returns TRUE if move succeeded

  bool (*REAPERAPI_FUNCNAME(MoveMediaItemToTrack))(MediaItem* item, MediaTrack* desttr);
#endif

#if defined(REAPERAPI_WANT_MuteAllTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// MuteAllTracks

  void (*REAPERAPI_FUNCNAME(MuteAllTracks))(bool mute);
#endif

#if defined(REAPERAPI_WANT_my_getViewport) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// my_getViewport

  void (*REAPERAPI_FUNCNAME(my_getViewport))(RECT* r, const RECT* sr, bool wantWorkArea);
#endif

#if defined(REAPERAPI_WANT_NamedCommandLookup) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// NamedCommandLookup
// Get the command ID number for named command that was registered by an extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5" for a ReaScript or a custom action.

  int (*REAPERAPI_FUNCNAME(NamedCommandLookup))(const char* command_name);
#endif

#if defined(REAPERAPI_WANT_OnPauseButton) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OnPauseButton
// direct way to simulate pause button hit

  void (*REAPERAPI_FUNCNAME(OnPauseButton))();
#endif

#if defined(REAPERAPI_WANT_OnPauseButtonEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OnPauseButtonEx
// direct way to simulate pause button hit

  void (*REAPERAPI_FUNCNAME(OnPauseButtonEx))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_OnPlayButton) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OnPlayButton
// direct way to simulate play button hit

  void (*REAPERAPI_FUNCNAME(OnPlayButton))();
#endif

#if defined(REAPERAPI_WANT_OnPlayButtonEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OnPlayButtonEx
// direct way to simulate play button hit

  void (*REAPERAPI_FUNCNAME(OnPlayButtonEx))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_OnStopButton) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OnStopButton
// direct way to simulate stop button hit

  void (*REAPERAPI_FUNCNAME(OnStopButton))();
#endif

#if defined(REAPERAPI_WANT_OnStopButtonEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OnStopButtonEx
// direct way to simulate stop button hit

  void (*REAPERAPI_FUNCNAME(OnStopButtonEx))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_OpenColorThemeFile) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OpenColorThemeFile

  bool (*REAPERAPI_FUNCNAME(OpenColorThemeFile))(const char* fn);
#endif

#if defined(REAPERAPI_WANT_OpenMediaExplorer) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OpenMediaExplorer
// Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.

  HWND (*REAPERAPI_FUNCNAME(OpenMediaExplorer))(const char* mediafn, bool play);
#endif

#if defined(REAPERAPI_WANT_OscLocalMessageToHost) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// OscLocalMessageToHost
// Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.

  void (*REAPERAPI_FUNCNAME(OscLocalMessageToHost))(const char* message, const double* valueInOptional);
#endif

#if defined(REAPERAPI_WANT_parse_timestr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// parse_timestr
// Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.

  double (*REAPERAPI_FUNCNAME(parse_timestr))(const char* buf);
#endif

#if defined(REAPERAPI_WANT_parse_timestr_len) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// parse_timestr_len
// time formatting mode overrides: -1=proj default.
// 0=time
// 1=measures.beats + time
// 2=measures.beats
// 3=seconds
// 4=samples
// 5=h:m:s:f
// 

  double (*REAPERAPI_FUNCNAME(parse_timestr_len))(const char* buf, double offset, int modeoverride);
#endif

#if defined(REAPERAPI_WANT_parse_timestr_pos) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// parse_timestr_pos
// Parse time string, time formatting mode overrides: -1=proj default.
// 0=time
// 1=measures.beats + time
// 2=measures.beats
// 3=seconds
// 4=samples
// 5=h:m:s:f
// 

  double (*REAPERAPI_FUNCNAME(parse_timestr_pos))(const char* buf, int modeoverride);
#endif

#if defined(REAPERAPI_WANT_parsepanstr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// parsepanstr

  double (*REAPERAPI_FUNCNAME(parsepanstr))(const char* str);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_Create) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_Create

  PCM_sink* (*REAPERAPI_FUNCNAME(PCM_Sink_Create))(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_CreateEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_CreateEx

  PCM_sink* (*REAPERAPI_FUNCNAME(PCM_Sink_CreateEx))(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_CreateMIDIFile) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_CreateMIDIFile

  PCM_sink* (*REAPERAPI_FUNCNAME(PCM_Sink_CreateMIDIFile))(const char* filename, const char* cfg, int cfg_sz, double bpm, int div);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_CreateMIDIFileEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_CreateMIDIFileEx

  PCM_sink* (*REAPERAPI_FUNCNAME(PCM_Sink_CreateMIDIFileEx))(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_Enum) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_Enum

  unsigned int (*REAPERAPI_FUNCNAME(PCM_Sink_Enum))(int idx, const char** descstrOut);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_GetExtension) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_GetExtension

  const char* (*REAPERAPI_FUNCNAME(PCM_Sink_GetExtension))(const char* data, int data_sz);
#endif

#if defined(REAPERAPI_WANT_PCM_Sink_ShowConfig) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Sink_ShowConfig

  HWND (*REAPERAPI_FUNCNAME(PCM_Sink_ShowConfig))(const char* cfg, int cfg_sz, HWND hwndParent);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_BuildPeaks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_BuildPeaks
// Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary.

  int (*REAPERAPI_FUNCNAME(PCM_Source_BuildPeaks))(PCM_source* src, int mode);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_CreateFromFile) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_CreateFromFile
// See PCM_Source_CreateFromFileEx.

  PCM_source* (*REAPERAPI_FUNCNAME(PCM_Source_CreateFromFile))(const char* filename);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_CreateFromFileEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_CreateFromFileEx
// Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.

  PCM_source* (*REAPERAPI_FUNCNAME(PCM_Source_CreateFromFileEx))(const char* filename, bool forcenoMidiImp);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_CreateFromSimple) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_CreateFromSimple
// Creates a PCM_source from a ISimpleMediaDecoder
// (if fn is non-null, it will open the file in dec)

  PCM_source* (*REAPERAPI_FUNCNAME(PCM_Source_CreateFromSimple))(ISimpleMediaDecoder* dec, const char* fn);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_CreateFromType) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_CreateFromType
// Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).
// Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.

  PCM_source* (*REAPERAPI_FUNCNAME(PCM_Source_CreateFromType))(const char* sourcetype);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_Destroy) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_Destroy
// Deletes a PCM_source -- be sure that you remove any project reference before deleting a source

  void (*REAPERAPI_FUNCNAME(PCM_Source_Destroy))(PCM_source* src);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_GetPeaks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_GetPeaks
// Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.

  int (*REAPERAPI_FUNCNAME(PCM_Source_GetPeaks))(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf);
#endif

#if defined(REAPERAPI_WANT_PCM_Source_GetSectionInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PCM_Source_GetSectionInfo
// If a section/reverse block, retrieves offset/len/reverse. return true if success

  bool (*REAPERAPI_FUNCNAME(PCM_Source_GetSectionInfo))(PCM_source* src, double* offsOut, double* lenOut, bool* revOut);
#endif

#if defined(REAPERAPI_WANT_PeakBuild_Create) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PeakBuild_Create

  REAPER_PeakBuild_Interface* (*REAPERAPI_FUNCNAME(PeakBuild_Create))(PCM_source* src, const char* fn, int srate, int nch);
#endif

#if defined(REAPERAPI_WANT_PeakBuild_CreateEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PeakBuild_CreateEx
// flags&1 for FP support

  REAPER_PeakBuild_Interface* (*REAPERAPI_FUNCNAME(PeakBuild_CreateEx))(PCM_source* src, const char* fn, int srate, int nch, int flags);
#endif

#if defined(REAPERAPI_WANT_PeakGet_Create) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PeakGet_Create

  REAPER_PeakGet_Interface* (*REAPERAPI_FUNCNAME(PeakGet_Create))(const char* fn, int srate, int nch);
#endif

#if defined(REAPERAPI_WANT_PitchShiftSubModeMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PitchShiftSubModeMenu
// menu to select/modify pitch shifter submode, returns new value (or old value if no item selected)

  int (*REAPERAPI_FUNCNAME(PitchShiftSubModeMenu))(HWND hwnd, int x, int y, int mode, int submode_sel);
#endif

#if defined(REAPERAPI_WANT_PlayPreview) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PlayPreview
// return nonzero on success

  int (*REAPERAPI_FUNCNAME(PlayPreview))(preview_register_t* preview);
#endif

#if defined(REAPERAPI_WANT_PlayPreviewEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PlayPreviewEx
// return nonzero on success. bufflags &1=buffer source, &2=treat length changes in source as varispeed and adjust internal state accordingly if buffering. measure_align<0=play immediately, >0=align playback with measure start

  int (*REAPERAPI_FUNCNAME(PlayPreviewEx))(preview_register_t* preview, int bufflags, double measure_align);
#endif

#if defined(REAPERAPI_WANT_PlayTrackPreview) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PlayTrackPreview
// return nonzero on success,in these,m_out_chan is a track index (0-n)

  int (*REAPERAPI_FUNCNAME(PlayTrackPreview))(preview_register_t* preview);
#endif

#if defined(REAPERAPI_WANT_PlayTrackPreview2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PlayTrackPreview2
// return nonzero on success,in these,m_out_chan is a track index (0-n)

  int (*REAPERAPI_FUNCNAME(PlayTrackPreview2))(ReaProject* proj, preview_register_t* preview);
#endif

#if defined(REAPERAPI_WANT_PlayTrackPreview2Ex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PlayTrackPreview2Ex
// return nonzero on success,in these,m_out_chan is a track index (0-n). see PlayPreviewEx

  int (*REAPERAPI_FUNCNAME(PlayTrackPreview2Ex))(ReaProject* proj, preview_register_t* preview, int flags, double measure_align);
#endif

#if defined(REAPERAPI_WANT_plugin_getapi) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// plugin_getapi

  void* (*REAPERAPI_FUNCNAME(plugin_getapi))(const char* name);
#endif

#if defined(REAPERAPI_WANT_plugin_getFilterList) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// plugin_getFilterList
// Returns a double-NULL terminated list of importable media files, suitable for passing to GetOpenFileName() etc. Includes *.* (All files).

  const char* (*REAPERAPI_FUNCNAME(plugin_getFilterList))();
#endif

#if defined(REAPERAPI_WANT_plugin_getImportableProjectFilterList) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// plugin_getImportableProjectFilterList
// Returns a double-NULL terminated list of importable project files, suitable for passing to GetOpenFileName() etc. Includes *.* (All files).

  const char* (*REAPERAPI_FUNCNAME(plugin_getImportableProjectFilterList))();
#endif

#if defined(REAPERAPI_WANT_plugin_register) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// plugin_register
// Alias for reaper_plugin_info_t::Register, see reaper_plugin.h for documented uses.

  int (*REAPERAPI_FUNCNAME(plugin_register))(const char* name, void* infostruct);
#endif

#if defined(REAPERAPI_WANT_PluginWantsAlwaysRunFx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PluginWantsAlwaysRunFx

  void (*REAPERAPI_FUNCNAME(PluginWantsAlwaysRunFx))(int amt);
#endif

#if defined(REAPERAPI_WANT_PreventUIRefresh) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PreventUIRefresh
// adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur

  void (*REAPERAPI_FUNCNAME(PreventUIRefresh))(int prevent_count);
#endif

#if defined(REAPERAPI_WANT_Project_ExportOTIO) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Project_ExportOTIO
// Export the specified project to an OTIO file.

  bool (*REAPERAPI_FUNCNAME(Project_ExportOTIO))(ReaProject* proj, const char* fn);
#endif

#if defined(REAPERAPI_WANT_Project_ImportOTIO) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Project_ImportOTIO
// Import an OTIO file into a new project and return it.

  ReaProject* (*REAPERAPI_FUNCNAME(Project_ImportOTIO))(const char* fn);
#endif

#if defined(REAPERAPI_WANT_projectconfig_var_addr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// projectconfig_var_addr

  void* (*REAPERAPI_FUNCNAME(projectconfig_var_addr))(ReaProject* proj, int idx);
#endif

#if defined(REAPERAPI_WANT_projectconfig_var_getoffs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// projectconfig_var_getoffs
// returns offset to pass to projectconfig_var_addr() to get project-config var of name. szout gets size of object. can also query "__metronome_ptr" query project metronome PCM_source** offset

  int (*REAPERAPI_FUNCNAME(projectconfig_var_getoffs))(const char* name, int* szOut);
#endif

#if defined(REAPERAPI_WANT_PromptForAction) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// PromptForAction
// Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1.

  int (*REAPERAPI_FUNCNAME(PromptForAction))(int session_mode, int init_id, int section_id);
#endif

#if defined(REAPERAPI_WANT_realloc_cmd_clear) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// realloc_cmd_clear
// clears a buffer/buffer-size registration added with realloc_cmd_register_buf, and clears any later registrations, frees any allocated buffers. call after values are read from any registered pointers etc.

  void (*REAPERAPI_FUNCNAME(realloc_cmd_clear))(int tok);
#endif

#if defined(REAPERAPI_WANT_realloc_cmd_ptr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// realloc_cmd_ptr
// special use for NeedBig script API functions - reallocates a NeedBig buffer and updates its size, returns false on error

  bool (*REAPERAPI_FUNCNAME(realloc_cmd_ptr))(char** ptr, int* ptr_size, int new_size);
#endif

#if defined(REAPERAPI_WANT_realloc_cmd_register_buf) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// realloc_cmd_register_buf
// registers a buffer/buffer-size which may be reallocated by an API (ptr/ptr_size will be updated to the new values). returns a token which should be passed to realloc_cmd_clear after API call and values are read.

  int (*REAPERAPI_FUNCNAME(realloc_cmd_register_buf))(char** ptr, int* ptr_size);
#endif

#if defined(REAPERAPI_WANT_ReaperGetPitchShiftAPI) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ReaperGetPitchShiftAPI
// version must be REAPER_PITCHSHIFT_API_VER

  IReaperPitchShift* (*REAPERAPI_FUNCNAME(ReaperGetPitchShiftAPI))(int version);
#endif

#if defined(REAPERAPI_WANT_ReaScriptError) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ReaScriptError
// Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.

  void (*REAPERAPI_FUNCNAME(ReaScriptError))(const char* errmsg);
#endif

#if defined(REAPERAPI_WANT_RecursiveCreateDirectory) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// RecursiveCreateDirectory
// returns positive value on success, 0 on failure.

  int (*REAPERAPI_FUNCNAME(RecursiveCreateDirectory))(const char* path, size_t ignored);
#endif

#if defined(REAPERAPI_WANT_reduce_open_files) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// reduce_open_files
// garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call.

  int (*REAPERAPI_FUNCNAME(reduce_open_files))(int flags);
#endif

#if defined(REAPERAPI_WANT_RefreshToolbar) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// RefreshToolbar
// See RefreshToolbar2.

  void (*REAPERAPI_FUNCNAME(RefreshToolbar))(int command_id);
#endif

#if defined(REAPERAPI_WANT_RefreshToolbar2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// RefreshToolbar2
// Refresh the toolbar button states of a toggle action.

  void (*REAPERAPI_FUNCNAME(RefreshToolbar2))(int section_id, int command_id);
#endif

#if defined(REAPERAPI_WANT_relative_fn) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// relative_fn
// Makes a filename "in" relative to the current project, if any.

  void (*REAPERAPI_FUNCNAME(relative_fn))(const char* in, char* out, int out_sz);
#endif

#if defined(REAPERAPI_WANT_RemoveTrackSend) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// RemoveTrackSend
// Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.

  bool (*REAPERAPI_FUNCNAME(RemoveTrackSend))(MediaTrack* tr, int category, int sendidx);
#endif

#if defined(REAPERAPI_WANT_RenderFileSection) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// RenderFileSection
// Not available while playing back.

  bool (*REAPERAPI_FUNCNAME(RenderFileSection))(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate);
#endif

#if defined(REAPERAPI_WANT_ReorderSelectedTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ReorderSelectedTracks
// Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder

  bool (*REAPERAPI_FUNCNAME(ReorderSelectedTracks))(int beforeTrackIdx, int makePrevFolder);
#endif

#if defined(REAPERAPI_WANT_Resample_EnumModes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Resample_EnumModes

  const char* (*REAPERAPI_FUNCNAME(Resample_EnumModes))(int mode);
#endif

#if defined(REAPERAPI_WANT_Resampler_Create) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Resampler_Create

  REAPER_Resample_Interface* (*REAPERAPI_FUNCNAME(Resampler_Create))();
#endif

#if defined(REAPERAPI_WANT_resolve_fn) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// resolve_fn
// See resolve_fn2.

  void (*REAPERAPI_FUNCNAME(resolve_fn))(const char* in, char* out, int out_sz);
#endif

#if defined(REAPERAPI_WANT_resolve_fn2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// resolve_fn2
// Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.

  void (*REAPERAPI_FUNCNAME(resolve_fn2))(const char* in, char* out, int out_sz, const char* checkSubDirOptional);
#endif

#if defined(REAPERAPI_WANT_ResolveRenderPattern) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ResolveRenderPattern
// Resolve a render wildcard pattern into a set of nul-separated, double-nul terminated render target filenames. Returns the length of the string buffer needed for the returned file list. Call with path=NULL to suppress filtering out illegal pathnames, call with targets=NULL to get just the string buffer length.

  int (*REAPERAPI_FUNCNAME(ResolveRenderPattern))(ReaProject* project, const char* path, const char* pattern, char* targets, int targets_sz);
#endif

#if defined(REAPERAPI_WANT_ResolveWildcards) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ResolveWildcards
// Resolve a wildcard string. Any wildcards that are valid in the Big Clock can be resolved using this function. Pass in timePosition=-1 to use the current project playback position.

  void (*REAPERAPI_FUNCNAME(ResolveWildcards))(ReaProject* project, double timePosition, const char* wildcards, char* resolvedStringNeedBig, int resolvedStringNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_ReverseNamedCommandLookup) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ReverseNamedCommandLookup
// Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL if command_id is a native action.

  const char* (*REAPERAPI_FUNCNAME(ReverseNamedCommandLookup))(int command_id);
#endif

#if defined(REAPERAPI_WANT_ScaleFromEnvelopeMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ScaleFromEnvelopeMode
// See GetEnvelopeScalingMode.

  double (*REAPERAPI_FUNCNAME(ScaleFromEnvelopeMode))(int scaling_mode, double val);
#endif

#if defined(REAPERAPI_WANT_ScaleToEnvelopeMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ScaleToEnvelopeMode
// See GetEnvelopeScalingMode.

  double (*REAPERAPI_FUNCNAME(ScaleToEnvelopeMode))(int scaling_mode, double val);
#endif

#if defined(REAPERAPI_WANT_screenset_register) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// screenset_register

  void (*REAPERAPI_FUNCNAME(screenset_register))(char* id, void* callbackFunc, void* param);
#endif

#if defined(REAPERAPI_WANT_screenset_registerNew) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// screenset_registerNew

  void (*REAPERAPI_FUNCNAME(screenset_registerNew))(char* id, screensetNewCallbackFunc callbackFunc, void* param);
#endif

#if defined(REAPERAPI_WANT_screenset_unregister) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// screenset_unregister

  void (*REAPERAPI_FUNCNAME(screenset_unregister))(char* id);
#endif

#if defined(REAPERAPI_WANT_screenset_unregisterByParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// screenset_unregisterByParam

  void (*REAPERAPI_FUNCNAME(screenset_unregisterByParam))(void* param);
#endif

#if defined(REAPERAPI_WANT_screenset_updateLastFocus) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// screenset_updateLastFocus

  void (*REAPERAPI_FUNCNAME(screenset_updateLastFocus))(HWND prevWin);
#endif

#if defined(REAPERAPI_WANT_SectionFromUniqueID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SectionFromUniqueID

  KbdSectionInfo* (*REAPERAPI_FUNCNAME(SectionFromUniqueID))(int uniqueID);
#endif

#if defined(REAPERAPI_WANT_SelectAllMediaItems) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SelectAllMediaItems

  void (*REAPERAPI_FUNCNAME(SelectAllMediaItems))(ReaProject* proj, bool selected);
#endif

#if defined(REAPERAPI_WANT_SelectProjectInstance) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SelectProjectInstance

  void (*REAPERAPI_FUNCNAME(SelectProjectInstance))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_SendLocalOscMessage) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SendLocalOscMessage
// Send an OSC message to REAPER. See CreateLocalOscHandler, DestroyLocalOscHandler.

  void (*REAPERAPI_FUNCNAME(SendLocalOscMessage))(void* local_osc_handler, const char* msg, int msglen);
#endif

#if defined(REAPERAPI_WANT_SendMIDIMessageToHardware) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SendMIDIMessageToHardware
// Sends a MIDI message to output device specified by output. Message is sent in immediate mode. Lua example of how to pack the message string:
// sysex = { 0xF0, 0x00, 0xF7 }
// msg = ""
// for i=1, #sysex do msg = msg .. string.char(sysex[i]) end

  void (*REAPERAPI_FUNCNAME(SendMIDIMessageToHardware))(int output, const char* msg, int msg_sz);
#endif

#if defined(REAPERAPI_WANT_SetActiveTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetActiveTake
// set this take active in this media item

  void (*REAPERAPI_FUNCNAME(SetActiveTake))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_SetAutomationMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetAutomationMode
// sets all or selected tracks to mode.

  void (*REAPERAPI_FUNCNAME(SetAutomationMode))(int mode, bool onlySel);
#endif

#if defined(REAPERAPI_WANT_SetCurrentBPM) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetCurrentBPM
// set current BPM in project, set wantUndo=true to add undo point

  void (*REAPERAPI_FUNCNAME(SetCurrentBPM))(ReaProject* __proj, double bpm, bool wantUndo);
#endif

#if defined(REAPERAPI_WANT_SetCursorContext) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetCursorContext
// You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)

  void (*REAPERAPI_FUNCNAME(SetCursorContext))(int mode, TrackEnvelope* envInOptional);
#endif

#if defined(REAPERAPI_WANT_SetEditCurPos) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetEditCurPos

  void (*REAPERAPI_FUNCNAME(SetEditCurPos))(double time, bool moveview, bool seekplay);
#endif

#if defined(REAPERAPI_WANT_SetEditCurPos2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetEditCurPos2

  void (*REAPERAPI_FUNCNAME(SetEditCurPos2))(ReaProject* proj, double time, bool moveview, bool seekplay);
#endif

#if defined(REAPERAPI_WANT_SetEnvelopePoint) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetEnvelopePoint
// Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(SetEnvelopePoint))(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_SetEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetEnvelopePointEx
// Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.
// autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.
// For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,
// even if the automation item is trimmed so that not all points are visible.
// Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.
// See CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.

  bool (*REAPERAPI_FUNCNAME(SetEnvelopePointEx))(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional);
#endif

#if defined(REAPERAPI_WANT_SetEnvelopeStateChunk) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetEnvelopeStateChunk
// Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.

  bool (*REAPERAPI_FUNCNAME(SetEnvelopeStateChunk))(TrackEnvelope* env, const char* str, bool isundoOptional);
#endif

#if defined(REAPERAPI_WANT_SetExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetExtState
// Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. Note that with persist=true set, the value will be encoded as a text line in an .ini file and may behaved in unexpected ways if it contains any newlines: do not pass a string with newlines to this function. To save arbitrary data persistently, use base64 encoding or similar. See GetExtState, DeleteExtState, HasExtState.

  void (*REAPERAPI_FUNCNAME(SetExtState))(const char* section, const char* key, const char* value, bool persist);
#endif

#if defined(REAPERAPI_WANT_SetGlobalAutomationOverride) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetGlobalAutomationOverride
// mode: see GetGlobalAutomationOverride

  void (*REAPERAPI_FUNCNAME(SetGlobalAutomationOverride))(int mode);
#endif

#if defined(REAPERAPI_WANT_SetItemStateChunk) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetItemStateChunk
// Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.

  bool (*REAPERAPI_FUNCNAME(SetItemStateChunk))(MediaItem* item, const char* str, bool isundoOptional);
#endif

#if defined(REAPERAPI_WANT_SetMasterTrackVisibility) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMasterTrackVisibility
// set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.

  int (*REAPERAPI_FUNCNAME(SetMasterTrackVisibility))(int flag);
#endif

#if defined(REAPERAPI_WANT_SetMediaItemInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaItemInfo_Value
// Set media item numerical-value attributes.
// B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.
// B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.
// C_LANEPLAYS : char * : on fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a formerly fixed-lane track (read-only)
// C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.
// B_LOOPSRC : bool * : loop source
// B_ALLTAKESPLAY : bool * : all takes play
// B_UISEL : bool * : selected in arrange view
// C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1
// C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1
// C_LOCK : char * : locked, &1=locked
// D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
// D_POSITION : double * : item position in seconds
// D_LENGTH : double * : item length in seconds
// D_SNAPOFFSET : double * : item snap offset in seconds
// D_FADEINLEN : double * : item manual fadein length in seconds
// D_FADEOUTLEN : double * : item manual fadeout length in seconds
// D_FADEINDIR : double * : item fadein curvature, -1..1
// D_FADEOUTDIR : double * : item fadeout curvature, -1..1
// D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein
// D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout
// C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear
// C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear
// I_GROUPID : int * : group ID, 0=no group
// I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
// I_LASTH : int * : height in pixels (read-only)
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// I_CURTAKE : int * : active take number
// IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)
// F_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track
// F_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height
// I_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)
// B_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)
// 

  bool (*REAPERAPI_FUNCNAME(SetMediaItemInfo_Value))(MediaItem* item, const char* parmname, double newvalue);
#endif

#if defined(REAPERAPI_WANT_SetMediaItemLength) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaItemLength
// Redraws the screen only if refreshUI == true.
// See UpdateArrange().

  bool (*REAPERAPI_FUNCNAME(SetMediaItemLength))(MediaItem* item, double length, bool refreshUI);
#endif

#if defined(REAPERAPI_WANT_SetMediaItemPosition) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaItemPosition
// Redraws the screen only if refreshUI == true.
// See UpdateArrange().

  bool (*REAPERAPI_FUNCNAME(SetMediaItemPosition))(MediaItem* item, double position, bool refreshUI);
#endif

#if defined(REAPERAPI_WANT_SetMediaItemSelected) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaItemSelected

  void (*REAPERAPI_FUNCNAME(SetMediaItemSelected))(MediaItem* item, bool selected);
#endif

#if defined(REAPERAPI_WANT_SetMediaItemTake_Source) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaItemTake_Source
// Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.

  bool (*REAPERAPI_FUNCNAME(SetMediaItemTake_Source))(MediaItem_Take* take, PCM_source* source);
#endif

#if defined(REAPERAPI_WANT_SetMediaItemTakeInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaItemTakeInfo_Value
// Set media item take numerical-value attributes.
// D_STARTOFFS : double * : start offset in source media, in seconds
// D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped
// D_PAN : double * : take pan, -1..1
// D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc
// D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc
// D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc
// B_PPITCH : bool * : preserve pitch when changing playback rate
// I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)
// I_LASTH : int * : height in pixels (read-only)
// I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right
// I_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter
// I_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)
// F_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)
// I_RECPASSID : int * : record pass ID
// I_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// IP_SPECEDIT:CNT : int : spectral edit count (read-only)
// IP_SPECEDIT:DELETE:x : int : read or write this key to remove the spectral edit specified
// IP_SPECEDIT:ADD : int : read or write this key to add a new spectral edit (returns index)
// IP_SPECEDIT:SORT : int : read or write this key to re-sort spectral edits (be sure to do this following a position change or insert of new edit)
// I_SPECEDIT:FFT_SIZE : int * : FFT size used by spectral edits for this take
// D_SPECEDIT:x:POSITION : double * : position of spectral edit start (changing this requires a resort of spectral edits)
// D_SPECEDIT:x:LENGTH : double * : length of spectral edit
// F_SPECEDIT:x:GAIN : float * : gain of spectral edit
// F_SPECEDIT:x:FADE_IN : float * : fade-in size 0..1
// F_SPECEDIT:x:FADE_OUT : float * : fade-out size 0..1
// F_SPECEDIT:x:FADE_LOW : float * : fade-lf size 0..1
// F_SPECEDIT:x:FADE_HI : float * : fade-hf size 0..1
// I_SPECEDIT:x:CHAN : int * : channel index, -1 for omni
// I_SPECEDIT:x:FLAGS : int * : flags, &1=bypassed, &2=solo
// F_SPECEDIT:x:GATE_THRESH : float * : gate threshold
// F_SPECEDIT:x:GATE_FLOOR : float * : gate floor
// F_SPECEDIT:x:COMP_THRESH : float * : comp threshold
// F_SPECEDIT:x:COMP_RATIO : float * : comp ratio
// B_SPECEDIT:x:SELECTED : bool * : selection state
// I_SPECEDIT:x:TOPFREQ_CNT : int * : (read-only) number of top frequency-points
// I_SPECEDIT:x:TOPFREQ_ADD:pos:val : int * : reading or writing will insert top frequency-point with position/value pair, returns index
// I_SPECEDIT:x:TOPFREQ_DEL:y : int * : reading or writing will delete top frequency-point y. there will always be at least one point.
// F_SPECEDIT:x:TOPFREQ_POS:y : float * : (read-only) get position of top frequency-point y
// F_SPECEDIT:x:TOPFREQ_FREQ:y : float * : (read-only) get frequency of top frequency-point y
// I_SPECEDIT:x:BOTFREQ_CNT : int * : number of bottom frequency-points
// I_SPECEDIT:x:BOTFREQ_ADD:pos:val : int * : reading or writing will insert bottom frequency-point with position/value pair, returns index
// I_SPECEDIT:x:BOTFREQ_DEL:y : int * : reading or writing will delete bottom frequency-point y. there will always be at least one point.
// F_SPECEDIT:x:BOTFREQ_POS:y : float * : (read-only) get position of bottom frequency-point y
// F_SPECEDIT:x:BOTFREQ_FREQ:y : float * : (read-only) get frequency of bottom frequency-point y
// IP_TAKENUMBER : int : take number (read-only, returns the take number directly)
// 

  bool (*REAPERAPI_FUNCNAME(SetMediaItemTakeInfo_Value))(MediaItem_Take* take, const char* parmname, double newvalue);
#endif

#if defined(REAPERAPI_WANT_SetMediaTrackInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMediaTrackInfo_Value
// Set track numerical-value attributes.
// B_MUTE : bool * : muted
// B_PHASE : bool * : track phase inverted
// B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)
// IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)
// I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place
// B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed
// I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active
// I_RECARM : int * : record armed, 0=not record armed, 1=record armed
// I_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.
// I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace
// I_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)
// I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)
// I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on
// B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)
// I_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only
// I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch
// I_NCHAN : int * : number of track channels, 2-128, even numbers only
// I_SELECTED : int * : track selected, 0=unselected, 1=selected
// I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)
// I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)
// I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)
// I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)
// I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)
// I_MCPW : int * : current MCP width in pixels (read-only)
// I_MCPH : int * : current MCP height in pixels (read-only)
// I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc
// I_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed
// I_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)
// I_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel
// I_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels
// I_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned
// I_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX
// I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color
// I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels
// I_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)
// D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc
// D_PAN : double * : trim pan of track, -1..1
// D_WIDTH : double * : width of track, -1..1
// D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6
// D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6
// I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan
// D_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc
// I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper
// P_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.
// B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)
// B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)
// B_MAINSEND : bool * : track sends audio to parent
// C_MAINSEND_OFFS : char * : channel offset of track send to parent
// C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)
// I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)
// I_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)
// C_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)
// C_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons
// C_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)
// C_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)
// C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)
// F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)
// F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)
// F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)
// F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)
// I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)
// D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG
// 

  bool (*REAPERAPI_FUNCNAME(SetMediaTrackInfo_Value))(MediaTrack* tr, const char* parmname, double newvalue);
#endif

#if defined(REAPERAPI_WANT_SetMIDIEditorGrid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMIDIEditorGrid
// Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc. Sets the swing enabled/strength from the arrange settings.

  void (*REAPERAPI_FUNCNAME(SetMIDIEditorGrid))(ReaProject* project, double division);
#endif

#if defined(REAPERAPI_WANT_SetMIDI_LiveMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMIDI_LiveMode
// Enable or disable minimal-buffering live mode for MIDI instrument tracks in the project.

  void (*REAPERAPI_FUNCNAME(SetMIDI_LiveMode))(ReaProject* proj, bool enable);
#endif

#if defined(REAPERAPI_WANT_SetMixerScroll) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMixerScroll
// Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.

  MediaTrack* (*REAPERAPI_FUNCNAME(SetMixerScroll))(MediaTrack* leftmosttrack);
#endif

#if defined(REAPERAPI_WANT_SetMouseModifier) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetMouseModifier
// Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.
// Context is a string like "MM_CTX_ITEM" (see reaper-mouse.ini) or "Media item left drag" (unlocalized).
// Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.
// (macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)
// For left-click and double-click contexts, the action can be any built-in command ID number
// or any custom action ID string. Find built-in command IDs in the REAPER actions window
// (enable "show command IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.
// The action string may be a mouse modifier ID (see reaper-mouse.ini) with " m" appended to it,
// or (for click/double-click contexts) a command ID with " c" appended to it,
// or the text that appears in the mouse modifiers preferences dialog, like "Move item" (unlocalized).
// For example, SetMouseModifier("MM_CTX_ITEM", 0, "1 m") and SetMouseModifier("Media item left drag", 0, "Move item") are equivalent.
// SetMouseModifier(context, modifier_flag, -1) will reset that mouse modifier to default.
// SetMouseModifier(context, -1, -1) will reset the entire context to default.
// SetMouseModifier(-1, -1, -1) will reset all contexts to default.
// See GetMouseModifier.
// 

  void (*REAPERAPI_FUNCNAME(SetMouseModifier))(const char* context, int modifier_flag, const char* action);
#endif

#if defined(REAPERAPI_WANT_SetOnlyTrackSelected) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetOnlyTrackSelected
// Set exactly one track selected, deselect all others

  void (*REAPERAPI_FUNCNAME(SetOnlyTrackSelected))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_SetProjectGrid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectGrid
// Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.

  void (*REAPERAPI_FUNCNAME(SetProjectGrid))(ReaProject* project, double division);
#endif

#if defined(REAPERAPI_WANT_SetProjectMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectMarker
// Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.

  bool (*REAPERAPI_FUNCNAME(SetProjectMarker))(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name);
#endif

#if defined(REAPERAPI_WANT_SetProjectMarker2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectMarker2
// Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.

  bool (*REAPERAPI_FUNCNAME(SetProjectMarker2))(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name);
#endif

#if defined(REAPERAPI_WANT_SetProjectMarker3) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectMarker3
// Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.

  bool (*REAPERAPI_FUNCNAME(SetProjectMarker3))(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color);
#endif

#if defined(REAPERAPI_WANT_SetProjectMarker4) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectMarker4
// color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name

  bool (*REAPERAPI_FUNCNAME(SetProjectMarker4))(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags);
#endif

#if defined(REAPERAPI_WANT_SetProjectMarkerByIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectMarkerByIndex
// See SetProjectMarkerByIndex2.

  bool (*REAPERAPI_FUNCNAME(SetProjectMarkerByIndex))(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color);
#endif

#if defined(REAPERAPI_WANT_SetProjectMarkerByIndex2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjectMarkerByIndex2
// Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). IDnumber < 0 to ignore. Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.

  bool (*REAPERAPI_FUNCNAME(SetProjectMarkerByIndex2))(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags);
#endif

#if defined(REAPERAPI_WANT_SetProjExtState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetProjExtState
// Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or "", all extended data for that extname will be deleted.  If val is NULL or "", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.

  int (*REAPERAPI_FUNCNAME(SetProjExtState))(ReaProject* proj, const char* extname, const char* key, const char* value);
#endif

#if defined(REAPERAPI_WANT_SetRegionRenderMatrix) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetRegionRenderMatrix
// Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.

  void (*REAPERAPI_FUNCNAME(SetRegionRenderMatrix))(ReaProject* proj, int regionindex, MediaTrack* track, int flag);
#endif

#if defined(REAPERAPI_WANT_SetRenderLastError) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetRenderLastError
// Used by pcmsink objects to set an error to display while creating the pcmsink object.

  void (*REAPERAPI_FUNCNAME(SetRenderLastError))(const char* errorstr);
#endif

#if defined(REAPERAPI_WANT_SetTakeMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTakeMarker
// Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker

  int (*REAPERAPI_FUNCNAME(SetTakeMarker))(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional);
#endif

#if defined(REAPERAPI_WANT_SetTakeStretchMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTakeStretchMarker
// Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).

  int (*REAPERAPI_FUNCNAME(SetTakeStretchMarker))(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional);
#endif

#if defined(REAPERAPI_WANT_SetTakeStretchMarkerSlope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTakeStretchMarkerSlope
// See GetTakeStretchMarkerSlope

  bool (*REAPERAPI_FUNCNAME(SetTakeStretchMarkerSlope))(MediaItem_Take* take, int idx, double slope);
#endif

#if defined(REAPERAPI_WANT_SetTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTempoTimeSigMarker
// Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.

  bool (*REAPERAPI_FUNCNAME(SetTempoTimeSigMarker))(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo);
#endif

#if defined(REAPERAPI_WANT_SetThemeColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetThemeColor
// Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.

  int (*REAPERAPI_FUNCNAME(SetThemeColor))(const char* ini_key, int color, int flagsOptional);
#endif

#if defined(REAPERAPI_WANT_SetToggleCommandState) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetToggleCommandState
// Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.

  bool (*REAPERAPI_FUNCNAME(SetToggleCommandState))(int section_id, int command_id, int state);
#endif

#if defined(REAPERAPI_WANT_SetTrackAutomationMode) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackAutomationMode

  void (*REAPERAPI_FUNCNAME(SetTrackAutomationMode))(MediaTrack* tr, int mode);
#endif

#if defined(REAPERAPI_WANT_SetTrackColor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackColor
// Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR

  void (*REAPERAPI_FUNCNAME(SetTrackColor))(MediaTrack* track, int color);
#endif

#if defined(REAPERAPI_WANT_SetTrackMarkerLaneInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackMarkerLaneInfo
// Update visibility and color for a track marker lane. color is ColorToNative(r,g,b)|0x1000000 or 0 for default.

  bool (*REAPERAPI_FUNCNAME(SetTrackMarkerLaneInfo))(MediaTrack* track, int lane, bool visible, int color);
#endif

#if defined(REAPERAPI_WANT_SetTrackMIDILyrics) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackMIDILyrics
// Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	"). See GetTrackMIDILyrics

  bool (*REAPERAPI_FUNCNAME(SetTrackMIDILyrics))(MediaTrack* track, int flag, const char* str);
#endif

#if defined(REAPERAPI_WANT_SetTrackMIDINoteName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackMIDINoteName
// channel < 0 assigns these note names to all channels.

  bool (*REAPERAPI_FUNCNAME(SetTrackMIDINoteName))(int track, int pitch, int chan, const char* name);
#endif

#if defined(REAPERAPI_WANT_SetTrackMIDINoteNameEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackMIDINoteNameEx
// channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.

  bool (*REAPERAPI_FUNCNAME(SetTrackMIDINoteNameEx))(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name);
#endif

#if defined(REAPERAPI_WANT_SetTrackSelected) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackSelected

  void (*REAPERAPI_FUNCNAME(SetTrackSelected))(MediaTrack* track, bool selected);
#endif

#if defined(REAPERAPI_WANT_SetTrackSendInfo_Value) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackSendInfo_Value
// Set send/receive/hardware output numerical-value attributes, return true on success.
// category is <0 for receives, 0=sends, >0 for hardware outputs
// parameter names:
// B_MUTE : bool *
// B_PHASE : bool * : true to flip phase
// B_MONO : bool *
// D_VOL : double * : 1.0 = +0dB etc
// D_PAN : double * : -1..+1
// D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc
// I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx
// I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)
// I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.
// I_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.
// I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)
// See CreateTrackSend, RemoveTrackSend, GetTrackNumSends.

  bool (*REAPERAPI_FUNCNAME(SetTrackSendInfo_Value))(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue);
#endif

#if defined(REAPERAPI_WANT_SetTrackSendUIPan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackSendUIPan
// send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.

  bool (*REAPERAPI_FUNCNAME(SetTrackSendUIPan))(MediaTrack* track, int send_idx, double pan, int isend);
#endif

#if defined(REAPERAPI_WANT_SetTrackSendUIVol) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackSendUIVol
// send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.

  bool (*REAPERAPI_FUNCNAME(SetTrackSendUIVol))(MediaTrack* track, int send_idx, double vol, int isend);
#endif

#if defined(REAPERAPI_WANT_SetTrackStateChunk) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackStateChunk
// Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.

  bool (*REAPERAPI_FUNCNAME(SetTrackStateChunk))(MediaTrack* track, const char* str, bool isundoOptional);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIInputMonitor) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIInputMonitor
// monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  int (*REAPERAPI_FUNCNAME(SetTrackUIInputMonitor))(MediaTrack* track, int monitor, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIMute) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIMute
// mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  int (*REAPERAPI_FUNCNAME(SetTrackUIMute))(MediaTrack* track, int mute, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIPan) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIPan
// igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  double (*REAPERAPI_FUNCNAME(SetTrackUIPan))(MediaTrack* track, double pan, bool relative, bool done, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIPolarity) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIPolarity
// polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  int (*REAPERAPI_FUNCNAME(SetTrackUIPolarity))(MediaTrack* track, int polarity, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIRecArm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIRecArm
// recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  int (*REAPERAPI_FUNCNAME(SetTrackUIRecArm))(MediaTrack* track, int recarm, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUISolo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUISolo
// solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  int (*REAPERAPI_FUNCNAME(SetTrackUISolo))(MediaTrack* track, int solo, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIVolume) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIVolume
// igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  double (*REAPERAPI_FUNCNAME(SetTrackUIVolume))(MediaTrack* track, double volume, bool relative, bool done, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_SetTrackUIWidth) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SetTrackUIWidth
// igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging

  double (*REAPERAPI_FUNCNAME(SetTrackUIWidth))(MediaTrack* track, double width, bool relative, bool done, int igngroupflags);
#endif

#if defined(REAPERAPI_WANT_ShowActionList) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ShowActionList

  void (*REAPERAPI_FUNCNAME(ShowActionList))(KbdSectionInfo* section, HWND callerWnd);
#endif

#if defined(REAPERAPI_WANT_ShowConsoleMsg) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ShowConsoleMsg
// Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. Prefix string with "!SHOW:" and text will be added to console without opening the window. See ClearConsole

  void (*REAPERAPI_FUNCNAME(ShowConsoleMsg))(const char* msg);
#endif

#if defined(REAPERAPI_WANT_ShowMessageBox) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ShowMessageBox
// type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO

  int (*REAPERAPI_FUNCNAME(ShowMessageBox))(const char* msg, const char* title, int type);
#endif

#if defined(REAPERAPI_WANT_ShowPopupMenu) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ShowPopupMenu
// shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)

  void (*REAPERAPI_FUNCNAME(ShowPopupMenu))(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional);
#endif

#if defined(REAPERAPI_WANT_SLIDER2DB) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SLIDER2DB

  double (*REAPERAPI_FUNCNAME(SLIDER2DB))(double y);
#endif

#if defined(REAPERAPI_WANT_SnapToGrid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SnapToGrid

  double (*REAPERAPI_FUNCNAME(SnapToGrid))(ReaProject* project, double time_pos);
#endif

#if defined(REAPERAPI_WANT_SoloAllTracks) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SoloAllTracks
// solo=2 for SIP

  void (*REAPERAPI_FUNCNAME(SoloAllTracks))(int solo);
#endif

#if defined(REAPERAPI_WANT_Splash_GetWnd) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Splash_GetWnd
// gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.

  HWND (*REAPERAPI_FUNCNAME(Splash_GetWnd))();
#endif

#if defined(REAPERAPI_WANT_SplitMediaItem) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SplitMediaItem
// the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)

  MediaItem* (*REAPERAPI_FUNCNAME(SplitMediaItem))(MediaItem* item, double position);
#endif

#if defined(REAPERAPI_WANT_StopPreview) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// StopPreview
// return nonzero on success

  int (*REAPERAPI_FUNCNAME(StopPreview))(preview_register_t* preview);
#endif

#if defined(REAPERAPI_WANT_StopTrackPreview) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// StopTrackPreview
// return nonzero on success

  int (*REAPERAPI_FUNCNAME(StopTrackPreview))(preview_register_t* preview);
#endif

#if defined(REAPERAPI_WANT_StopTrackPreview2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// StopTrackPreview2
// return nonzero on success

  int (*REAPERAPI_FUNCNAME(StopTrackPreview2))(ReaProject* proj, preview_register_t* preview);
#endif

#if defined(REAPERAPI_WANT_stream_open) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// stream_open
// Opens a WebSocket or SRT connection. Returns a handle, or 0 on failure.

  int (*REAPERAPI_FUNCNAME(stream_open))(const char* url);
#endif

#if defined(REAPERAPI_WANT_stream_send) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// stream_send
// Sends a PCM_source_transfer_t block over the network.

  int (*REAPERAPI_FUNCNAME(stream_send))(int handle, const PCM_source_transfer_t* block);
#endif

#if defined(REAPERAPI_WANT_stream_receive) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// stream_receive
// Receives a PCM_source_transfer_t block from the network.

  int (*REAPERAPI_FUNCNAME(stream_receive))(int handle, PCM_source_transfer_t* block);
#endif

#if defined(REAPERAPI_WANT_stringToGuid) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// stringToGuid

  void (*REAPERAPI_FUNCNAME(stringToGuid))(const char* str, GUID* g);
#endif

#if defined(REAPERAPI_WANT_StuffMIDIMessage) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// StuffMIDIMessage
// Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.

  void (*REAPERAPI_FUNCNAME(StuffMIDIMessage))(int mode, int msg1, int msg2, int msg3);
#endif

#if defined(REAPERAPI_WANT_TakeFX_AddByName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_AddByName
// Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TakeFX_AddByName))(MediaItem_Take* take, const char* fxname, int instantiate);
#endif

#if defined(REAPERAPI_WANT_TakeFX_CopyToTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_CopyToTake
// Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_CopyToTake))(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move);
#endif

#if defined(REAPERAPI_WANT_TakeFX_CopyToTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_CopyToTrack
// Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_CopyToTrack))(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move);
#endif

#if defined(REAPERAPI_WANT_TakeFX_Delete) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_Delete
// Remove a FX from take chain (returns true on success) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_Delete))(MediaItem_Take* take, int fx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_EndParamEdit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_EndParamEdit
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_EndParamEdit))(MediaItem_Take* take, int fx, int param);
#endif

#if defined(REAPERAPI_WANT_TakeFX_FormatParamValue) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_FormatParamValue
// Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_FormatParamValue))(MediaItem_Take* take, int fx, int param, double val, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_FormatParamValueNormalized) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_FormatParamValueNormalized
// Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_FormatParamValueNormalized))(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetChainVisible) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetChainVisible
// returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected

  int (*REAPERAPI_FUNCNAME(TakeFX_GetChainVisible))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetCount) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetCount

  int (*REAPERAPI_FUNCNAME(TakeFX_GetCount))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetEnabled) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetEnabled
// See TakeFX_SetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetEnabled))(MediaItem_Take* take, int fx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetEnvelope) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetEnvelope
// Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  TrackEnvelope* (*REAPERAPI_FUNCNAME(TakeFX_GetEnvelope))(MediaItem_Take* take, int fxindex, int parameterindex, bool create);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetFloatingWindow) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetFloatingWindow
// returns HWND of floating window for effect index, if any FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  HWND (*REAPERAPI_FUNCNAME(TakeFX_GetFloatingWindow))(MediaItem_Take* take, int index);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetFormattedParamValue) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetFormattedParamValue
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetFormattedParamValue))(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetFXGUID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetFXGUID
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  GUID* (*REAPERAPI_FUNCNAME(TakeFX_GetFXGUID))(MediaItem_Take* take, int fx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetFXName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetFXName
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetFXName))(MediaItem_Take* take, int fx, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetIOSize) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetIOSize
// Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TakeFX_GetIOSize))(MediaItem_Take* take, int fx, int* inputPinsOut, int* outputPinsOut);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetNamedConfigParm
// gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetNamedConfigParm))(MediaItem_Take* take, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetNumParams) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetNumParams
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TakeFX_GetNumParams))(MediaItem_Take* take, int fx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetOffline) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetOffline
// See TakeFX_SetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetOffline))(MediaItem_Take* take, int fx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetOpen) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetOpen
// Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetOpen))(MediaItem_Take* take, int fx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParam
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  double (*REAPERAPI_FUNCNAME(TakeFX_GetParam))(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParameterStepSizes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParameterStepSizes
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetParameterStepSizes))(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParamEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParamEx
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  double (*REAPERAPI_FUNCNAME(TakeFX_GetParamEx))(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParamFromIdent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParamFromIdent
// gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TakeFX_GetParamFromIdent))(MediaItem_Take* take, int fx, const char* ident_str);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParamIdent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParamIdent
// gets an identifying string for the parameter FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetParamIdent))(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParamName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParamName
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetParamName))(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetParamNormalized) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetParamNormalized
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  double (*REAPERAPI_FUNCNAME(TakeFX_GetParamNormalized))(MediaItem_Take* take, int fx, int param);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetPinMappings) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetPinMappings
// gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TakeFX_GetPinMappings))(MediaItem_Take* take, int fx, int isoutput, int pin, int* high32Out);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetPreset) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetPreset
// Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TakeFX_SetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_GetPreset))(MediaItem_Take* take, int fx, char* presetnameOut, int presetnameOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetPresetIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetPresetIndex
// Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TakeFX_GetPresetIndex))(MediaItem_Take* take, int fx, int* numberOfPresetsOut);
#endif

#if defined(REAPERAPI_WANT_TakeFX_GetUserPresetFilename) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_GetUserPresetFilename
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_GetUserPresetFilename))(MediaItem_Take* take, int fx, char* fnOut, int fnOut_sz);
#endif

#if defined(REAPERAPI_WANT_TakeFX_NavigatePresets) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_NavigatePresets
// presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_NavigatePresets))(MediaItem_Take* take, int fx, int presetmove);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetEnabled) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetEnabled
// See TakeFX_GetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_SetEnabled))(MediaItem_Take* take, int fx, bool enabled);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetNamedConfigParm
// gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_SetNamedConfigParm))(MediaItem_Take* take, int fx, const char* parmname, const char* value);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetOffline) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetOffline
// See TakeFX_GetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_SetOffline))(MediaItem_Take* take, int fx, bool offline);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetOpen) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetOpen
// Open this FX UI. See TakeFX_GetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_SetOpen))(MediaItem_Take* take, int fx, bool open);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetParam
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_SetParam))(MediaItem_Take* take, int fx, int param, double val);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetParamNormalized) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetParamNormalized
//  FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_SetParamNormalized))(MediaItem_Take* take, int fx, int param, double value);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetPinMappings) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetPinMappings
// sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_SetPinMappings))(MediaItem_Take* take, int fx, int isoutput, int pin, int low32bits, int hi32bits);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetPreset) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetPreset
// Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_SetPreset))(MediaItem_Take* take, int fx, const char* presetname);
#endif

#if defined(REAPERAPI_WANT_TakeFX_SetPresetByIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_SetPresetByIndex
// Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TakeFX_SetPresetByIndex))(MediaItem_Take* take, int fx, int idx);
#endif

#if defined(REAPERAPI_WANT_TakeFX_Show) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeFX_Show
// showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TakeFX_Show))(MediaItem_Take* take, int index, int showFlag);
#endif

#if defined(REAPERAPI_WANT_TakeIsMIDI) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TakeIsMIDI
// Returns true if the active take contains MIDI.

  bool (*REAPERAPI_FUNCNAME(TakeIsMIDI))(MediaItem_Take* take);
#endif

#if defined(REAPERAPI_WANT_ThemeLayout_GetLayout) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ThemeLayout_GetLayout
// Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed.

  bool (*REAPERAPI_FUNCNAME(ThemeLayout_GetLayout))(const char* section, int idx, char* nameOut, int nameOut_sz);
#endif

#if defined(REAPERAPI_WANT_ThemeLayout_GetParameter) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ThemeLayout_GetParameter
// returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.

  const char* (*REAPERAPI_FUNCNAME(ThemeLayout_GetParameter))(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional);
#endif

#if defined(REAPERAPI_WANT_ThemeLayout_RefreshAll) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ThemeLayout_RefreshAll
// Refreshes all layouts

  void (*REAPERAPI_FUNCNAME(ThemeLayout_RefreshAll))();
#endif

#if defined(REAPERAPI_WANT_ThemeLayout_SetLayout) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ThemeLayout_SetLayout
// Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed.

  bool (*REAPERAPI_FUNCNAME(ThemeLayout_SetLayout))(const char* section, const char*  layout);
#endif

#if defined(REAPERAPI_WANT_ThemeLayout_SetParameter) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ThemeLayout_SetParameter
// sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible.

  bool (*REAPERAPI_FUNCNAME(ThemeLayout_SetParameter))(int wp, int value, bool persist);
#endif

#if defined(REAPERAPI_WANT_time_precise) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// time_precise
// Gets a precise system timestamp in seconds

  double (*REAPERAPI_FUNCNAME(time_precise))();
#endif

#if defined(REAPERAPI_WANT_TimeMap2_beatsToTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap2_beatsToTime
// convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.

  double (*REAPERAPI_FUNCNAME(TimeMap2_beatsToTime))(ReaProject* proj, double tpos, const int* measuresInOptional);
#endif

#if defined(REAPERAPI_WANT_TimeMap2_GetDividedBpmAtTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap2_GetDividedBpmAtTime
// get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)

  double (*REAPERAPI_FUNCNAME(TimeMap2_GetDividedBpmAtTime))(ReaProject* proj, double time);
#endif

#if defined(REAPERAPI_WANT_TimeMap2_GetNextChangeTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap2_GetNextChangeTime
// when does the next time map (tempo or time sig) change occur

  double (*REAPERAPI_FUNCNAME(TimeMap2_GetNextChangeTime))(ReaProject* proj, double time);
#endif

#if defined(REAPERAPI_WANT_TimeMap2_QNToTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap2_QNToTime
// converts project QN position to time.

  double (*REAPERAPI_FUNCNAME(TimeMap2_QNToTime))(ReaProject* proj, double qn);
#endif

#if defined(REAPERAPI_WANT_TimeMap2_timeToBeats) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap2_timeToBeats
// convert a time into beats.
// if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.
// if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)
// if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).
// if cdenom is non-NULL, will be set to the current time signature denominator.

  double (*REAPERAPI_FUNCNAME(TimeMap2_timeToBeats))(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional);
#endif

#if defined(REAPERAPI_WANT_TimeMap2_timeToQN) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap2_timeToQN
// converts project time position to QN position.

  double (*REAPERAPI_FUNCNAME(TimeMap2_timeToQN))(ReaProject* proj, double tpos);
#endif

#if defined(REAPERAPI_WANT_TimeMap_curFrameRate) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_curFrameRate
// Gets project framerate, and optionally whether it is drop-frame timecode

  double (*REAPERAPI_FUNCNAME(TimeMap_curFrameRate))(ReaProject* proj, bool* dropFrameOut);
#endif

#if defined(REAPERAPI_WANT_TimeMap_GetDividedBpmAtTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_GetDividedBpmAtTime
// get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)

  double (*REAPERAPI_FUNCNAME(TimeMap_GetDividedBpmAtTime))(double time);
#endif

#if defined(REAPERAPI_WANT_TimeMap_GetMeasureInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_GetMeasureInfo
// Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.

  double (*REAPERAPI_FUNCNAME(TimeMap_GetMeasureInfo))(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut);
#endif

#if defined(REAPERAPI_WANT_TimeMap_GetMetronomePattern) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_GetMetronomePattern
// Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be "ABCABCD". For backwards compatibility, by default the function will return 1 for each primary beat and 2 for each non-primary beat, so "1221222" in this example, and does not support triplets. If buf is set to "EXTENDED", the function will return the full string as displayed in the pattern editor, including all beat types and triplet representations. Pass in "SET:string" with a correctly formed pattern string matching the current time signature numerator to set the click pattern. The time signature numerator can be deduced from the returned string, and the function returns the time signature denominator.

  int (*REAPERAPI_FUNCNAME(TimeMap_GetMetronomePattern))(ReaProject* proj, double time, char* pattern, int pattern_sz);
#endif

#if defined(REAPERAPI_WANT_TimeMap_GetTimeSigAtTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_GetTimeSigAtTime
// get the effective time signature and tempo

  void (*REAPERAPI_FUNCNAME(TimeMap_GetTimeSigAtTime))(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut);
#endif

#if defined(REAPERAPI_WANT_TimeMap_QNToMeasures) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_QNToMeasures
// Find which measure the given QN position falls in.

  int (*REAPERAPI_FUNCNAME(TimeMap_QNToMeasures))(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional);
#endif

#if defined(REAPERAPI_WANT_TimeMap_QNToTime) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_QNToTime
// converts project QN position to time.

  double (*REAPERAPI_FUNCNAME(TimeMap_QNToTime))(double qn);
#endif

#if defined(REAPERAPI_WANT_TimeMap_QNToTime_abs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_QNToTime_abs
// Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime

  double (*REAPERAPI_FUNCNAME(TimeMap_QNToTime_abs))(ReaProject* proj, double qn);
#endif

#if defined(REAPERAPI_WANT_TimeMap_timeToQN) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_timeToQN
// converts project QN position to time.

  double (*REAPERAPI_FUNCNAME(TimeMap_timeToQN))(double tpos);
#endif

#if defined(REAPERAPI_WANT_TimeMap_timeToQN_abs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TimeMap_timeToQN_abs
// Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN

  double (*REAPERAPI_FUNCNAME(TimeMap_timeToQN_abs))(ReaProject* proj, double tpos);
#endif

#if defined(REAPERAPI_WANT_ToggleTrackSendUIMute) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ToggleTrackSendUIMute
// send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.

  bool (*REAPERAPI_FUNCNAME(ToggleTrackSendUIMute))(MediaTrack* track, int send_idx);
#endif

#if defined(REAPERAPI_WANT_Track_GetPeakHoldDB) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Track_GetPeakHoldDB
// Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.

  double (*REAPERAPI_FUNCNAME(Track_GetPeakHoldDB))(MediaTrack* track, int channel, bool clear);
#endif

#if defined(REAPERAPI_WANT_Track_GetPeakInfo) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Track_GetPeakInfo
// Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.

  double (*REAPERAPI_FUNCNAME(Track_GetPeakInfo))(MediaTrack* track, int channel);
#endif

#if defined(REAPERAPI_WANT_TrackCtl_SetToolTip) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackCtl_SetToolTip
// displays tooltip at location, or removes if empty string

  void (*REAPERAPI_FUNCNAME(TrackCtl_SetToolTip))(const char* fmt, int xpos, int ypos, bool topmost);
#endif

#if defined(REAPERAPI_WANT_TrackFX_AddByName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_AddByName
// Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TrackFX_AddByName))(MediaTrack* track, const char* fxname, bool recFX, int instantiate);
#endif

#if defined(REAPERAPI_WANT_TrackFX_CopyToTake) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_CopyToTake
// Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_CopyToTake))(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move);
#endif

#if defined(REAPERAPI_WANT_TrackFX_CopyToTrack) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_CopyToTrack
// Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_CopyToTrack))(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move);
#endif

#if defined(REAPERAPI_WANT_TrackFX_Delete) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_Delete
// Remove a FX from track chain (returns true on success) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_Delete))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_EndParamEdit) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_EndParamEdit
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_EndParamEdit))(MediaTrack* track, int fx, int param);
#endif

#if defined(REAPERAPI_WANT_TrackFX_FormatParamValue) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_FormatParamValue
// Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_FormatParamValue))(MediaTrack* track, int fx, int param, double val, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_FormatParamValueNormalized) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_FormatParamValueNormalized
// Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_FormatParamValueNormalized))(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetByName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetByName
// Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetByName))(MediaTrack* track, const char* fxname, bool instantiate);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetChainVisible) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetChainVisible
// returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected

  int (*REAPERAPI_FUNCNAME(TrackFX_GetChainVisible))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetCount) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetCount

  int (*REAPERAPI_FUNCNAME(TrackFX_GetCount))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetEnabled) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetEnabled
// See TrackFX_SetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetEnabled))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetEQ) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetEQ
// Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetEQ))(MediaTrack* track, bool instantiate);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetEQBandEnabled) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetEQBandEnabled
// Returns true if the EQ band is enabled.
// Returns false if the band is disabled, or if track/fxidx is not ReaEQ.
// Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
// Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
// 
// See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetEQBandEnabled))(MediaTrack* track, int fxidx, int bandtype, int bandidx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetEQParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetEQParam
// Returns false if track/fxidx is not ReaEQ.
// Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
// Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
// Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
// See TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetEQParam))(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetFloatingWindow) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetFloatingWindow
// returns HWND of floating window for effect index, if any FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  HWND (*REAPERAPI_FUNCNAME(TrackFX_GetFloatingWindow))(MediaTrack* track, int index);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetFormattedParamValue) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetFormattedParamValue
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetFormattedParamValue))(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetFXGUID) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetFXGUID
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  GUID* (*REAPERAPI_FUNCNAME(TrackFX_GetFXGUID))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetFXName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetFXName
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetFXName))(MediaTrack* track, int fx, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetInstrument) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetInstrument
// Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetInstrument))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetIOSize) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetIOSize
// Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetIOSize))(MediaTrack* track, int fx, int* inputPinsOut, int* outputPinsOut);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetNamedConfigParm
// gets plug-in specific named configuration value (returns true on success). 
// 
// Supported values for read:
// pdc : PDC latency
// in_pin_X : name of input pin X
// out_pin_X : name of output pin X
// fx_type : type string
// fx_ident : type-specific identifier
// fx_name : name of FX (also supported as original_name)
// GainReduction_dB : [ReaComp + other supported compressors]
// is_instrument : 1 if instrument, 0 if not (v7.40+)
// parent_container : FX ID of parent container, if any (v7.06+)
// container_count : [Container] number of FX in container
// container_item.X : FX ID of item in container (first item is container_item.0) (v7.06+)
// param.X.container_map.hint_id : unique ID of mapping (preserved if mapping order changes)
// param.X.container_map.delete : read this value in order to remove the mapping for this parameter
// container_map.add : read from this value to add a new container parameter mapping -- will return new parameter index (accessed via param.X.container_map.*)
// container_map.add.FXID.PARMIDX : read from this value to add/get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).
// container_map.get.FXID.PARMIDX : read from this value to get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).
// chain_pdc_actual : returns the actual chain latency in samples, only valid after playback has commenced, may be rounded up to block size.
// chain_pdc_reporting : returns the reported chain latency, always valid, not rounded to block size.
// 
// 
// Supported values for read/write:
// vst_chunk[_program] : base64-encoded VST-specific chunk.
// clap_chunk : base64-encoded CLAP-specific chunk.
// param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
// param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state
// param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
// param.X.mod.[active,baseline,visible] : parameter module global settings
// param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
// param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
// param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
// param.X.container_map.fx_index : index of FX contained in container
// param.X.container_map.fx_parm : parameter index of parameter of FX contained in container
// param.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)
// BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
// THRESHOLD, CEILING, TRUEPEAK : [ReaLimit]
// NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
// ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
// FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
// MODE, RSMODE : [RS5k] general mode, resample mode
// VIDEO_CODE : [video processor] code
// force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
// parallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI
// instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
// chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
// chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)
// chain_sel : selected/visible FX in chain
// renamed_name : renamed FX instance name (empty string = not renamed)
// container_nch : number of internal channels for container
// container_nch_in : number of input pins for container
// container_nch_out : number of output pints for container
// container_nch_feedback : number of internal feedback channels enabled in container
// focused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as "last focused."
// last_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set "last touched," and last touched parameter index is set to the value in the string (if valid).
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetNamedConfigParm))(MediaTrack* track, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetNumParams) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetNumParams
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetNumParams))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackMIDI_FX_AddByName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackMIDI_FX_AddByName
// Adds or queries the position of a named MIDI effect in the track MIDI FX chain, which processes events before instrument FX. Specify instantiate semantics as with TrackFX_AddByName. Returns -1 on failure or the new position in chain on success.

  int (*REAPERAPI_FUNCNAME(TrackMIDI_FX_AddByName))(MediaTrack* track, const char* fxname, int instantiate);
#endif

#if defined(REAPERAPI_WANT_TrackMIDI_FX_GetNumParams) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackMIDI_FX_GetNumParams
// Returns the number of parameters for the MIDI effect at index fx in the track MIDI FX chain.

  int (*REAPERAPI_FUNCNAME(TrackMIDI_FX_GetNumParams))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetOffline) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetOffline
// See TrackFX_SetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetOffline))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetOpen) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetOpen
// Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetOpen))(MediaTrack* track, int fx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParam
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  double (*REAPERAPI_FUNCNAME(TrackFX_GetParam))(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParameterStepSizes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParameterStepSizes
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetParameterStepSizes))(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParamEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParamEx
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  double (*REAPERAPI_FUNCNAME(TrackFX_GetParamEx))(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParamFromIdent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParamFromIdent
// gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetParamFromIdent))(MediaTrack* track, int fx, const char* ident_str);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParamIdent) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParamIdent
// gets an identifying string for the parameter FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetParamIdent))(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParamName) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParamName
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetParamName))(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetParamNormalized) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetParamNormalized
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  double (*REAPERAPI_FUNCNAME(TrackFX_GetParamNormalized))(MediaTrack* track, int fx, int param);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetPinMappings) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetPinMappings
// gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetPinMappings))(MediaTrack* tr, int fx, int isoutput, int pin, int* high32Out);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetPreset) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetPreset
// Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TrackFX_SetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_GetPreset))(MediaTrack* track, int fx, char* presetnameOut, int presetnameOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetPresetIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetPresetIndex
// Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetPresetIndex))(MediaTrack* track, int fx, int* numberOfPresetsOut);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetRecChainVisible) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetRecChainVisible
// returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected

  int (*REAPERAPI_FUNCNAME(TrackFX_GetRecChainVisible))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetRecCount) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetRecCount
// returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.

  int (*REAPERAPI_FUNCNAME(TrackFX_GetRecCount))(MediaTrack* track);
#endif

#if defined(REAPERAPI_WANT_TrackFX_GetUserPresetFilename) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_GetUserPresetFilename
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_GetUserPresetFilename))(MediaTrack* track, int fx, char* fnOut, int fnOut_sz);
#endif

#if defined(REAPERAPI_WANT_TrackFX_NavigatePresets) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_NavigatePresets
// presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_NavigatePresets))(MediaTrack* track, int fx, int presetmove);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetEnabled) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetEnabled
// See TrackFX_GetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_SetEnabled))(MediaTrack* track, int fx, bool enabled);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetEQBandEnabled) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetEQBandEnabled
// Enable or disable a ReaEQ band.
// Returns false if track/fxidx is not ReaEQ.
// Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
// Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
// 
// See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetEQBandEnabled))(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetEQParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetEQParam
// Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.
// Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.
// Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.
// Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.
// See TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetEQParam))(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetNamedConfigParm
// sets plug-in specific named configuration value (returns true on success).
// 
// Support values for write:
// vst_chunk[_program] : base64-encoded VST-specific chunk.
// clap_chunk : base64-encoded CLAP-specific chunk.
// param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state
// param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state
// param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*
// param.X.mod.[active,baseline,visible] : parameter module global settings
// param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set
// param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)
// param.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only
// param.X.container_map.fx_index : index of FX contained in container
// param.X.container_map.fx_parm : parameter index of parameter of FX contained in container
// param.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)
// BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]
// THRESHOLD, CEILING, TRUEPEAK : [ReaLimit]
// NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]
// ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE
// FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE
// MODE, RSMODE : [RS5k] general mode, resample mode
// VIDEO_CODE : [video processor] code
// force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence
// parallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI
// instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
// chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect
// chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)
// chain_sel : selected/visible FX in chain
// renamed_name : renamed FX instance name (empty string = not renamed)
// container_nch : number of internal channels for container
// container_nch_in : number of input pins for container
// container_nch_out : number of output pints for container
// container_nch_feedback : number of internal feedback channels enabled in container
// focused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as "last focused."
// last_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set "last touched," and last touched parameter index is set to the value in the string (if valid).
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetNamedConfigParm))(MediaTrack* track, int fx, const char* parmname, const char* value);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetOffline) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetOffline
// See TrackFX_GetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_SetOffline))(MediaTrack* track, int fx, bool offline);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetOpen) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetOpen
// Open this FX UI. See TrackFX_GetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_SetOpen))(MediaTrack* track, int fx, bool open);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetParam) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetParam
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetParam))(MediaTrack* track, int fx, int param, double val);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetParamNormalized) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetParamNormalized
//  FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetParamNormalized))(MediaTrack* track, int fx, int param, double value);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetPinMappings) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetPinMappings
// sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetPinMappings))(MediaTrack* tr, int fx, int isoutput, int pin, int low32bits, int hi32bits);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetPreset) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetPreset
// Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetPreset))(MediaTrack* track, int fx, const char* presetname);
#endif

#if defined(REAPERAPI_WANT_TrackFX_SetPresetByIndex) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_SetPresetByIndex
// Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  bool (*REAPERAPI_FUNCNAME(TrackFX_SetPresetByIndex))(MediaTrack* track, int fx, int idx);
#endif

#if defined(REAPERAPI_WANT_TrackFX_Show) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackFX_Show
// showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.

  void (*REAPERAPI_FUNCNAME(TrackFX_Show))(MediaTrack* track, int index, int showFlag);
#endif

#if defined(REAPERAPI_WANT_TrackList_AdjustWindows) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackList_AdjustWindows

  void (*REAPERAPI_FUNCNAME(TrackList_AdjustWindows))(bool isMinor);
#endif

#if defined(REAPERAPI_WANT_TrackList_UpdateAllExternalSurfaces) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// TrackList_UpdateAllExternalSurfaces

  void (*REAPERAPI_FUNCNAME(TrackList_UpdateAllExternalSurfaces))();
#endif

#if defined(REAPERAPI_WANT_Undo_BeginBlock) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_BeginBlock
// call to start a new block

  void (*REAPERAPI_FUNCNAME(Undo_BeginBlock))();
#endif

#if defined(REAPERAPI_WANT_Undo_BeginBlock2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_BeginBlock2
// call to start a new block

  void (*REAPERAPI_FUNCNAME(Undo_BeginBlock2))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Undo_CanRedo2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_CanRedo2
// returns string of next action,if able,NULL if not

  const char* (*REAPERAPI_FUNCNAME(Undo_CanRedo2))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Undo_CanUndo2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_CanUndo2
// returns string of last action,if able,NULL if not

  const char* (*REAPERAPI_FUNCNAME(Undo_CanUndo2))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Undo_DoRedo2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_DoRedo2
// nonzero if success

  int (*REAPERAPI_FUNCNAME(Undo_DoRedo2))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Undo_DoUndo2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_DoUndo2
// nonzero if success

  int (*REAPERAPI_FUNCNAME(Undo_DoUndo2))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_Undo_EndBlock) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_EndBlock
// call to end the block,with extra flags if any,and a description

  void (*REAPERAPI_FUNCNAME(Undo_EndBlock))(const char* descchange, int extraflags);
#endif

#if defined(REAPERAPI_WANT_Undo_EndBlock2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_EndBlock2
// call to end the block,with extra flags if any,and a description

  void (*REAPERAPI_FUNCNAME(Undo_EndBlock2))(ReaProject* proj, const char* descchange, int extraflags);
#endif

#if defined(REAPERAPI_WANT_Undo_OnStateChange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_OnStateChange
// limited state change to items

  void (*REAPERAPI_FUNCNAME(Undo_OnStateChange))(const char* descchange);
#endif

#if defined(REAPERAPI_WANT_Undo_OnStateChange2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_OnStateChange2
// limited state change to items

  void (*REAPERAPI_FUNCNAME(Undo_OnStateChange2))(ReaProject* proj, const char* descchange);
#endif

#if defined(REAPERAPI_WANT_Undo_OnStateChange_Item) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_OnStateChange_Item

  void (*REAPERAPI_FUNCNAME(Undo_OnStateChange_Item))(ReaProject* proj, const char* name, MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_Undo_OnStateChangeEx) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_OnStateChangeEx
// trackparm=-1 by default,or if updating one fx chain,you can specify track index

  void (*REAPERAPI_FUNCNAME(Undo_OnStateChangeEx))(const char* descchange, int whichStates, int trackparm);
#endif

#if defined(REAPERAPI_WANT_Undo_OnStateChangeEx2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// Undo_OnStateChangeEx2
// trackparm=-1 by default,or if updating one fx chain,you can specify track index

  void (*REAPERAPI_FUNCNAME(Undo_OnStateChangeEx2))(ReaProject* proj, const char* descchange, int whichStates, int trackparm);
#endif

#if defined(REAPERAPI_WANT_RegisterTimecodeInput) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// RegisterTimecodeInput
// Register a callback to receive decoded timecode frames.

  void (*REAPERAPI_FUNCNAME(RegisterTimecodeInput))(void (*cb)(const char* frame, double seconds));
#endif

#if defined(REAPERAPI_WANT_SendTimecodeFrame) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// SendTimecodeFrame
// Transmit a timecode frame from REAPER.

  void (*REAPERAPI_FUNCNAME(SendTimecodeFrame))(const char* frame);
#endif

#if defined(REAPERAPI_WANT_update_disk_counters) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// update_disk_counters
// Updates disk I/O statistics with bytes transferred since last call. notify REAPER of a write error by calling with readamt=0, writeamt=-101010110 for unknown or -101010111 for disk full

  void (*REAPERAPI_FUNCNAME(update_disk_counters))(int readamt, int writeamt);
#endif

#if defined(REAPERAPI_WANT_UpdateArrange) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// UpdateArrange
// Redraw the arrange view

  void (*REAPERAPI_FUNCNAME(UpdateArrange))();
#endif

#if defined(REAPERAPI_WANT_UpdateItemInProject) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// UpdateItemInProject

  void (*REAPERAPI_FUNCNAME(UpdateItemInProject))(MediaItem* item);
#endif

#if defined(REAPERAPI_WANT_UpdateItemLanes) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// UpdateItemLanes
// Recalculate lane arrangement for fixed lane tracks, including auto-removing empty lanes at the bottom of the track

  bool (*REAPERAPI_FUNCNAME(UpdateItemLanes))(ReaProject* proj);
#endif

#if defined(REAPERAPI_WANT_UpdateTimeline) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// UpdateTimeline
// Redraw the arrange view and ruler

  void (*REAPERAPI_FUNCNAME(UpdateTimeline))();
#endif

#if defined(REAPERAPI_WANT_ValidatePtr) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ValidatePtr
// see ValidatePtr2

  bool (*REAPERAPI_FUNCNAME(ValidatePtr))(void* pointer, const char* ctypename);
#endif

#if defined(REAPERAPI_WANT_ValidatePtr2) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ValidatePtr2
// Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.

  bool (*REAPERAPI_FUNCNAME(ValidatePtr2))(ReaProject* proj, void* pointer, const char* ctypename);
#endif

#if defined(REAPERAPI_WANT_ViewPrefs) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// ViewPrefs
// Opens the prefs to a page, use pageByName if page is 0.

  void (*REAPERAPI_FUNCNAME(ViewPrefs))(int page, const char* pageByName);
#endif

#if defined(REAPERAPI_WANT_WDL_VirtualWnd_ScaledBlitBG) || !defined(REAPERAPI_MINIMAL)
REAPERAPI_DEF //==============================================
// WDL_VirtualWnd_ScaledBlitBG

  bool (*REAPERAPI_FUNCNAME(WDL_VirtualWnd_ScaledBlitBG))(LICE_IBitmap* dest, WDL_VirtualWnd_BGCfg* src, int destx, int desty, int destw, int desth, int clipx, int clipy, int clipw, int cliph, float alpha, int mode);
#endif

#ifdef REAPERAPI_IMPLEMENT
  int REAPERAPI_LoadAPI(void *(*getAPI)(const char *))
  {
    static const struct { void **dest; const char *name; } table[]={
      #if defined(REAPERAPI_WANT___mergesort) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(__mergesort),"__mergesort"},
      #endif
      #if defined(REAPERAPI_WANT_AddCustomizableMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddCustomizableMenu),"AddCustomizableMenu"},
      #endif
      #if defined(REAPERAPI_WANT_AddExtensionsMainMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddExtensionsMainMenu),"AddExtensionsMainMenu"},
      #endif
      #if defined(REAPERAPI_WANT_AddMediaItemToTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddMediaItemToTrack),"AddMediaItemToTrack"},
      #endif
      #if defined(REAPERAPI_WANT_AddProjectMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddProjectMarker),"AddProjectMarker"},
      #endif
      #if defined(REAPERAPI_WANT_AddProjectMarker2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddProjectMarker2),"AddProjectMarker2"},
      #endif
      #if defined(REAPERAPI_WANT_AddRemoveReaScript) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddRemoveReaScript),"AddRemoveReaScript"},
      #endif
      #if defined(REAPERAPI_WANT_AddTakeToMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddTakeToMediaItem),"AddTakeToMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_AddTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddTempoTimeSigMarker),"AddTempoTimeSigMarker"},
      #endif
      #if defined(REAPERAPI_WANT_AddTrackMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AddTrackMarker),"AddTrackMarker"},
      #endif
      #if defined(REAPERAPI_WANT_adjustZoom) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(adjustZoom),"adjustZoom"},
      #endif
      #if defined(REAPERAPI_WANT_AdvancePlaybackPosition) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AdvancePlaybackPosition),"AdvancePlaybackPosition"},
      #endif
      #if defined(REAPERAPI_WANT_AnyTrackSolo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AnyTrackSolo),"AnyTrackSolo"},
      #endif
      #if defined(REAPERAPI_WANT_APIExists) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(APIExists),"APIExists"},
      #endif
      #if defined(REAPERAPI_WANT_APITest) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(APITest),"APITest"},
      #endif
      #if defined(REAPERAPI_WANT_ARA_AttachProcessorToMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ARA_AttachProcessorToMediaItem),"ARA_AttachProcessorToMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_ARA_DetachProcessorFromMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ARA_DetachProcessorFromMediaItem),"ARA_DetachProcessorFromMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_ApplyNudge) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ApplyNudge),"ApplyNudge"},
      #endif
      #if defined(REAPERAPI_WANT_ArmCommand) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ArmCommand),"ArmCommand"},
      #endif
      #if defined(REAPERAPI_WANT_Audio_Init) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Audio_Init),"Audio_Init"},
      #endif
      #if defined(REAPERAPI_WANT_Audio_IsPreBuffer) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Audio_IsPreBuffer),"Audio_IsPreBuffer"},
      #endif
      #if defined(REAPERAPI_WANT_Audio_IsRunning) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Audio_IsRunning),"Audio_IsRunning"},
      #endif
      #if defined(REAPERAPI_WANT_Audio_Quit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Audio_Quit),"Audio_Quit"},
      #endif
      #if defined(REAPERAPI_WANT_Audio_RegHardwareHook) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Audio_RegHardwareHook),"Audio_RegHardwareHook"},
      #endif
      #if defined(REAPERAPI_WANT_AudioAccessorStateChanged) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AudioAccessorStateChanged),"AudioAccessorStateChanged"},
      #endif
      #if defined(REAPERAPI_WANT_AudioAccessorUpdate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AudioAccessorUpdate),"AudioAccessorUpdate"},
      #endif
      #if defined(REAPERAPI_WANT_AudioAccessorValidateState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(AudioAccessorValidateState),"AudioAccessorValidateState"},
      #endif
      #if defined(REAPERAPI_WANT_BypassFxAllTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(BypassFxAllTracks),"BypassFxAllTracks"},
      #endif
      #if defined(REAPERAPI_WANT_CalcMediaSrcLoudness) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CalcMediaSrcLoudness),"CalcMediaSrcLoudness"},
      #endif
      #if defined(REAPERAPI_WANT_CalculateNormalization) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CalculateNormalization),"CalculateNormalization"},
      #endif
      #if defined(REAPERAPI_WANT_CalculatePeaks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CalculatePeaks),"CalculatePeaks"},
      #endif
      #if defined(REAPERAPI_WANT_CalculatePeaksFloatSrcPtr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CalculatePeaksFloatSrcPtr),"CalculatePeaksFloatSrcPtr"},
      #endif
      #if defined(REAPERAPI_WANT_CalibrateRoundTripLatency) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CalibrateRoundTripLatency),"CalibrateRoundTripLatency"},
      #endif
      #if defined(REAPERAPI_WANT_GetRoundTripLatency) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetRoundTripLatency),"GetRoundTripLatency"},
      #endif
      #if defined(REAPERAPI_WANT_ClearAllRecArmed) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ClearAllRecArmed),"ClearAllRecArmed"},
      #endif
      #if defined(REAPERAPI_WANT_ClearConsole) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ClearConsole),"ClearConsole"},
      #endif
      #if defined(REAPERAPI_WANT_ClearPeakCache) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ClearPeakCache),"ClearPeakCache"},
      #endif
      #if defined(REAPERAPI_WANT_ColorFromNative) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ColorFromNative),"ColorFromNative"},
      #endif
      #if defined(REAPERAPI_WANT_ColorToNative) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ColorToNative),"ColorToNative"},
      #endif
      #if defined(REAPERAPI_WANT_CountActionShortcuts) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountActionShortcuts),"CountActionShortcuts"},
      #endif
      #if defined(REAPERAPI_WANT_CountAutomationItems) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountAutomationItems),"CountAutomationItems"},
      #endif
      #if defined(REAPERAPI_WANT_CountEnvelopePoints) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountEnvelopePoints),"CountEnvelopePoints"},
      #endif
      #if defined(REAPERAPI_WANT_CountEnvelopePointsEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountEnvelopePointsEx),"CountEnvelopePointsEx"},
      #endif
      #if defined(REAPERAPI_WANT_CountMediaItems) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountMediaItems),"CountMediaItems"},
      #endif
      #if defined(REAPERAPI_WANT_CountProjectMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountProjectMarkers),"CountProjectMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_CountSelectedMediaItems) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountSelectedMediaItems),"CountSelectedMediaItems"},
      #endif
      #if defined(REAPERAPI_WANT_CountSelectedTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountSelectedTracks),"CountSelectedTracks"},
      #endif
      #if defined(REAPERAPI_WANT_CountSelectedTracks2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountSelectedTracks2),"CountSelectedTracks2"},
      #endif
      #if defined(REAPERAPI_WANT_CountTakeEnvelopes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTakeEnvelopes),"CountTakeEnvelopes"},
      #endif
      #if defined(REAPERAPI_WANT_CountTakes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTakes),"CountTakes"},
      #endif
      #if defined(REAPERAPI_WANT_CountTCPFXParms) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTCPFXParms),"CountTCPFXParms"},
      #endif
      #if defined(REAPERAPI_WANT_CountTempoTimeSigMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTempoTimeSigMarkers),"CountTempoTimeSigMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_CountTrackEnvelopes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTrackEnvelopes),"CountTrackEnvelopes"},
      #endif
      #if defined(REAPERAPI_WANT_CountTrackMediaItems) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTrackMediaItems),"CountTrackMediaItems"},
      #endif
      #if defined(REAPERAPI_WANT_CountTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CountTracks),"CountTracks"},
      #endif
      #if defined(REAPERAPI_WANT_CreateLocalOscHandler) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateLocalOscHandler),"CreateLocalOscHandler"},
      #endif
      #if defined(REAPERAPI_WANT_CreateMIDIInput) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateMIDIInput),"CreateMIDIInput"},
      #endif
      #if defined(REAPERAPI_WANT_CreateMIDIOutput) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateMIDIOutput),"CreateMIDIOutput"},
      #endif
      #if defined(REAPERAPI_WANT_CreateNewMIDIItemInProj) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateNewMIDIItemInProj),"CreateNewMIDIItemInProj"},
      #endif
      #if defined(REAPERAPI_WANT_CreateTakeAudioAccessor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateTakeAudioAccessor),"CreateTakeAudioAccessor"},
      #endif
      #if defined(REAPERAPI_WANT_CreateTrackAudioAccessor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateTrackAudioAccessor),"CreateTrackAudioAccessor"},
      #endif
      #if defined(REAPERAPI_WANT_CreateTrackSend) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CreateTrackSend),"CreateTrackSend"},
      #endif
      #if defined(REAPERAPI_WANT_CrossfadeEditor_OnCommand) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CrossfadeEditor_OnCommand),"CrossfadeEditor_OnCommand"},
      #endif
      #if defined(REAPERAPI_WANT_CrossfadeEditor_Show) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CrossfadeEditor_Show),"CrossfadeEditor_Show"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_FlushUndo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_FlushUndo),"CSurf_FlushUndo"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_GetTouchState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_GetTouchState),"CSurf_GetTouchState"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_GoEnd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_GoEnd),"CSurf_GoEnd"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_GoStart) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_GoStart),"CSurf_GoStart"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_NumTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_NumTracks),"CSurf_NumTracks"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnArrow) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnArrow),"CSurf_OnArrow"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnFwd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnFwd),"CSurf_OnFwd"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnFXChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnFXChange),"CSurf_OnFXChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnInputMonitorChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnInputMonitorChange),"CSurf_OnInputMonitorChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnInputMonitorChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnInputMonitorChangeEx),"CSurf_OnInputMonitorChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnMuteChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnMuteChange),"CSurf_OnMuteChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnMuteChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnMuteChangeEx),"CSurf_OnMuteChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnOscControlMessage) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnOscControlMessage),"CSurf_OnOscControlMessage"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnOscControlMessage2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnOscControlMessage2),"CSurf_OnOscControlMessage2"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnPanChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnPanChange),"CSurf_OnPanChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnPanChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnPanChangeEx),"CSurf_OnPanChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnPause) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnPause),"CSurf_OnPause"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnPlay) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnPlay),"CSurf_OnPlay"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnPlayRateChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnPlayRateChange),"CSurf_OnPlayRateChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRecArmChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRecArmChange),"CSurf_OnRecArmChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRecArmChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRecArmChangeEx),"CSurf_OnRecArmChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRecord) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRecord),"CSurf_OnRecord"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRecvPanChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRecvPanChange),"CSurf_OnRecvPanChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRecvVolumeChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRecvVolumeChange),"CSurf_OnRecvVolumeChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRew) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRew),"CSurf_OnRew"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnRewFwd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnRewFwd),"CSurf_OnRewFwd"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnScroll) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnScroll),"CSurf_OnScroll"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnSelectedChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnSelectedChange),"CSurf_OnSelectedChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnSendPanChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnSendPanChange),"CSurf_OnSendPanChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnSendVolumeChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnSendVolumeChange),"CSurf_OnSendVolumeChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnSoloChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnSoloChange),"CSurf_OnSoloChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnSoloChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnSoloChangeEx),"CSurf_OnSoloChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnStop) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnStop),"CSurf_OnStop"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnTempoChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnTempoChange),"CSurf_OnTempoChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnTrackSelection) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnTrackSelection),"CSurf_OnTrackSelection"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnVolumeChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnVolumeChange),"CSurf_OnVolumeChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnVolumeChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnVolumeChangeEx),"CSurf_OnVolumeChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnWidthChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnWidthChange),"CSurf_OnWidthChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnWidthChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnWidthChangeEx),"CSurf_OnWidthChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_OnZoom) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_OnZoom),"CSurf_OnZoom"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_ResetAllCachedVolPanStates) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_ResetAllCachedVolPanStates),"CSurf_ResetAllCachedVolPanStates"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_ScrubAmt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_ScrubAmt),"CSurf_ScrubAmt"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetAutoMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetAutoMode),"CSurf_SetAutoMode"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetPlayState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetPlayState),"CSurf_SetPlayState"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetRepeatState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetRepeatState),"CSurf_SetRepeatState"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetSurfaceMute) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetSurfaceMute),"CSurf_SetSurfaceMute"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetSurfacePan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetSurfacePan),"CSurf_SetSurfacePan"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetSurfaceRecArm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetSurfaceRecArm),"CSurf_SetSurfaceRecArm"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetSurfaceSelected) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetSurfaceSelected),"CSurf_SetSurfaceSelected"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetSurfaceSolo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetSurfaceSolo),"CSurf_SetSurfaceSolo"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetSurfaceVolume) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetSurfaceVolume),"CSurf_SetSurfaceVolume"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_SetTrackListChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_SetTrackListChange),"CSurf_SetTrackListChange"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_TrackFromID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_TrackFromID),"CSurf_TrackFromID"},
      #endif
      #if defined(REAPERAPI_WANT_CSurf_TrackToID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(CSurf_TrackToID),"CSurf_TrackToID"},
      #endif
      #if defined(REAPERAPI_WANT_DB2SLIDER) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DB2SLIDER),"DB2SLIDER"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteActionShortcut) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteActionShortcut),"DeleteActionShortcut"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteEnvelopePointEx),"DeleteEnvelopePointEx"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteEnvelopePointRange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteEnvelopePointRange),"DeleteEnvelopePointRange"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteEnvelopePointRangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteEnvelopePointRangeEx),"DeleteEnvelopePointRangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteExtState),"DeleteExtState"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteProjectMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteProjectMarker),"DeleteProjectMarker"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteProjectMarkerByIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteProjectMarkerByIndex),"DeleteProjectMarkerByIndex"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteTakeMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteTakeMarker),"DeleteTakeMarker"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteTakeStretchMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteTakeStretchMarkers),"DeleteTakeStretchMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteTempoTimeSigMarker),"DeleteTempoTimeSigMarker"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteTrack),"DeleteTrack"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteTrackMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteTrackMarker),"DeleteTrackMarker"},
      #endif
      #if defined(REAPERAPI_WANT_DeleteTrackMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DeleteTrackMediaItem),"DeleteTrackMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_DestroyAudioAccessor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DestroyAudioAccessor),"DestroyAudioAccessor"},
      #endif
      #if defined(REAPERAPI_WANT_DestroyLocalOscHandler) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DestroyLocalOscHandler),"DestroyLocalOscHandler"},
      #endif
      #if defined(REAPERAPI_WANT_DoActionShortcutDialog) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DoActionShortcutDialog),"DoActionShortcutDialog"},
      #endif
      #if defined(REAPERAPI_WANT_Dock_UpdateDockID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Dock_UpdateDockID),"Dock_UpdateDockID"},
      #endif
      #if defined(REAPERAPI_WANT_DockGetPosition) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockGetPosition),"DockGetPosition"},
      #endif
      #if defined(REAPERAPI_WANT_DockIsChildOfDock) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockIsChildOfDock),"DockIsChildOfDock"},
      #endif
      #if defined(REAPERAPI_WANT_DockWindowActivate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockWindowActivate),"DockWindowActivate"},
      #endif
      #if defined(REAPERAPI_WANT_DockWindowAdd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockWindowAdd),"DockWindowAdd"},
      #endif
      #if defined(REAPERAPI_WANT_DockWindowAddEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockWindowAddEx),"DockWindowAddEx"},
      #endif
      #if defined(REAPERAPI_WANT_DockWindowRefresh) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockWindowRefresh),"DockWindowRefresh"},
      #endif
      #if defined(REAPERAPI_WANT_DockWindowRefreshForHWND) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockWindowRefreshForHWND),"DockWindowRefreshForHWND"},
      #endif
      #if defined(REAPERAPI_WANT_DockWindowRemove) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DockWindowRemove),"DockWindowRemove"},
      #endif
      #if defined(REAPERAPI_WANT_DuplicateCustomizableMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(DuplicateCustomizableMenu),"DuplicateCustomizableMenu"},
      #endif
      #if defined(REAPERAPI_WANT_EditTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EditTempoTimeSigMarker),"EditTempoTimeSigMarker"},
      #endif
      #if defined(REAPERAPI_WANT_EnsureNotCompletelyOffscreen) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnsureNotCompletelyOffscreen),"EnsureNotCompletelyOffscreen"},
      #endif
      #if defined(REAPERAPI_WANT_EnumerateFiles) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumerateFiles),"EnumerateFiles"},
      #endif
      #if defined(REAPERAPI_WANT_EnumerateSubdirectories) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumerateSubdirectories),"EnumerateSubdirectories"},
      #endif
      #if defined(REAPERAPI_WANT_EnumInstalledFX) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumInstalledFX),"EnumInstalledFX"},
      #endif
      #if defined(REAPERAPI_WANT_EnumPitchShiftModes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumPitchShiftModes),"EnumPitchShiftModes"},
      #endif
      #if defined(REAPERAPI_WANT_EnumPitchShiftSubModes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumPitchShiftSubModes),"EnumPitchShiftSubModes"},
      #endif
      #if defined(REAPERAPI_WANT_EnumProjectMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumProjectMarkers),"EnumProjectMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_EnumProjectMarkers2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumProjectMarkers2),"EnumProjectMarkers2"},
      #endif
      #if defined(REAPERAPI_WANT_EnumProjectMarkers3) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumProjectMarkers3),"EnumProjectMarkers3"},
      #endif
      #if defined(REAPERAPI_WANT_EnumProjects) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumProjects),"EnumProjects"},
      #endif
      #if defined(REAPERAPI_WANT_EnumProjExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumProjExtState),"EnumProjExtState"},
      #endif
      #if defined(REAPERAPI_WANT_EnumRegionRenderMatrix) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumRegionRenderMatrix),"EnumRegionRenderMatrix"},
      #endif
      #if defined(REAPERAPI_WANT_EnumTrackMIDIProgramNames) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumTrackMIDIProgramNames),"EnumTrackMIDIProgramNames"},
      #endif
      #if defined(REAPERAPI_WANT_EnumTrackMIDIProgramNamesEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumTrackMIDIProgramNamesEx),"EnumTrackMIDIProgramNamesEx"},
      #endif
      #if defined(REAPERAPI_WANT_EnumTrackMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(EnumTrackMarkers),"EnumTrackMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_Envelope_Evaluate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Envelope_Evaluate),"Envelope_Evaluate"},
      #endif
      #if defined(REAPERAPI_WANT_Envelope_FormatValue) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Envelope_FormatValue),"Envelope_FormatValue"},
      #endif
      #if defined(REAPERAPI_WANT_Envelope_GetParentTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Envelope_GetParentTake),"Envelope_GetParentTake"},
      #endif
      #if defined(REAPERAPI_WANT_Envelope_GetParentTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Envelope_GetParentTrack),"Envelope_GetParentTrack"},
      #endif
      #if defined(REAPERAPI_WANT_Envelope_SortPoints) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Envelope_SortPoints),"Envelope_SortPoints"},
      #endif
      #if defined(REAPERAPI_WANT_Envelope_SortPointsEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Envelope_SortPointsEx),"Envelope_SortPointsEx"},
      #endif
      #if defined(REAPERAPI_WANT_ExecProcess) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ExecProcess),"ExecProcess"},
      #endif
      #if defined(REAPERAPI_WANT_ExportTrackMIDIToMusicXML) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ExportTrackMIDIToMusicXML),"ExportTrackMIDIToMusicXML"},
      #endif
      #if defined(REAPERAPI_WANT_ImportTrackMIDIFromMusicXML) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ImportTrackMIDIFromMusicXML),"ImportTrackMIDIFromMusicXML"},
      #endif
      #if defined(REAPERAPI_WANT_file_exists) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(file_exists),"file_exists"},
      #endif
      #if defined(REAPERAPI_WANT_FindTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(FindTempoTimeSigMarker),"FindTempoTimeSigMarker"},
      #endif
      #if defined(REAPERAPI_WANT_format_timestr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(format_timestr),"format_timestr"},
      #endif
      #if defined(REAPERAPI_WANT_format_timestr_len) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(format_timestr_len),"format_timestr_len"},
      #endif
      #if defined(REAPERAPI_WANT_format_timestr_pos) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(format_timestr_pos),"format_timestr_pos"},
      #endif
      #if defined(REAPERAPI_WANT_FreeHeapPtr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(FreeHeapPtr),"FreeHeapPtr"},
      #endif
      #if defined(REAPERAPI_WANT_genGuid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(genGuid),"genGuid"},
      #endif
      #if defined(REAPERAPI_WANT_get_config_var) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(get_config_var),"get_config_var"},
      #endif
      #if defined(REAPERAPI_WANT_get_config_var_string) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(get_config_var_string),"get_config_var_string"},
      #endif
      #if defined(REAPERAPI_WANT_get_ini_file) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(get_ini_file),"get_ini_file"},
      #endif
      #if defined(REAPERAPI_WANT_get_midi_config_var) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(get_midi_config_var),"get_midi_config_var"},
      #endif
      #if defined(REAPERAPI_WANT_GetActionShortcutDesc) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetActionShortcutDesc),"GetActionShortcutDesc"},
      #endif
      #if defined(REAPERAPI_WANT_GetActiveTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetActiveTake),"GetActiveTake"},
      #endif
      #if defined(REAPERAPI_WANT_GetAllProjectPlayStates) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAllProjectPlayStates),"GetAllProjectPlayStates"},
      #endif
      #if defined(REAPERAPI_WANT_GetAppVersion) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAppVersion),"GetAppVersion"},
      #endif
      #if defined(REAPERAPI_WANT_GetArmedCommand) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetArmedCommand),"GetArmedCommand"},
      #endif
      #if defined(REAPERAPI_WANT_GetAudioAccessorEndTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAudioAccessorEndTime),"GetAudioAccessorEndTime"},
      #endif
      #if defined(REAPERAPI_WANT_GetAudioAccessorHash) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAudioAccessorHash),"GetAudioAccessorHash"},
      #endif
      #if defined(REAPERAPI_WANT_GetAudioAccessorSamples) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAudioAccessorSamples),"GetAudioAccessorSamples"},
      #endif
      #if defined(REAPERAPI_WANT_GetAudioAccessorStartTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAudioAccessorStartTime),"GetAudioAccessorStartTime"},
      #endif
      #if defined(REAPERAPI_WANT_GetAudioDeviceInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetAudioDeviceInfo),"GetAudioDeviceInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetColorTheme) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetColorTheme),"GetColorTheme"},
      #endif
      #if defined(REAPERAPI_WANT_GetColorThemeStruct) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetColorThemeStruct),"GetColorThemeStruct"},
      #endif
      #if defined(REAPERAPI_WANT_GetConfigWantsDock) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetConfigWantsDock),"GetConfigWantsDock"},
      #endif
      #if defined(REAPERAPI_WANT_GetContextMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetContextMenu),"GetContextMenu"},
      #endif
      #if defined(REAPERAPI_WANT_GetCurrentProjectInLoadSave) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetCurrentProjectInLoadSave),"GetCurrentProjectInLoadSave"},
      #endif
      #if defined(REAPERAPI_WANT_GetCursorContext) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetCursorContext),"GetCursorContext"},
      #endif
      #if defined(REAPERAPI_WANT_GetCursorContext2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetCursorContext2),"GetCursorContext2"},
      #endif
      #if defined(REAPERAPI_WANT_GetCursorPosition) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetCursorPosition),"GetCursorPosition"},
      #endif
      #if defined(REAPERAPI_WANT_GetCursorPositionEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetCursorPositionEx),"GetCursorPositionEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetDisplayedMediaItemColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetDisplayedMediaItemColor),"GetDisplayedMediaItemColor"},
      #endif
      #if defined(REAPERAPI_WANT_GetDisplayedMediaItemColor2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetDisplayedMediaItemColor2),"GetDisplayedMediaItemColor2"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopeInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopeInfo_Value),"GetEnvelopeInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopeName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopeName),"GetEnvelopeName"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopePoint) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopePoint),"GetEnvelopePoint"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopePointByTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopePointByTime),"GetEnvelopePointByTime"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopePointByTimeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopePointByTimeEx),"GetEnvelopePointByTimeEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopePointEx),"GetEnvelopePointEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopeScalingMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopeScalingMode),"GetEnvelopeScalingMode"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopeStateChunk) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopeStateChunk),"GetEnvelopeStateChunk"},
      #endif
      #if defined(REAPERAPI_WANT_GetEnvelopeUIState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetEnvelopeUIState),"GetEnvelopeUIState"},
      #endif
      #if defined(REAPERAPI_WANT_GetExePath) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetExePath),"GetExePath"},
      #endif
      #if defined(REAPERAPI_WANT_GetExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetExtState),"GetExtState"},
      #endif
      #if defined(REAPERAPI_WANT_GetFocusedFX) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetFocusedFX),"GetFocusedFX"},
      #endif
      #if defined(REAPERAPI_WANT_GetFocusedFX2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetFocusedFX2),"GetFocusedFX2"},
      #endif
      #if defined(REAPERAPI_WANT_GetFreeDiskSpaceForRecordPath) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetFreeDiskSpaceForRecordPath),"GetFreeDiskSpaceForRecordPath"},
      #endif
      #if defined(REAPERAPI_WANT_GetFXEnvelope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetFXEnvelope),"GetFXEnvelope"},
      #endif
      #if defined(REAPERAPI_WANT_GetGlobalAutomationOverride) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetGlobalAutomationOverride),"GetGlobalAutomationOverride"},
      #endif
      #if defined(REAPERAPI_WANT_GetHZoomLevel) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetHZoomLevel),"GetHZoomLevel"},
      #endif
      #if defined(REAPERAPI_WANT_GetIconThemePointer) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetIconThemePointer),"GetIconThemePointer"},
      #endif
      #if defined(REAPERAPI_WANT_GetIconThemePointerForDPI) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetIconThemePointerForDPI),"GetIconThemePointerForDPI"},
      #endif
      #if defined(REAPERAPI_WANT_GetIconThemeStruct) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetIconThemeStruct),"GetIconThemeStruct"},
      #endif
      #if defined(REAPERAPI_WANT_GetInputActivityLevel) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetInputActivityLevel),"GetInputActivityLevel"},
      #endif
      #if defined(REAPERAPI_WANT_GetInputChannelName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetInputChannelName),"GetInputChannelName"},
      #endif
      #if defined(REAPERAPI_WANT_GetInputOutputLatency) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetInputOutputLatency),"GetInputOutputLatency"},
      #endif
      #if defined(REAPERAPI_WANT_GetItemEditingTime2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetItemEditingTime2),"GetItemEditingTime2"},
      #endif
      #if defined(REAPERAPI_WANT_GetItemFromPoint) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetItemFromPoint),"GetItemFromPoint"},
      #endif
      #if defined(REAPERAPI_WANT_GetItemProjectContext) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetItemProjectContext),"GetItemProjectContext"},
      #endif
      #if defined(REAPERAPI_WANT_GetItemStateChunk) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetItemStateChunk),"GetItemStateChunk"},
      #endif
      #if defined(REAPERAPI_WANT_GetLastColorThemeFile) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetLastColorThemeFile),"GetLastColorThemeFile"},
      #endif
      #if defined(REAPERAPI_WANT_GetLastMarkerAndCurRegion) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetLastMarkerAndCurRegion),"GetLastMarkerAndCurRegion"},
      #endif
      #if defined(REAPERAPI_WANT_GetLastTouchedFX) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetLastTouchedFX),"GetLastTouchedFX"},
      #endif
      #if defined(REAPERAPI_WANT_GetLastTouchedTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetLastTouchedTrack),"GetLastTouchedTrack"},
      #endif
      #if defined(REAPERAPI_WANT_GetMainHwnd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMainHwnd),"GetMainHwnd"},
      #endif
      #if defined(REAPERAPI_WANT_GetMasterMuteSoloFlags) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMasterMuteSoloFlags),"GetMasterMuteSoloFlags"},
      #endif
      #if defined(REAPERAPI_WANT_GetMasterTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMasterTrack),"GetMasterTrack"},
      #endif
      #if defined(REAPERAPI_WANT_GetMasterTrackVisibility) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMasterTrackVisibility),"GetMasterTrackVisibility"},
      #endif
      #if defined(REAPERAPI_WANT_GetMaxMidiInputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMaxMidiInputs),"GetMaxMidiInputs"},
      #endif
      #if defined(REAPERAPI_WANT_GetMaxMidiOutputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMaxMidiOutputs),"GetMaxMidiOutputs"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaFileMetadata) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaFileMetadata),"GetMediaFileMetadata"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItem),"GetMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItem_Track) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItem_Track),"GetMediaItem_Track"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemInfo_Value),"GetMediaItemInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemNumTakes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemNumTakes),"GetMediaItemNumTakes"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTake),"GetMediaItemTake"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTake_Item) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTake_Item),"GetMediaItemTake_Item"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTake_Peaks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTake_Peaks),"GetMediaItemTake_Peaks"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTake_Source) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTake_Source),"GetMediaItemTake_Source"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTake_Track) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTake_Track),"GetMediaItemTake_Track"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTakeByGUID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTakeByGUID),"GetMediaItemTakeByGUID"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTakeInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTakeInfo_Value),"GetMediaItemTakeInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaItemTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaItemTrack),"GetMediaItemTrack"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaSourceFileName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaSourceFileName),"GetMediaSourceFileName"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaSourceLength) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaSourceLength),"GetMediaSourceLength"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaSourceNumChannels) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaSourceNumChannels),"GetMediaSourceNumChannels"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaSourceParent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaSourceParent),"GetMediaSourceParent"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaSourceSampleRate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaSourceSampleRate),"GetMediaSourceSampleRate"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaSourceType) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaSourceType),"GetMediaSourceType"},
      #endif
      #if defined(REAPERAPI_WANT_GetMediaTrackInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMediaTrackInfo_Value),"GetMediaTrackInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_GetMIDIInputName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMIDIInputName),"GetMIDIInputName"},
      #endif
      #if defined(REAPERAPI_WANT_GetMIDIOutputName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMIDIOutputName),"GetMIDIOutputName"},
      #endif
      #if defined(REAPERAPI_WANT_GetMIDI_LiveMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMIDI_LiveMode),"GetMIDI_LiveMode"},
      #endif
      #if defined(REAPERAPI_WANT_GetMixerScroll) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMixerScroll),"GetMixerScroll"},
      #endif
      #if defined(REAPERAPI_WANT_GetMouseModifier) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMouseModifier),"GetMouseModifier"},
      #endif
      #if defined(REAPERAPI_WANT_GetMousePosition) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetMousePosition),"GetMousePosition"},
      #endif
      #if defined(REAPERAPI_WANT_GetNumAudioInputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetNumAudioInputs),"GetNumAudioInputs"},
      #endif
      #if defined(REAPERAPI_WANT_GetNumAudioOutputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetNumAudioOutputs),"GetNumAudioOutputs"},
      #endif
      #if defined(REAPERAPI_WANT_GetNumMIDIInputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetNumMIDIInputs),"GetNumMIDIInputs"},
      #endif
      #if defined(REAPERAPI_WANT_GetNumMIDIOutputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetNumMIDIOutputs),"GetNumMIDIOutputs"},
      #endif
      #if defined(REAPERAPI_WANT_GetNumTakeMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetNumTakeMarkers),"GetNumTakeMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_GetNumTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetNumTracks),"GetNumTracks"},
      #endif
      #if defined(REAPERAPI_WANT_GetOS) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetOS),"GetOS"},
      #endif
      #if defined(REAPERAPI_WANT_GetOutputChannelName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetOutputChannelName),"GetOutputChannelName"},
      #endif
      #if defined(REAPERAPI_WANT_GetOutputLatency) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetOutputLatency),"GetOutputLatency"},
      #endif
      #if defined(REAPERAPI_WANT_GetParentTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetParentTrack),"GetParentTrack"},
      #endif
      #if defined(REAPERAPI_WANT_GetPeakFileName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPeakFileName),"GetPeakFileName"},
      #endif
      #if defined(REAPERAPI_WANT_GetPeakFileNameEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPeakFileNameEx),"GetPeakFileNameEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetPeakFileNameEx2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPeakFileNameEx2),"GetPeakFileNameEx2"},
      #endif
      #if defined(REAPERAPI_WANT_GetPeaksBitmap) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPeaksBitmap),"GetPeaksBitmap"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayLoopCnt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayLoopCnt),"GetPlayLoopCnt"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayPosition) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayPosition),"GetPlayPosition"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayPosition2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayPosition2),"GetPlayPosition2"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayPosition2Ex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayPosition2Ex),"GetPlayPosition2Ex"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayPositionEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayPositionEx),"GetPlayPositionEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayState),"GetPlayState"},
      #endif
      #if defined(REAPERAPI_WANT_GetPlayStateEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPlayStateEx),"GetPlayStateEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetPreferredDiskReadMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPreferredDiskReadMode),"GetPreferredDiskReadMode"},
      #endif
      #if defined(REAPERAPI_WANT_GetPreferredDiskReadModePeak) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPreferredDiskReadModePeak),"GetPreferredDiskReadModePeak"},
      #endif
      #if defined(REAPERAPI_WANT_GetPreferredDiskWriteMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetPreferredDiskWriteMode),"GetPreferredDiskWriteMode"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectLength) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectLength),"GetProjectLength"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectName),"GetProjectName"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectPath) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectPath),"GetProjectPath"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectPathEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectPathEx),"GetProjectPathEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectStateChangeCount) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectStateChangeCount),"GetProjectStateChangeCount"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectTimeOffset) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectTimeOffset),"GetProjectTimeOffset"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectTimeSignature) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectTimeSignature),"GetProjectTimeSignature"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjectTimeSignature2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjectTimeSignature2),"GetProjectTimeSignature2"},
      #endif
      #if defined(REAPERAPI_WANT_GetProjExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetProjExtState),"GetProjExtState"},
      #endif
      #if defined(REAPERAPI_WANT_GetResourcePath) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetResourcePath),"GetResourcePath"},
      #endif
      #if defined(REAPERAPI_WANT_GetSelectedEnvelope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSelectedEnvelope),"GetSelectedEnvelope"},
      #endif
      #if defined(REAPERAPI_WANT_GetSelectedMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSelectedMediaItem),"GetSelectedMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_GetSelectedTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSelectedTrack),"GetSelectedTrack"},
      #endif
      #if defined(REAPERAPI_WANT_GetSelectedTrack2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSelectedTrack2),"GetSelectedTrack2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSelectedTrackEnvelope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSelectedTrackEnvelope),"GetSelectedTrackEnvelope"},
      #endif
      #if defined(REAPERAPI_WANT_GetSet_ArrangeView2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSet_ArrangeView2),"GetSet_ArrangeView2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSet_LoopTimeRange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSet_LoopTimeRange),"GetSet_LoopTimeRange"},
      #endif
      #if defined(REAPERAPI_WANT_GetSet_LoopTimeRange2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSet_LoopTimeRange2),"GetSet_LoopTimeRange2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetAutomationItemInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetAutomationItemInfo),"GetSetAutomationItemInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetAutomationItemInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetAutomationItemInfo_String),"GetSetAutomationItemInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetEnvelopeInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetEnvelopeInfo_String),"GetSetEnvelopeInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetEnvelopeState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetEnvelopeState),"GetSetEnvelopeState"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetEnvelopeState2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetEnvelopeState2),"GetSetEnvelopeState2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetItemState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetItemState),"GetSetItemState"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetItemState2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetItemState2),"GetSetItemState2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetMediaItemInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetMediaItemInfo),"GetSetMediaItemInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetMediaItemInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetMediaItemInfo_String),"GetSetMediaItemInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetMediaItemTakeInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetMediaItemTakeInfo),"GetSetMediaItemTakeInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetMediaItemTakeInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetMediaItemTakeInfo_String),"GetSetMediaItemTakeInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetMediaTrackInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetMediaTrackInfo),"GetSetMediaTrackInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetMediaTrackInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetMediaTrackInfo_String),"GetSetMediaTrackInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetObjectState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetObjectState),"GetSetObjectState"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetObjectState2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetObjectState2),"GetSetObjectState2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetProjectAuthor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetProjectAuthor),"GetSetProjectAuthor"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetProjectGrid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetProjectGrid),"GetSetProjectGrid"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetProjectInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetProjectInfo),"GetSetProjectInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetProjectInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetProjectInfo_String),"GetSetProjectInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetProjectNotes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetProjectNotes),"GetSetProjectNotes"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetRepeat) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetRepeat),"GetSetRepeat"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetRepeatEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetRepeatEx),"GetSetRepeatEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTempoTimeSigMarkerFlag) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTempoTimeSigMarkerFlag),"GetSetTempoTimeSigMarkerFlag"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackGroupMembership) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackGroupMembership),"GetSetTrackGroupMembership"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackGroupMembershipEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackGroupMembershipEx),"GetSetTrackGroupMembershipEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackGroupMembershipHigh) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackGroupMembershipHigh),"GetSetTrackGroupMembershipHigh"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackMIDISupportFile) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackMIDISupportFile),"GetSetTrackMIDISupportFile"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackSendInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackSendInfo),"GetSetTrackSendInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackSendInfo_String) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackSendInfo_String),"GetSetTrackSendInfo_String"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackState),"GetSetTrackState"},
      #endif
      #if defined(REAPERAPI_WANT_GetSetTrackState2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSetTrackState2),"GetSetTrackState2"},
      #endif
      #if defined(REAPERAPI_WANT_GetSubProjectFromSource) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetSubProjectFromSource),"GetSubProjectFromSource"},
      #endif
      #if defined(REAPERAPI_WANT_GetTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTake),"GetTake"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeEnvelope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeEnvelope),"GetTakeEnvelope"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeEnvelopeByName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeEnvelopeByName),"GetTakeEnvelopeByName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeMarker),"GetTakeMarker"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeName),"GetTakeName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeNumStretchMarkers) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeNumStretchMarkers),"GetTakeNumStretchMarkers"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeStretchMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeStretchMarker),"GetTakeStretchMarker"},
      #endif
      #if defined(REAPERAPI_WANT_GetTakeStretchMarkerSlope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTakeStretchMarkerSlope),"GetTakeStretchMarkerSlope"},
      #endif
      #if defined(REAPERAPI_WANT_GetTCPFXParm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTCPFXParm),"GetTCPFXParm"},
      #endif
      #if defined(REAPERAPI_WANT_GetTempoMatchPlayRate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTempoMatchPlayRate),"GetTempoMatchPlayRate"},
      #endif
      #if defined(REAPERAPI_WANT_GetTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTempoTimeSigMarker),"GetTempoTimeSigMarker"},
      #endif
      #if defined(REAPERAPI_WANT_GetThemeColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetThemeColor),"GetThemeColor"},
      #endif
      #if defined(REAPERAPI_WANT_GetThingFromPoint) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetThingFromPoint),"GetThingFromPoint"},
      #endif
      #if defined(REAPERAPI_WANT_GetToggleCommandState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetToggleCommandState),"GetToggleCommandState"},
      #endif
      #if defined(REAPERAPI_WANT_GetToggleCommandState2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetToggleCommandState2),"GetToggleCommandState2"},
      #endif
      #if defined(REAPERAPI_WANT_GetToggleCommandStateEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetToggleCommandStateEx),"GetToggleCommandStateEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetToggleCommandStateThroughHooks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetToggleCommandStateThroughHooks),"GetToggleCommandStateThroughHooks"},
      #endif
      #if defined(REAPERAPI_WANT_GetTooltipWindow) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTooltipWindow),"GetTooltipWindow"},
      #endif
      #if defined(REAPERAPI_WANT_GetTouchedOrFocusedFX) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTouchedOrFocusedFX),"GetTouchedOrFocusedFX"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrack),"GetTrack"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackAutomationMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackAutomationMode),"GetTrackAutomationMode"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackColor),"GetTrackColor"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackDepth) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackDepth),"GetTrackDepth"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackEnvelope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackEnvelope),"GetTrackEnvelope"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackEnvelopeByChunkName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackEnvelopeByChunkName),"GetTrackEnvelopeByChunkName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackEnvelopeByName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackEnvelopeByName),"GetTrackEnvelopeByName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackFromPoint) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackFromPoint),"GetTrackFromPoint"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackGUID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackGUID),"GetTrackGUID"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackInfo),"GetTrackInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackMediaItem),"GetTrackMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackMIDILyrics) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackMIDILyrics),"GetTrackMIDILyrics"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackMIDINoteName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackMIDINoteName),"GetTrackMIDINoteName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackMIDINoteNameEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackMIDINoteNameEx),"GetTrackMIDINoteNameEx"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackMIDINoteRange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackMIDINoteRange),"GetTrackMIDINoteRange"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackName),"GetTrackName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackMarkerLaneInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackMarkerLaneInfo),"GetTrackMarkerLaneInfo"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackNumMediaItems) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackNumMediaItems),"GetTrackNumMediaItems"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackNumSends) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackNumSends),"GetTrackNumSends"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackReceiveName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackReceiveName),"GetTrackReceiveName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackReceiveUIMute) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackReceiveUIMute),"GetTrackReceiveUIMute"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackReceiveUIVolPan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackReceiveUIVolPan),"GetTrackReceiveUIVolPan"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackSendInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackSendInfo_Value),"GetTrackSendInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackSendName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackSendName),"GetTrackSendName"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackSendUIMute) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackSendUIMute),"GetTrackSendUIMute"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackSendUIVolPan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackSendUIVolPan),"GetTrackSendUIVolPan"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackState),"GetTrackState"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackStateChunk) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackStateChunk),"GetTrackStateChunk"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackUIMute) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackUIMute),"GetTrackUIMute"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackUIPan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackUIPan),"GetTrackUIPan"},
      #endif
      #if defined(REAPERAPI_WANT_GetTrackUIVolPan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetTrackUIVolPan),"GetTrackUIVolPan"},
      #endif
      #if defined(REAPERAPI_WANT_GetUnderrunTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetUnderrunTime),"GetUnderrunTime"},
      #endif
      #if defined(REAPERAPI_WANT_GetUserFileNameForRead) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetUserFileNameForRead),"GetUserFileNameForRead"},
      #endif
      #if defined(REAPERAPI_WANT_GetUserInputs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GetUserInputs),"GetUserInputs"},
      #endif
      #if defined(REAPERAPI_WANT_GoToMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GoToMarker),"GoToMarker"},
      #endif
      #if defined(REAPERAPI_WANT_GoToRegion) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GoToRegion),"GoToRegion"},
      #endif
      #if defined(REAPERAPI_WANT_GR_SelectColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GR_SelectColor),"GR_SelectColor"},
      #endif
      #if defined(REAPERAPI_WANT_GSC_mainwnd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(GSC_mainwnd),"GSC_mainwnd"},
      #endif
      #if defined(REAPERAPI_WANT_guidToString) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(guidToString),"guidToString"},
      #endif
      #if defined(REAPERAPI_WANT_HasExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(HasExtState),"HasExtState"},
      #endif
      #if defined(REAPERAPI_WANT_HasTrackMIDIPrograms) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(HasTrackMIDIPrograms),"HasTrackMIDIPrograms"},
      #endif
      #if defined(REAPERAPI_WANT_HasTrackMIDIProgramsEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(HasTrackMIDIProgramsEx),"HasTrackMIDIProgramsEx"},
      #endif
      #if defined(REAPERAPI_WANT_Help_Set) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Help_Set),"Help_Set"},
      #endif
      #if defined(REAPERAPI_WANT_HiresPeaksFromSource) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(HiresPeaksFromSource),"HiresPeaksFromSource"},
      #endif
      #if defined(REAPERAPI_WANT_image_resolve_fn) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(image_resolve_fn),"image_resolve_fn"},
      #endif
      #if defined(REAPERAPI_WANT_InsertAutomationItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertAutomationItem),"InsertAutomationItem"},
      #endif
      #if defined(REAPERAPI_WANT_InsertEnvelopePoint) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertEnvelopePoint),"InsertEnvelopePoint"},
      #endif
      #if defined(REAPERAPI_WANT_InsertEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertEnvelopePointEx),"InsertEnvelopePointEx"},
      #endif
      #if defined(REAPERAPI_WANT_InsertMedia) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertMedia),"InsertMedia"},
      #endif
      #if defined(REAPERAPI_WANT_InsertMediaSection) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertMediaSection),"InsertMediaSection"},
      #endif
      #if defined(REAPERAPI_WANT_InsertTrackAtIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertTrackAtIndex),"InsertTrackAtIndex"},
      #endif
      #if defined(REAPERAPI_WANT_InsertTrackInProject) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(InsertTrackInProject),"InsertTrackInProject"},
      #endif
      #if defined(REAPERAPI_WANT_IsInRealTimeAudio) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsInRealTimeAudio),"IsInRealTimeAudio"},
      #endif
      #if defined(REAPERAPI_WANT_IsItemTakeActiveForPlayback) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsItemTakeActiveForPlayback),"IsItemTakeActiveForPlayback"},
      #endif
      #if defined(REAPERAPI_WANT_IsMediaExtension) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsMediaExtension),"IsMediaExtension"},
      #endif
      #if defined(REAPERAPI_WANT_IsMediaItemSelected) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsMediaItemSelected),"IsMediaItemSelected"},
      #endif
      #if defined(REAPERAPI_WANT_IsProjectDirty) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsProjectDirty),"IsProjectDirty"},
      #endif
      #if defined(REAPERAPI_WANT_IsREAPER) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsREAPER),"IsREAPER"},
      #endif
      #if defined(REAPERAPI_WANT_IsTrackSelected) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsTrackSelected),"IsTrackSelected"},
      #endif
      #if defined(REAPERAPI_WANT_IsTrackVisible) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsTrackVisible),"IsTrackVisible"},
      #endif
      #if defined(REAPERAPI_WANT_IsWindowTextField) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(IsWindowTextField),"IsWindowTextField"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_create) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_create),"joystick_create"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_destroy) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_destroy),"joystick_destroy"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_enum) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_enum),"joystick_enum"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_getaxis) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_getaxis),"joystick_getaxis"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_getbuttonmask) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_getbuttonmask),"joystick_getbuttonmask"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_getinfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_getinfo),"joystick_getinfo"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_getpov) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_getpov),"joystick_getpov"},
      #endif
      #if defined(REAPERAPI_WANT_joystick_update) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(joystick_update),"joystick_update"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_enumerateActions) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_enumerateActions),"kbd_enumerateActions"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_formatKeyName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_formatKeyName),"kbd_formatKeyName"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_getCommandName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_getCommandName),"kbd_getCommandName"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_getTextFromCmd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_getTextFromCmd),"kbd_getTextFromCmd"},
      #endif
      #if defined(REAPERAPI_WANT_KBD_OnMainActionEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(KBD_OnMainActionEx),"KBD_OnMainActionEx"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_OnMidiEvent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_OnMidiEvent),"kbd_OnMidiEvent"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_OnMidiList) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_OnMidiList),"kbd_OnMidiList"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_ProcessActionsMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_ProcessActionsMenu),"kbd_ProcessActionsMenu"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_processMidiEventActionEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_processMidiEventActionEx),"kbd_processMidiEventActionEx"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_reprocessMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_reprocessMenu),"kbd_reprocessMenu"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_RunCommandThroughHooks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_RunCommandThroughHooks),"kbd_RunCommandThroughHooks"},
      #endif
      #if defined(REAPERAPI_WANT_kbd_translateAccelerator) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(kbd_translateAccelerator),"kbd_translateAccelerator"},
      #endif


    #ifndef REAPERAPI_NO_LICE
      #if defined(REAPERAPI_WANT_LICE__Destroy) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__Destroy),"LICE__Destroy"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__DestroyFont) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__DestroyFont),"LICE__DestroyFont"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__DrawText) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__DrawText),"LICE__DrawText"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__GetBits) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__GetBits),"LICE__GetBits"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__GetDC) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__GetDC),"LICE__GetDC"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__GetHeight) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__GetHeight),"LICE__GetHeight"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__GetRowSpan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__GetRowSpan),"LICE__GetRowSpan"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__GetWidth) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__GetWidth),"LICE__GetWidth"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__IsFlipped) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__IsFlipped),"LICE__IsFlipped"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__resize) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__resize),"LICE__resize"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__SetBkColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__SetBkColor),"LICE__SetBkColor"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__SetFromHFont) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__SetFromHFont),"LICE__SetFromHFont"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__SetTextColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__SetTextColor),"LICE__SetTextColor"},
      #endif
      #if defined(REAPERAPI_WANT_LICE__SetTextCombineMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE__SetTextCombineMode),"LICE__SetTextCombineMode"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Arc) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Arc),"LICE_Arc"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Blit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Blit),"LICE_Blit"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Blur) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Blur),"LICE_Blur"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_BorderedRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_BorderedRect),"LICE_BorderedRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Circle) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Circle),"LICE_Circle"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Clear) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Clear),"LICE_Clear"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_ClearRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_ClearRect),"LICE_ClearRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_ClipLine) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_ClipLine),"LICE_ClipLine"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_CombinePixels) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_CombinePixels),"LICE_CombinePixels"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Copy) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Copy),"LICE_Copy"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_CreateBitmap) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_CreateBitmap),"LICE_CreateBitmap"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_CreateFont) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_CreateFont),"LICE_CreateFont"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_DrawCBezier) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_DrawCBezier),"LICE_DrawCBezier"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_DrawChar) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_DrawChar),"LICE_DrawChar"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_DrawGlyph) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_DrawGlyph),"LICE_DrawGlyph"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_DrawRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_DrawRect),"LICE_DrawRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_DrawText) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_DrawText),"LICE_DrawText"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_FillCBezier) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_FillCBezier),"LICE_FillCBezier"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_FillCircle) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_FillCircle),"LICE_FillCircle"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_FillConvexPolygon) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_FillConvexPolygon),"LICE_FillConvexPolygon"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_FillRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_FillRect),"LICE_FillRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_FillTrapezoid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_FillTrapezoid),"LICE_FillTrapezoid"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_FillTriangle) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_FillTriangle),"LICE_FillTriangle"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_GetPixel) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_GetPixel),"LICE_GetPixel"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_GradRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_GradRect),"LICE_GradRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_Line) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_Line),"LICE_Line"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_LineInt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_LineInt),"LICE_LineInt"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_LoadPNG) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_LoadPNG),"LICE_LoadPNG"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_LoadPNGFromResource) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_LoadPNGFromResource),"LICE_LoadPNGFromResource"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_MeasureText) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_MeasureText),"LICE_MeasureText"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_MultiplyAddRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_MultiplyAddRect),"LICE_MultiplyAddRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_PutPixel) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_PutPixel),"LICE_PutPixel"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_RotatedBlit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_RotatedBlit),"LICE_RotatedBlit"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_RoundRect) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_RoundRect),"LICE_RoundRect"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_ScaledBlit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_ScaledBlit),"LICE_ScaledBlit"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_SimpleFill) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_SimpleFill),"LICE_SimpleFill"},
      #endif
      #if defined(REAPERAPI_WANT_LICE_ThickFLine) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LICE_ThickFLine),"LICE_ThickFLine"},
      #endif

    #endif // !REAPERAPI_NO_LICE

      #if defined(REAPERAPI_WANT_LocalizeString) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(LocalizeString),"LocalizeString"},
      #endif
      #if defined(REAPERAPI_WANT_Loop_OnArrow) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Loop_OnArrow),"Loop_OnArrow"},
      #endif
      #if defined(REAPERAPI_WANT_Main_OnCommand) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Main_OnCommand),"Main_OnCommand"},
      #endif
      #if defined(REAPERAPI_WANT_Main_OnCommandEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Main_OnCommandEx),"Main_OnCommandEx"},
      #endif
      #if defined(REAPERAPI_WANT_Main_openProject) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Main_openProject),"Main_openProject"},
      #endif
      #if defined(REAPERAPI_WANT_Main_SaveProject) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Main_SaveProject),"Main_SaveProject"},
      #endif
      #if defined(REAPERAPI_WANT_Main_SaveProjectEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Main_SaveProjectEx),"Main_SaveProjectEx"},
      #endif
      #if defined(REAPERAPI_WANT_Main_UpdateLoopInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Main_UpdateLoopInfo),"Main_UpdateLoopInfo"},
      #endif
      #if defined(REAPERAPI_WANT_MarkProjectDirty) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MarkProjectDirty),"MarkProjectDirty"},
      #endif
      #if defined(REAPERAPI_WANT_MarkTrackItemsDirty) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MarkTrackItemsDirty),"MarkTrackItemsDirty"},
      #endif
      #if defined(REAPERAPI_WANT_Master_GetPlayRate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Master_GetPlayRate),"Master_GetPlayRate"},
      #endif
      #if defined(REAPERAPI_WANT_Master_GetPlayRateAtTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Master_GetPlayRateAtTime),"Master_GetPlayRateAtTime"},
      #endif
      #if defined(REAPERAPI_WANT_Master_GetTempo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Master_GetTempo),"Master_GetTempo"},
      #endif
      #if defined(REAPERAPI_WANT_Master_NormalizePlayRate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Master_NormalizePlayRate),"Master_NormalizePlayRate"},
      #endif
      #if defined(REAPERAPI_WANT_Master_NormalizeTempo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Master_NormalizeTempo),"Master_NormalizeTempo"},
      #endif
      #if defined(REAPERAPI_WANT_MB) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MB),"MB"},
      #endif
      #if defined(REAPERAPI_WANT_MediaExplorerGetLastPlayedFileInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MediaExplorerGetLastPlayedFileInfo),"MediaExplorerGetLastPlayedFileInfo"},
      #endif
      #if defined(REAPERAPI_WANT_MediaItemDescendsFromTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MediaItemDescendsFromTrack),"MediaItemDescendsFromTrack"},
      #endif
      #if defined(REAPERAPI_WANT_Menu_GetHash) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Menu_GetHash),"Menu_GetHash"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_CountEvts) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_CountEvts),"MIDI_CountEvts"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_DeleteCC) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_DeleteCC),"MIDI_DeleteCC"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_DeleteEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_DeleteEvt),"MIDI_DeleteEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_DeleteNote) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_DeleteNote),"MIDI_DeleteNote"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_DeleteTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_DeleteTextSysexEvt),"MIDI_DeleteTextSysexEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_DisableSort) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_DisableSort),"MIDI_DisableSort"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_EnumSelCC) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_EnumSelCC),"MIDI_EnumSelCC"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_EnumSelEvts) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_EnumSelEvts),"MIDI_EnumSelEvts"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_EnumSelNotes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_EnumSelNotes),"MIDI_EnumSelNotes"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_EnumSelTextSysexEvts) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_EnumSelTextSysexEvts),"MIDI_EnumSelTextSysexEvts"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_eventlist_Create) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_eventlist_Create),"MIDI_eventlist_Create"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_eventlist_Destroy) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_eventlist_Destroy),"MIDI_eventlist_Destroy"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetAllEvts) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetAllEvts),"MIDI_GetAllEvts"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetCC) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetCC),"MIDI_GetCC"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetCCShape) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetCCShape),"MIDI_GetCCShape"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetEvt),"MIDI_GetEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetGrid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetGrid),"MIDI_GetGrid"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetHash) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetHash),"MIDI_GetHash"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetNote) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetNote),"MIDI_GetNote"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetPPQPos_EndOfMeasure) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetPPQPos_EndOfMeasure),"MIDI_GetPPQPos_EndOfMeasure"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetPPQPos_StartOfMeasure) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetPPQPos_StartOfMeasure),"MIDI_GetPPQPos_StartOfMeasure"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetPPQPosFromProjQN) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetPPQPosFromProjQN),"MIDI_GetPPQPosFromProjQN"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetPPQPosFromProjTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetPPQPosFromProjTime),"MIDI_GetPPQPosFromProjTime"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetProjQNFromPPQPos) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetProjQNFromPPQPos),"MIDI_GetProjQNFromPPQPos"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetProjTimeFromPPQPos) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetProjTimeFromPPQPos),"MIDI_GetProjTimeFromPPQPos"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetRecentInputEvent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetRecentInputEvent),"MIDI_GetRecentInputEvent"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetScale) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetScale),"MIDI_GetScale"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetTextSysexEvt),"MIDI_GetTextSysexEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_GetTrackHash) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_GetTrackHash),"MIDI_GetTrackHash"},
      #endif
      #if defined(REAPERAPI_WANT_midi_init) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(midi_init),"midi_init"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_InsertCC) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_InsertCC),"MIDI_InsertCC"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_InsertEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_InsertEvt),"MIDI_InsertEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_InsertNote) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_InsertNote),"MIDI_InsertNote"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_InsertTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_InsertTextSysexEvt),"MIDI_InsertTextSysexEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_RefreshEditors) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_RefreshEditors),"MIDI_RefreshEditors"},
      #endif
      #if defined(REAPERAPI_WANT_midi_reinit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(midi_reinit),"midi_reinit"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SelectAll) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SelectAll),"MIDI_SelectAll"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetAllEvts) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetAllEvts),"MIDI_SetAllEvts"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetCC) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetCC),"MIDI_SetCC"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetCCShape) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetCCShape),"MIDI_SetCCShape"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetEvt),"MIDI_SetEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetItemExtents) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetItemExtents),"MIDI_SetItemExtents"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetNote) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetNote),"MIDI_SetNote"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_SetTextSysexEvt) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_SetTextSysexEvt),"MIDI_SetTextSysexEvt"},
      #endif
      #if defined(REAPERAPI_WANT_MIDI_Sort) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDI_Sort),"MIDI_Sort"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_EnumTakes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_EnumTakes),"MIDIEditor_EnumTakes"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_GetActive) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_GetActive),"MIDIEditor_GetActive"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_GetMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_GetMode),"MIDIEditor_GetMode"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_GetSetting_int) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_GetSetting_int),"MIDIEditor_GetSetting_int"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_GetSetting_str) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_GetSetting_str),"MIDIEditor_GetSetting_str"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_GetTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_GetTake),"MIDIEditor_GetTake"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_LastFocused_OnCommand) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_LastFocused_OnCommand),"MIDIEditor_LastFocused_OnCommand"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_OnCommand) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_OnCommand),"MIDIEditor_OnCommand"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditor_SetSetting_int) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditor_SetSetting_int),"MIDIEditor_SetSetting_int"},
      #endif
      #if defined(REAPERAPI_WANT_MIDIEditorFlagsForTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MIDIEditorFlagsForTrack),"MIDIEditorFlagsForTrack"},
      #endif
      #if defined(REAPERAPI_WANT_mkpanstr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(mkpanstr),"mkpanstr"},
      #endif
      #if defined(REAPERAPI_WANT_mkvolpanstr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(mkvolpanstr),"mkvolpanstr"},
      #endif
      #if defined(REAPERAPI_WANT_mkvolstr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(mkvolstr),"mkvolstr"},
      #endif
      #if defined(REAPERAPI_WANT_MoveEditCursor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MoveEditCursor),"MoveEditCursor"},
      #endif
      #if defined(REAPERAPI_WANT_MoveMediaItemToTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MoveMediaItemToTrack),"MoveMediaItemToTrack"},
      #endif
      #if defined(REAPERAPI_WANT_MuteAllTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(MuteAllTracks),"MuteAllTracks"},
      #endif
      #if defined(REAPERAPI_WANT_my_getViewport) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(my_getViewport),"my_getViewport"},
      #endif
      #if defined(REAPERAPI_WANT_NamedCommandLookup) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(NamedCommandLookup),"NamedCommandLookup"},
      #endif
      #if defined(REAPERAPI_WANT_OnPauseButton) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OnPauseButton),"OnPauseButton"},
      #endif
      #if defined(REAPERAPI_WANT_OnPauseButtonEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OnPauseButtonEx),"OnPauseButtonEx"},
      #endif
      #if defined(REAPERAPI_WANT_OnPlayButton) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OnPlayButton),"OnPlayButton"},
      #endif
      #if defined(REAPERAPI_WANT_OnPlayButtonEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OnPlayButtonEx),"OnPlayButtonEx"},
      #endif
      #if defined(REAPERAPI_WANT_OnStopButton) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OnStopButton),"OnStopButton"},
      #endif
      #if defined(REAPERAPI_WANT_OnStopButtonEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OnStopButtonEx),"OnStopButtonEx"},
      #endif
      #if defined(REAPERAPI_WANT_OpenColorThemeFile) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OpenColorThemeFile),"OpenColorThemeFile"},
      #endif
      #if defined(REAPERAPI_WANT_OpenMediaExplorer) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OpenMediaExplorer),"OpenMediaExplorer"},
      #endif
      #if defined(REAPERAPI_WANT_OscLocalMessageToHost) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(OscLocalMessageToHost),"OscLocalMessageToHost"},
      #endif
      #if defined(REAPERAPI_WANT_parse_timestr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(parse_timestr),"parse_timestr"},
      #endif
      #if defined(REAPERAPI_WANT_parse_timestr_len) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(parse_timestr_len),"parse_timestr_len"},
      #endif
      #if defined(REAPERAPI_WANT_parse_timestr_pos) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(parse_timestr_pos),"parse_timestr_pos"},
      #endif
      #if defined(REAPERAPI_WANT_parsepanstr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(parsepanstr),"parsepanstr"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_Create) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_Create),"PCM_Sink_Create"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_CreateEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_CreateEx),"PCM_Sink_CreateEx"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_CreateMIDIFile) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_CreateMIDIFile),"PCM_Sink_CreateMIDIFile"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_CreateMIDIFileEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_CreateMIDIFileEx),"PCM_Sink_CreateMIDIFileEx"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_Enum) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_Enum),"PCM_Sink_Enum"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_GetExtension) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_GetExtension),"PCM_Sink_GetExtension"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Sink_ShowConfig) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Sink_ShowConfig),"PCM_Sink_ShowConfig"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_BuildPeaks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_BuildPeaks),"PCM_Source_BuildPeaks"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_CreateFromFile) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_CreateFromFile),"PCM_Source_CreateFromFile"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_CreateFromFileEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_CreateFromFileEx),"PCM_Source_CreateFromFileEx"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_CreateFromSimple) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_CreateFromSimple),"PCM_Source_CreateFromSimple"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_CreateFromType) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_CreateFromType),"PCM_Source_CreateFromType"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_Destroy) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_Destroy),"PCM_Source_Destroy"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_GetPeaks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_GetPeaks),"PCM_Source_GetPeaks"},
      #endif
      #if defined(REAPERAPI_WANT_PCM_Source_GetSectionInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PCM_Source_GetSectionInfo),"PCM_Source_GetSectionInfo"},
      #endif
      #if defined(REAPERAPI_WANT_PeakBuild_Create) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PeakBuild_Create),"PeakBuild_Create"},
      #endif
      #if defined(REAPERAPI_WANT_PeakBuild_CreateEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PeakBuild_CreateEx),"PeakBuild_CreateEx"},
      #endif
      #if defined(REAPERAPI_WANT_PeakGet_Create) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PeakGet_Create),"PeakGet_Create"},
      #endif
      #if defined(REAPERAPI_WANT_PitchShiftSubModeMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PitchShiftSubModeMenu),"PitchShiftSubModeMenu"},
      #endif
      #if defined(REAPERAPI_WANT_PlayPreview) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PlayPreview),"PlayPreview"},
      #endif
      #if defined(REAPERAPI_WANT_PlayPreviewEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PlayPreviewEx),"PlayPreviewEx"},
      #endif
      #if defined(REAPERAPI_WANT_PlayTrackPreview) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PlayTrackPreview),"PlayTrackPreview"},
      #endif
      #if defined(REAPERAPI_WANT_PlayTrackPreview2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PlayTrackPreview2),"PlayTrackPreview2"},
      #endif
      #if defined(REAPERAPI_WANT_PlayTrackPreview2Ex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PlayTrackPreview2Ex),"PlayTrackPreview2Ex"},
      #endif
      #if defined(REAPERAPI_WANT_plugin_getapi) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(plugin_getapi),"plugin_getapi"},
      #endif
      #if defined(REAPERAPI_WANT_plugin_getFilterList) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(plugin_getFilterList),"plugin_getFilterList"},
      #endif
      #if defined(REAPERAPI_WANT_plugin_getImportableProjectFilterList) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(plugin_getImportableProjectFilterList),"plugin_getImportableProjectFilterList"},
      #endif
      #if defined(REAPERAPI_WANT_plugin_register) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(plugin_register),"plugin_register"},
      #endif
      #if defined(REAPERAPI_WANT_PluginWantsAlwaysRunFx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PluginWantsAlwaysRunFx),"PluginWantsAlwaysRunFx"},
      #endif
      #if defined(REAPERAPI_WANT_PreventUIRefresh) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PreventUIRefresh),"PreventUIRefresh"},
      #endif
      #if defined(REAPERAPI_WANT_Project_ExportOTIO) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Project_ExportOTIO),"Project_ExportOTIO"},
      #endif
      #if defined(REAPERAPI_WANT_Project_ImportOTIO) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Project_ImportOTIO),"Project_ImportOTIO"},
      #endif
      #if defined(REAPERAPI_WANT_projectconfig_var_addr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(projectconfig_var_addr),"projectconfig_var_addr"},
      #endif
      #if defined(REAPERAPI_WANT_projectconfig_var_getoffs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(projectconfig_var_getoffs),"projectconfig_var_getoffs"},
      #endif
      #if defined(REAPERAPI_WANT_PromptForAction) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(PromptForAction),"PromptForAction"},
      #endif
      #if defined(REAPERAPI_WANT_realloc_cmd_clear) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(realloc_cmd_clear),"realloc_cmd_clear"},
      #endif
      #if defined(REAPERAPI_WANT_realloc_cmd_ptr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(realloc_cmd_ptr),"realloc_cmd_ptr"},
      #endif
      #if defined(REAPERAPI_WANT_realloc_cmd_register_buf) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(realloc_cmd_register_buf),"realloc_cmd_register_buf"},
      #endif
      #if defined(REAPERAPI_WANT_ReaperGetPitchShiftAPI) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ReaperGetPitchShiftAPI),"ReaperGetPitchShiftAPI"},
      #endif
      #if defined(REAPERAPI_WANT_ReaScriptError) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ReaScriptError),"ReaScriptError"},
      #endif
      #if defined(REAPERAPI_WANT_RecursiveCreateDirectory) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(RecursiveCreateDirectory),"RecursiveCreateDirectory"},
      #endif
      #if defined(REAPERAPI_WANT_reduce_open_files) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(reduce_open_files),"reduce_open_files"},
      #endif
      #if defined(REAPERAPI_WANT_RefreshToolbar) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(RefreshToolbar),"RefreshToolbar"},
      #endif
      #if defined(REAPERAPI_WANT_RefreshToolbar2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(RefreshToolbar2),"RefreshToolbar2"},
      #endif
      #if defined(REAPERAPI_WANT_relative_fn) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(relative_fn),"relative_fn"},
      #endif
      #if defined(REAPERAPI_WANT_RemoveTrackSend) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(RemoveTrackSend),"RemoveTrackSend"},
      #endif
      #if defined(REAPERAPI_WANT_RenderFileSection) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(RenderFileSection),"RenderFileSection"},
      #endif
      #if defined(REAPERAPI_WANT_ReorderSelectedTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ReorderSelectedTracks),"ReorderSelectedTracks"},
      #endif
      #if defined(REAPERAPI_WANT_Resample_EnumModes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Resample_EnumModes),"Resample_EnumModes"},
      #endif
      #if defined(REAPERAPI_WANT_Resampler_Create) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Resampler_Create),"Resampler_Create"},
      #endif
      #if defined(REAPERAPI_WANT_resolve_fn) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(resolve_fn),"resolve_fn"},
      #endif
      #if defined(REAPERAPI_WANT_resolve_fn2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(resolve_fn2),"resolve_fn2"},
      #endif
      #if defined(REAPERAPI_WANT_ResolveRenderPattern) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ResolveRenderPattern),"ResolveRenderPattern"},
      #endif
      #if defined(REAPERAPI_WANT_ResolveWildcards) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ResolveWildcards),"ResolveWildcards"},
      #endif
      #if defined(REAPERAPI_WANT_ReverseNamedCommandLookup) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ReverseNamedCommandLookup),"ReverseNamedCommandLookup"},
      #endif
      #if defined(REAPERAPI_WANT_ScaleFromEnvelopeMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ScaleFromEnvelopeMode),"ScaleFromEnvelopeMode"},
      #endif
      #if defined(REAPERAPI_WANT_ScaleToEnvelopeMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ScaleToEnvelopeMode),"ScaleToEnvelopeMode"},
      #endif
      #if defined(REAPERAPI_WANT_screenset_register) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(screenset_register),"screenset_register"},
      #endif
      #if defined(REAPERAPI_WANT_screenset_registerNew) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(screenset_registerNew),"screenset_registerNew"},
      #endif
      #if defined(REAPERAPI_WANT_screenset_unregister) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(screenset_unregister),"screenset_unregister"},
      #endif
      #if defined(REAPERAPI_WANT_screenset_unregisterByParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(screenset_unregisterByParam),"screenset_unregisterByParam"},
      #endif
      #if defined(REAPERAPI_WANT_screenset_updateLastFocus) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(screenset_updateLastFocus),"screenset_updateLastFocus"},
      #endif
      #if defined(REAPERAPI_WANT_SectionFromUniqueID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SectionFromUniqueID),"SectionFromUniqueID"},
      #endif
      #if defined(REAPERAPI_WANT_SelectAllMediaItems) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SelectAllMediaItems),"SelectAllMediaItems"},
      #endif
      #if defined(REAPERAPI_WANT_SelectProjectInstance) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SelectProjectInstance),"SelectProjectInstance"},
      #endif
      #if defined(REAPERAPI_WANT_SendLocalOscMessage) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SendLocalOscMessage),"SendLocalOscMessage"},
      #endif
      #if defined(REAPERAPI_WANT_SendMIDIMessageToHardware) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SendMIDIMessageToHardware),"SendMIDIMessageToHardware"},
      #endif
      #if defined(REAPERAPI_WANT_SetActiveTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetActiveTake),"SetActiveTake"},
      #endif
      #if defined(REAPERAPI_WANT_SetAutomationMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetAutomationMode),"SetAutomationMode"},
      #endif
      #if defined(REAPERAPI_WANT_SetCurrentBPM) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetCurrentBPM),"SetCurrentBPM"},
      #endif
      #if defined(REAPERAPI_WANT_SetCursorContext) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetCursorContext),"SetCursorContext"},
      #endif
      #if defined(REAPERAPI_WANT_SetEditCurPos) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetEditCurPos),"SetEditCurPos"},
      #endif
      #if defined(REAPERAPI_WANT_SetEditCurPos2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetEditCurPos2),"SetEditCurPos2"},
      #endif
      #if defined(REAPERAPI_WANT_SetEnvelopePoint) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetEnvelopePoint),"SetEnvelopePoint"},
      #endif
      #if defined(REAPERAPI_WANT_SetEnvelopePointEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetEnvelopePointEx),"SetEnvelopePointEx"},
      #endif
      #if defined(REAPERAPI_WANT_SetEnvelopeStateChunk) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetEnvelopeStateChunk),"SetEnvelopeStateChunk"},
      #endif
      #if defined(REAPERAPI_WANT_SetExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetExtState),"SetExtState"},
      #endif
      #if defined(REAPERAPI_WANT_SetGlobalAutomationOverride) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetGlobalAutomationOverride),"SetGlobalAutomationOverride"},
      #endif
      #if defined(REAPERAPI_WANT_SetItemStateChunk) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetItemStateChunk),"SetItemStateChunk"},
      #endif
      #if defined(REAPERAPI_WANT_SetMasterTrackVisibility) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMasterTrackVisibility),"SetMasterTrackVisibility"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaItemInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaItemInfo_Value),"SetMediaItemInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaItemLength) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaItemLength),"SetMediaItemLength"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaItemPosition) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaItemPosition),"SetMediaItemPosition"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaItemSelected) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaItemSelected),"SetMediaItemSelected"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaItemTake_Source) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaItemTake_Source),"SetMediaItemTake_Source"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaItemTakeInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaItemTakeInfo_Value),"SetMediaItemTakeInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_SetMediaTrackInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMediaTrackInfo_Value),"SetMediaTrackInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_SetMIDIEditorGrid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMIDIEditorGrid),"SetMIDIEditorGrid"},
      #endif
      #if defined(REAPERAPI_WANT_SetMIDI_LiveMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMIDI_LiveMode),"SetMIDI_LiveMode"},
      #endif
      #if defined(REAPERAPI_WANT_SetMixerScroll) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMixerScroll),"SetMixerScroll"},
      #endif
      #if defined(REAPERAPI_WANT_SetMouseModifier) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetMouseModifier),"SetMouseModifier"},
      #endif
      #if defined(REAPERAPI_WANT_SetOnlyTrackSelected) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetOnlyTrackSelected),"SetOnlyTrackSelected"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectGrid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectGrid),"SetProjectGrid"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectMarker),"SetProjectMarker"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectMarker2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectMarker2),"SetProjectMarker2"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectMarker3) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectMarker3),"SetProjectMarker3"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectMarker4) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectMarker4),"SetProjectMarker4"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectMarkerByIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectMarkerByIndex),"SetProjectMarkerByIndex"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjectMarkerByIndex2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjectMarkerByIndex2),"SetProjectMarkerByIndex2"},
      #endif
      #if defined(REAPERAPI_WANT_SetProjExtState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetProjExtState),"SetProjExtState"},
      #endif
      #if defined(REAPERAPI_WANT_SetRegionRenderMatrix) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetRegionRenderMatrix),"SetRegionRenderMatrix"},
      #endif
      #if defined(REAPERAPI_WANT_SetRenderLastError) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetRenderLastError),"SetRenderLastError"},
      #endif
      #if defined(REAPERAPI_WANT_SetTakeMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTakeMarker),"SetTakeMarker"},
      #endif
      #if defined(REAPERAPI_WANT_SetTakeStretchMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTakeStretchMarker),"SetTakeStretchMarker"},
      #endif
      #if defined(REAPERAPI_WANT_SetTakeStretchMarkerSlope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTakeStretchMarkerSlope),"SetTakeStretchMarkerSlope"},
      #endif
      #if defined(REAPERAPI_WANT_SetTempoTimeSigMarker) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTempoTimeSigMarker),"SetTempoTimeSigMarker"},
      #endif
      #if defined(REAPERAPI_WANT_SetThemeColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetThemeColor),"SetThemeColor"},
      #endif
      #if defined(REAPERAPI_WANT_SetToggleCommandState) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetToggleCommandState),"SetToggleCommandState"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackAutomationMode) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackAutomationMode),"SetTrackAutomationMode"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackColor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackColor),"SetTrackColor"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackMarkerLaneInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackMarkerLaneInfo),"SetTrackMarkerLaneInfo"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackMIDILyrics) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackMIDILyrics),"SetTrackMIDILyrics"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackMIDINoteName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackMIDINoteName),"SetTrackMIDINoteName"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackMIDINoteNameEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackMIDINoteNameEx),"SetTrackMIDINoteNameEx"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackSelected) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackSelected),"SetTrackSelected"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackSendInfo_Value) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackSendInfo_Value),"SetTrackSendInfo_Value"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackSendUIPan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackSendUIPan),"SetTrackSendUIPan"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackSendUIVol) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackSendUIVol),"SetTrackSendUIVol"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackStateChunk) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackStateChunk),"SetTrackStateChunk"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIInputMonitor) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIInputMonitor),"SetTrackUIInputMonitor"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIMute) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIMute),"SetTrackUIMute"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIPan) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIPan),"SetTrackUIPan"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIPolarity) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIPolarity),"SetTrackUIPolarity"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIRecArm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIRecArm),"SetTrackUIRecArm"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUISolo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUISolo),"SetTrackUISolo"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIVolume) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIVolume),"SetTrackUIVolume"},
      #endif
      #if defined(REAPERAPI_WANT_SetTrackUIWidth) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SetTrackUIWidth),"SetTrackUIWidth"},
      #endif
      #if defined(REAPERAPI_WANT_ShowActionList) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ShowActionList),"ShowActionList"},
      #endif
      #if defined(REAPERAPI_WANT_ShowConsoleMsg) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ShowConsoleMsg),"ShowConsoleMsg"},
      #endif
      #if defined(REAPERAPI_WANT_ShowMessageBox) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ShowMessageBox),"ShowMessageBox"},
      #endif
      #if defined(REAPERAPI_WANT_ShowPopupMenu) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ShowPopupMenu),"ShowPopupMenu"},
      #endif
      #if defined(REAPERAPI_WANT_SLIDER2DB) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SLIDER2DB),"SLIDER2DB"},
      #endif
      #if defined(REAPERAPI_WANT_SnapToGrid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SnapToGrid),"SnapToGrid"},
      #endif
      #if defined(REAPERAPI_WANT_SoloAllTracks) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SoloAllTracks),"SoloAllTracks"},
      #endif
      #if defined(REAPERAPI_WANT_Splash_GetWnd) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Splash_GetWnd),"Splash_GetWnd"},
      #endif
      #if defined(REAPERAPI_WANT_SplitMediaItem) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SplitMediaItem),"SplitMediaItem"},
      #endif
      #if defined(REAPERAPI_WANT_StopPreview) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(StopPreview),"StopPreview"},
      #endif
      #if defined(REAPERAPI_WANT_StopTrackPreview) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(StopTrackPreview),"StopTrackPreview"},
      #endif
      #if defined(REAPERAPI_WANT_StopTrackPreview2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(StopTrackPreview2),"StopTrackPreview2"},
      #endif
      #if defined(REAPERAPI_WANT_stream_open) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(stream_open),"stream_open"},
      #endif
      #if defined(REAPERAPI_WANT_stream_send) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(stream_send),"stream_send"},
      #endif
      #if defined(REAPERAPI_WANT_stream_receive) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(stream_receive),"stream_receive"},
      #endif
      #if defined(REAPERAPI_WANT_stringToGuid) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(stringToGuid),"stringToGuid"},
      #endif
      #if defined(REAPERAPI_WANT_StuffMIDIMessage) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(StuffMIDIMessage),"StuffMIDIMessage"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_AddByName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_AddByName),"TakeFX_AddByName"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_CopyToTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_CopyToTake),"TakeFX_CopyToTake"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_CopyToTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_CopyToTrack),"TakeFX_CopyToTrack"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_Delete) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_Delete),"TakeFX_Delete"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_EndParamEdit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_EndParamEdit),"TakeFX_EndParamEdit"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_FormatParamValue) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_FormatParamValue),"TakeFX_FormatParamValue"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_FormatParamValueNormalized) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_FormatParamValueNormalized),"TakeFX_FormatParamValueNormalized"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetChainVisible) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetChainVisible),"TakeFX_GetChainVisible"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetCount) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetCount),"TakeFX_GetCount"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetEnabled) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetEnabled),"TakeFX_GetEnabled"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetEnvelope) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetEnvelope),"TakeFX_GetEnvelope"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetFloatingWindow) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetFloatingWindow),"TakeFX_GetFloatingWindow"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetFormattedParamValue) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetFormattedParamValue),"TakeFX_GetFormattedParamValue"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetFXGUID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetFXGUID),"TakeFX_GetFXGUID"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetFXName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetFXName),"TakeFX_GetFXName"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetIOSize) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetIOSize),"TakeFX_GetIOSize"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetNamedConfigParm),"TakeFX_GetNamedConfigParm"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetNumParams) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetNumParams),"TakeFX_GetNumParams"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetOffline) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetOffline),"TakeFX_GetOffline"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetOpen) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetOpen),"TakeFX_GetOpen"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParam),"TakeFX_GetParam"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParameterStepSizes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParameterStepSizes),"TakeFX_GetParameterStepSizes"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParamEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParamEx),"TakeFX_GetParamEx"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParamFromIdent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParamFromIdent),"TakeFX_GetParamFromIdent"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParamIdent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParamIdent),"TakeFX_GetParamIdent"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParamName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParamName),"TakeFX_GetParamName"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetParamNormalized) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetParamNormalized),"TakeFX_GetParamNormalized"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetPinMappings) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetPinMappings),"TakeFX_GetPinMappings"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetPreset) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetPreset),"TakeFX_GetPreset"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetPresetIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetPresetIndex),"TakeFX_GetPresetIndex"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_GetUserPresetFilename) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_GetUserPresetFilename),"TakeFX_GetUserPresetFilename"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_NavigatePresets) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_NavigatePresets),"TakeFX_NavigatePresets"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetEnabled) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetEnabled),"TakeFX_SetEnabled"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetNamedConfigParm),"TakeFX_SetNamedConfigParm"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetOffline) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetOffline),"TakeFX_SetOffline"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetOpen) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetOpen),"TakeFX_SetOpen"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetParam),"TakeFX_SetParam"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetParamNormalized) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetParamNormalized),"TakeFX_SetParamNormalized"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetPinMappings) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetPinMappings),"TakeFX_SetPinMappings"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetPreset) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetPreset),"TakeFX_SetPreset"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_SetPresetByIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_SetPresetByIndex),"TakeFX_SetPresetByIndex"},
      #endif
      #if defined(REAPERAPI_WANT_TakeFX_Show) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeFX_Show),"TakeFX_Show"},
      #endif
      #if defined(REAPERAPI_WANT_TakeIsMIDI) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TakeIsMIDI),"TakeIsMIDI"},
      #endif
      #if defined(REAPERAPI_WANT_ThemeLayout_GetLayout) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ThemeLayout_GetLayout),"ThemeLayout_GetLayout"},
      #endif
      #if defined(REAPERAPI_WANT_ThemeLayout_GetParameter) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ThemeLayout_GetParameter),"ThemeLayout_GetParameter"},
      #endif
      #if defined(REAPERAPI_WANT_ThemeLayout_RefreshAll) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ThemeLayout_RefreshAll),"ThemeLayout_RefreshAll"},
      #endif
      #if defined(REAPERAPI_WANT_ThemeLayout_SetLayout) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ThemeLayout_SetLayout),"ThemeLayout_SetLayout"},
      #endif
      #if defined(REAPERAPI_WANT_ThemeLayout_SetParameter) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ThemeLayout_SetParameter),"ThemeLayout_SetParameter"},
      #endif
      #if defined(REAPERAPI_WANT_time_precise) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(time_precise),"time_precise"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap2_beatsToTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap2_beatsToTime),"TimeMap2_beatsToTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap2_GetDividedBpmAtTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap2_GetDividedBpmAtTime),"TimeMap2_GetDividedBpmAtTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap2_GetNextChangeTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap2_GetNextChangeTime),"TimeMap2_GetNextChangeTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap2_QNToTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap2_QNToTime),"TimeMap2_QNToTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap2_timeToBeats) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap2_timeToBeats),"TimeMap2_timeToBeats"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap2_timeToQN) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap2_timeToQN),"TimeMap2_timeToQN"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_curFrameRate) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_curFrameRate),"TimeMap_curFrameRate"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_GetDividedBpmAtTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_GetDividedBpmAtTime),"TimeMap_GetDividedBpmAtTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_GetMeasureInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_GetMeasureInfo),"TimeMap_GetMeasureInfo"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_GetMetronomePattern) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_GetMetronomePattern),"TimeMap_GetMetronomePattern"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_GetTimeSigAtTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_GetTimeSigAtTime),"TimeMap_GetTimeSigAtTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_QNToMeasures) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_QNToMeasures),"TimeMap_QNToMeasures"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_QNToTime) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_QNToTime),"TimeMap_QNToTime"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_QNToTime_abs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_QNToTime_abs),"TimeMap_QNToTime_abs"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_timeToQN) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_timeToQN),"TimeMap_timeToQN"},
      #endif
      #if defined(REAPERAPI_WANT_TimeMap_timeToQN_abs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TimeMap_timeToQN_abs),"TimeMap_timeToQN_abs"},
      #endif
      #if defined(REAPERAPI_WANT_ToggleTrackSendUIMute) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ToggleTrackSendUIMute),"ToggleTrackSendUIMute"},
      #endif
      #if defined(REAPERAPI_WANT_Track_GetPeakHoldDB) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Track_GetPeakHoldDB),"Track_GetPeakHoldDB"},
      #endif
      #if defined(REAPERAPI_WANT_Track_GetPeakInfo) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Track_GetPeakInfo),"Track_GetPeakInfo"},
      #endif
      #if defined(REAPERAPI_WANT_TrackCtl_SetToolTip) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackCtl_SetToolTip),"TrackCtl_SetToolTip"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_AddByName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_AddByName),"TrackFX_AddByName"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_CopyToTake) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_CopyToTake),"TrackFX_CopyToTake"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_CopyToTrack) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_CopyToTrack),"TrackFX_CopyToTrack"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_Delete) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_Delete),"TrackFX_Delete"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_EndParamEdit) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_EndParamEdit),"TrackFX_EndParamEdit"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_FormatParamValue) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_FormatParamValue),"TrackFX_FormatParamValue"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_FormatParamValueNormalized) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_FormatParamValueNormalized),"TrackFX_FormatParamValueNormalized"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetByName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetByName),"TrackFX_GetByName"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetChainVisible) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetChainVisible),"TrackFX_GetChainVisible"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetCount) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetCount),"TrackFX_GetCount"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetEnabled) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetEnabled),"TrackFX_GetEnabled"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetEQ) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetEQ),"TrackFX_GetEQ"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetEQBandEnabled) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetEQBandEnabled),"TrackFX_GetEQBandEnabled"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetEQParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetEQParam),"TrackFX_GetEQParam"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetFloatingWindow) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetFloatingWindow),"TrackFX_GetFloatingWindow"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetFormattedParamValue) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetFormattedParamValue),"TrackFX_GetFormattedParamValue"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetFXGUID) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetFXGUID),"TrackFX_GetFXGUID"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetFXName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetFXName),"TrackFX_GetFXName"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetInstrument) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetInstrument),"TrackFX_GetInstrument"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetIOSize) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetIOSize),"TrackFX_GetIOSize"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetNamedConfigParm),"TrackFX_GetNamedConfigParm"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetNumParams) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetNumParams),"TrackFX_GetNumParams"},
      #endif
      #if defined(REAPERAPI_WANT_TrackMIDI_FX_AddByName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackMIDI_FX_AddByName),"TrackMIDI_FX_AddByName"},
      #endif
      #if defined(REAPERAPI_WANT_TrackMIDI_FX_GetNumParams) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackMIDI_FX_GetNumParams),"TrackMIDI_FX_GetNumParams"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetOffline) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetOffline),"TrackFX_GetOffline"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetOpen) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetOpen),"TrackFX_GetOpen"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParam),"TrackFX_GetParam"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParameterStepSizes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParameterStepSizes),"TrackFX_GetParameterStepSizes"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParamEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParamEx),"TrackFX_GetParamEx"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParamFromIdent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParamFromIdent),"TrackFX_GetParamFromIdent"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParamIdent) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParamIdent),"TrackFX_GetParamIdent"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParamName) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParamName),"TrackFX_GetParamName"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetParamNormalized) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetParamNormalized),"TrackFX_GetParamNormalized"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetPinMappings) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetPinMappings),"TrackFX_GetPinMappings"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetPreset) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetPreset),"TrackFX_GetPreset"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetPresetIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetPresetIndex),"TrackFX_GetPresetIndex"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetRecChainVisible) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetRecChainVisible),"TrackFX_GetRecChainVisible"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetRecCount) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetRecCount),"TrackFX_GetRecCount"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_GetUserPresetFilename) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_GetUserPresetFilename),"TrackFX_GetUserPresetFilename"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_NavigatePresets) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_NavigatePresets),"TrackFX_NavigatePresets"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetEnabled) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetEnabled),"TrackFX_SetEnabled"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetEQBandEnabled) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetEQBandEnabled),"TrackFX_SetEQBandEnabled"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetEQParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetEQParam),"TrackFX_SetEQParam"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetNamedConfigParm) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetNamedConfigParm),"TrackFX_SetNamedConfigParm"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetOffline) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetOffline),"TrackFX_SetOffline"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetOpen) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetOpen),"TrackFX_SetOpen"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetParam) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetParam),"TrackFX_SetParam"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetParamNormalized) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetParamNormalized),"TrackFX_SetParamNormalized"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetPinMappings) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetPinMappings),"TrackFX_SetPinMappings"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetPreset) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetPreset),"TrackFX_SetPreset"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_SetPresetByIndex) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_SetPresetByIndex),"TrackFX_SetPresetByIndex"},
      #endif
      #if defined(REAPERAPI_WANT_TrackFX_Show) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackFX_Show),"TrackFX_Show"},
      #endif
      #if defined(REAPERAPI_WANT_TrackList_AdjustWindows) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackList_AdjustWindows),"TrackList_AdjustWindows"},
      #endif
      #if defined(REAPERAPI_WANT_TrackList_UpdateAllExternalSurfaces) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(TrackList_UpdateAllExternalSurfaces),"TrackList_UpdateAllExternalSurfaces"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_BeginBlock) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_BeginBlock),"Undo_BeginBlock"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_BeginBlock2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_BeginBlock2),"Undo_BeginBlock2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_CanRedo2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_CanRedo2),"Undo_CanRedo2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_CanUndo2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_CanUndo2),"Undo_CanUndo2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_DoRedo2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_DoRedo2),"Undo_DoRedo2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_DoUndo2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_DoUndo2),"Undo_DoUndo2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_EndBlock) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_EndBlock),"Undo_EndBlock"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_EndBlock2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_EndBlock2),"Undo_EndBlock2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_OnStateChange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_OnStateChange),"Undo_OnStateChange"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_OnStateChange2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_OnStateChange2),"Undo_OnStateChange2"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_OnStateChange_Item) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_OnStateChange_Item),"Undo_OnStateChange_Item"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_OnStateChangeEx) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_OnStateChangeEx),"Undo_OnStateChangeEx"},
      #endif
      #if defined(REAPERAPI_WANT_Undo_OnStateChangeEx2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(Undo_OnStateChangeEx2),"Undo_OnStateChangeEx2"},
      #endif
      #if defined(REAPERAPI_WANT_RegisterTimecodeInput) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(RegisterTimecodeInput),"RegisterTimecodeInput"},
      #endif
      #if defined(REAPERAPI_WANT_SendTimecodeFrame) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(SendTimecodeFrame),"SendTimecodeFrame"},
      #endif
      #if defined(REAPERAPI_WANT_update_disk_counters) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(update_disk_counters),"update_disk_counters"},
      #endif
      #if defined(REAPERAPI_WANT_UpdateArrange) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(UpdateArrange),"UpdateArrange"},
      #endif
      #if defined(REAPERAPI_WANT_UpdateItemInProject) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(UpdateItemInProject),"UpdateItemInProject"},
      #endif
      #if defined(REAPERAPI_WANT_UpdateItemLanes) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(UpdateItemLanes),"UpdateItemLanes"},
      #endif
      #if defined(REAPERAPI_WANT_UpdateTimeline) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(UpdateTimeline),"UpdateTimeline"},
      #endif
      #if defined(REAPERAPI_WANT_ValidatePtr) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ValidatePtr),"ValidatePtr"},
      #endif
      #if defined(REAPERAPI_WANT_ValidatePtr2) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ValidatePtr2),"ValidatePtr2"},
      #endif
      #if defined(REAPERAPI_WANT_ViewPrefs) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(ViewPrefs),"ViewPrefs"},
      #endif
      #if defined(REAPERAPI_WANT_WDL_VirtualWnd_ScaledBlitBG) || !defined(REAPERAPI_MINIMAL)
        {(void**)&REAPERAPI_FUNCNAME(WDL_VirtualWnd_ScaledBlitBG),"WDL_VirtualWnd_ScaledBlitBG"},
      #endif
      {NULL, NULL}
    };
    int i,failcnt=0;
    for (i=0;table[i].dest; i++)
      failcnt += !(*table[i].dest = getAPI(table[i].name));
    return failcnt;
  }
#else//REAPERAPI_IMPLEMENT
  int REAPERAPI_LoadAPI(void *(*getAPI)(const char *));
#endif 
#endif // _REAPER_PLUGIN_FUNCTIONS_H_


<<<END_FILE sdk/reaper_plugin_functions.h>>>

<<<BEGIN_FILE sdk/reaper_plugin_fx_embed.h>>>
#ifndef _REAPER_PLUGIN_FX_EMBED_H_
#define _REAPER_PLUGIN_FX_EMBED_H_


/*
 * to support via VST2: canDo("hasCockosEmbeddedUI") should return 0xbeef0000
 * dispatcher will be called with opcode=effVendorSpecific, index=effEditDraw, value=parm2, ptr=(void*)(INT_PTR)parm3, opt=message (REAPER_FXEMBED_WM_*)
 *
 * to support via VST3: IEditController should support IReaperUIEmbedInterface, see reaper_vst3_interfaces.h
 *
 * to support via ARA2: the plug-in's ARA factory should expose IReaperARAEmbedInterface (defined below)
 *
 * to support via LV2: todo
 */

// these alias to win32's WM_*


#define REAPER_FXEMBED_WM_IS_SUPPORTED                 0x0000
/* return 1 if embedding is supported and available
 * return -1 if embedding is supported and unavailable
 * return 0 if embedding is not supported
*/

#define REAPER_FXEMBED_WM_CREATE                       0x0001 // called when embedding begins (return value ignored)
#define REAPER_FXEMBED_WM_DESTROY                      0x0002 // called when embedding ends (return value ignored)



typedef struct REAPER_FXEMBED_DrawInfo // alias of REAPER_inline_positioninfo
{
  int context;        // 0=unknown (v6.23 and earlier), 1=TCP, 2=MCP
  int dpi;            // 0=unknown (v6.23 and earlier), otherwise 24.8 fixed point (256=100%)
  int mousewheel_amt; // for REAPER_FXEMBED_WM_MOUSEWHEEL, 120 = step, typically
  double _res2;

  int width, height;
  int mouse_x, mouse_y;

  int flags; // REAPER_FXEMBED_DRAWINFO_FLAG_PAINT_OPTIONAL etc
  int _res3;

  void *spare[6];
} REAPER_FXEMBED_DrawInfo;

#define REAPER_FXEMBED_DRAWINFO_FLAG_PAINT_OPTIONAL 1
#define REAPER_FXEMBED_DRAWINFO_FLAG_IS_RETINA        0x00100 /* 7.36+/macOS, implies width/height, mouse_x/mouse_y are doubled vs screen coordinates */
#define REAPER_FXEMBED_DRAWINFO_FLAG_LBUTTON_CAPTURED 0x10000
#define REAPER_FXEMBED_DRAWINFO_FLAG_RBUTTON_CAPTURED 0x20000

#define REAPER_FXEMBED_WM_PAINT                        0x000F
/*
 * draw embedded UI.
 * parm2: REAPER_FXEMBED_IBitmap * to draw into. note
 * parm3: REAPER_FXEMBED_DrawInfo *
 *
 * if flags has REAPER_FXEMBED_DRAWINFO_FLAG_PAINT_OPTIONAL set, update is optional. if no change since last draw, return 0.
 * if flags has REAPER_FXEMBED_DRAWINFO_FLAG_LBUTTON_CAPTURED set, left mouse button is down and captured
 * if flags has REAPER_FXEMBED_DRAWINFO_FLAG_RBUTTON_CAPTURED set, right mouse button is down and captured
 *
 * HiDPI:
 * if REAPER_FXEMBED_IBitmap::Extended(REAPER_FXEMBED_EXT_GET_ADVISORY_SCALING,NULL) returns nonzero, then it is a 24.8 scalefactor for UI drawing
 * this is the same value as REAPER_FXEMBED_DrawInfo::dpi
 *
 * return 1 if drawing occurred, 0 otherwise.
 *
 */

#define REAPER_FXEMBED_WM_SETCURSOR                    0x0020 // parm3: REAPER_FXEMBED_DrawInfo*. set mouse cursor and return REAPER_FXEMBED_RETNOTIFY_HANDLED, or return 0.

#define REAPER_FXEMBED_WM_GETMINMAXINFO                0x0024
/*
 * get size hints. parm3 = (REAPER_FXEMBED_SizeHints*). return 1 if supported
 * note that these are just hints, the actual size may vary
 */
typedef struct REAPER_FXEMBED_SizeHints { // alias to MINMAXINFO
  int preferred_aspect; // 16.16 fixed point (65536 = 1:1, 32768 = 1:2, etc)
  int minimum_aspect;   // 16.16 fixed point

  // these are set by the host and can be used by the plug-in to make decisions:
  int flags; // (flags&15) is context: 0=unknown (REAPER v7.35 and earlier), 1=TCP, 2=MCP
  int dpi;  // DPI scaling - 0=unknown (REAPER v7.35 and earlier), otherwise 256=100%. this excludes any retina drawing

  int _res3, _res4;

  int min_width, min_height;
  int max_width, max_height;
} REAPER_FXEMBED_SizeHints;

/*
 * mouse messages
 * parm3 = (REAPER_FXEMBED_DrawInfo*)
 * capture is automatically set on mouse down, released on mouse up
 * when not captured, will always receive a mousemove when exiting the window
 */

#define REAPER_FXEMBED_WM_MOUSEMOVE                    0x0200
#define REAPER_FXEMBED_WM_LBUTTONDOWN                  0x0201
#define REAPER_FXEMBED_WM_LBUTTONUP                    0x0202
#define REAPER_FXEMBED_WM_LBUTTONDBLCLK                0x0203
#define REAPER_FXEMBED_WM_RBUTTONDOWN                  0x0204
#define REAPER_FXEMBED_WM_RBUTTONUP                    0x0205
#define REAPER_FXEMBED_WM_RBUTTONDBLCLK                0x0206
#define REAPER_FXEMBED_WM_MOUSEWHEEL                   0x020A


/* REAPER_FXEMBED_WM_SETCURSOR should return REAPER_FXEMBED_RETNOTIFY_HANDLED if a cursor was set
 */
#define REAPER_FXEMBED_RETNOTIFY_HANDLED    0x0000001

/* if the mouse messages return with REAPER_FXEMBED_RETNOTIFY_INVALIDATE set, a non-optional
 * redraw is initiated (generally sooner than the next timer-based redraw)
 */
#define REAPER_FXEMBED_RETNOTIFY_INVALIDATE 0x1000000

/*
 * bitmap interface
 * this is an alias of LICE_IBitmap etc from WDL/lice/lice.h
 *
 */
#define REAPER_FXEMBED_RGBA(r,g,b,a) (((b)&0xff)|(((g)&0xff)<<8)|(((r)&0xff)<<16)|(((a)&0xff)<<24))
#define REAPER_FXEMBED_GETB(v) ((v)&0xff)
#define REAPER_FXEMBED_GETG(v) (((v)>>8)&0xff)
#define REAPER_FXEMBED_GETR(v) (((v)>>16)&0xff)
#define REAPER_FXEMBED_GETA(v) (((v)>>24)&0xff)

#ifdef __cplusplus
class REAPER_FXEMBED_IBitmap // alias of LICE_IBitmap
{
public:
  virtual ~REAPER_FXEMBED_IBitmap() { }

  virtual unsigned int *getBits()=0;
  virtual int getWidth()=0;
  virtual int getHeight()=0;
  virtual int getRowSpan()=0; // includes any off-bitmap data. this is in sizeof(unsigned int) units, not bytes.
  virtual bool isFlipped() { return false;  }
  virtual bool resize(int w, int h)=0;

  virtual void *getDC() { return 0; } // do not use

  virtual INT_PTR Extended(int id, void* data) { return 0; }
};
#endif

#ifdef __cplusplus
// ARA2 embedding interface. ARA-capable plug-ins can query the host for this
// interface and send/receive REAPER_FXEMBED_WM_* messages just like VST3
// plug-ins do via IReaperUIEmbedInterface.
class IReaperARAEmbedInterface
{
public:
  virtual INT_PTR embed_message(int msg, INT_PTR parm2, INT_PTR parm3) = 0;
  // returns host-specific ARA context (for example an ARA::DocumentController*)
  virtual void* get_ara_host() = 0;
};
#endif

#define REAPER_FXEMBED_EXT_GET_ADVISORY_SCALING 0x2003 // data ignored, returns .8 fixed point. returns 0 if unscaled

#endif

<<<END_FILE sdk/reaper_plugin_fx_embed.h>>>

<<<BEGIN_FILE sdk/reaper_plugin.h>>>
/***************************************
*** REAPER Plug-in API
**
** Copyright (C) 2006-2015, Cockos Incorporated
**
**    This software is provided 'as-is', without any express or implied
**    warranty.  In no event will the authors be held liable for any damages
**    arising from the use of this software.
**
**    Permission is granted to anyone to use this software for any purpose,
**    including commercial applications, and to alter it and redistribute it
**    freely, subject to the following restrictions:
**
**    1. The origin of this software must not be misrepresented; you must not
**       claim that you wrote the original software. If you use this software
**       in a product, an acknowledgment in the product documentation would be
**       appreciated but is not required.
**    2. Altered source versions must be plainly marked as such, and must not be
**       misrepresented as being the original software.
**    3. This notice may not be removed or altered from any source distribution.
**
** Notes: the C++ interfaces assume a MSVC-compatible C++ ABI on Windows.
**       They can be built with MSVC or GCC/Clang targets such as MinGW.
**
*/

#ifndef _REAPER_PLUGIN_H_
#define _REAPER_PLUGIN_H_


#ifndef REASAMPLE_SIZE
#define REASAMPLE_SIZE 8 // if we change this it will break everything!
#endif

#if REASAMPLE_SIZE == 4
typedef float ReaSample;
#else
typedef double ReaSample;
#endif



#ifdef _WIN32
#include <windows.h>

#if defined(__GNUC__) || defined(__clang__)
#define REAPER_PLUGIN_DLL_EXPORT __attribute__((dllexport))
#else
#define REAPER_PLUGIN_DLL_EXPORT __declspec(dllexport)
#endif
#define REAPER_PLUGIN_HINSTANCE HINSTANCE

#else
#include "../WDL/swell/swell.h"
#include <pthread.h>

#define REAPER_PLUGIN_DLL_EXPORT __attribute__((visibility("default")))
#define REAPER_PLUGIN_HINSTANCE void *
#endif

#define REAPER_PLUGIN_ENTRYPOINT ReaperPluginEntry
#define REAPER_PLUGIN_ENTRYPOINT_NAME "ReaperPluginEntry"

#ifdef _MSC_VER
#define INT64 __int64
#define INT64_CONSTANT(x) (x##i64)
#else
#define INT64 long long
#define INT64_CONSTANT(x) (x##LL)
#endif

#ifdef __GNUC__
  #define REAPER_STATICFUNC __attribute__((unused)) static
#else
  #define REAPER_STATICFUNC static
#endif

/* 
** Endian-tools and defines (currently only __ppc__ and BIG_ENDIAN is recognized, for OS X -- all other platforms are assumed to be LE)
*/

REAPER_STATICFUNC int REAPER_BSWAPINT(int x)
{
  return ((((x))&0xff)<<24)|((((x))&0xff00)<<8)|((((x))&0xff0000)>>8)|(((x)>>24)&0xff);
}
REAPER_STATICFUNC void REAPER_BSWAPINTMEM(void *buf)
{
  char p[4],tmp;
  memcpy(p,buf,4);
  tmp=p[0]; p[0]=p[3]; p[3]=tmp;
  tmp=p[1]; p[1]=p[2]; p[2]=tmp;
  memcpy(buf,p,4);
}
REAPER_STATICFUNC void REAPER_BSWAPINTMEM8(void *buf)
{
  char p[8],tmp;
  memcpy(p,buf,8);
  tmp=p[0]; p[0]=p[7]; p[7]=tmp;
  tmp=p[1]; p[1]=p[6]; p[6]=tmp;
  tmp=p[2]; p[2]=p[5]; p[5]=tmp;
  tmp=p[3]; p[3]=p[4]; p[4]=tmp;
  memcpy(buf,p,8);
}

#if defined(__ppc__)

#define REAPER_BIG_ENDIAN
#define REAPER_FOURCC(d,c,b,a) (((unsigned int)(d)&0xff)|(((unsigned int)(c)&0xff)<<8)|(((unsigned int)(b)&0xff)<<16)|(((unsigned int)(a)&0xff)<<24))

#define REAPER_MAKEBEINT(x) (x)
#define REAPER_MAKEBEINTMEM(x)
#define REAPER_MAKEBEINTMEM8(x)
#define REAPER_MAKELEINT(x) REAPER_BSWAPINT(x)
#define REAPER_MAKELEINTMEM(x) REAPER_BSWAPINTMEM(x)
#define REAPER_MAKELEINTMEM8(x) REAPER_BSWAPINTMEM8(x)

#else

#define REAPER_FOURCC(a,b,c,d) (((unsigned int)(d)&0xff)|(((unsigned int)(c)&0xff)<<8)|(((unsigned int)(b)&0xff)<<16)|(((unsigned int)(a)&0xff)<<24))

#define REAPER_MAKELEINT(x) (x)
#define REAPER_MAKELEINTMEM(x)
#define REAPER_MAKELEINTMEM8(x)
#define REAPER_MAKEBEINT(x) REAPER_BSWAPINT(x)
#define REAPER_MAKEBEINTMEM(x) REAPER_BSWAPINTMEM(x)
#define REAPER_MAKEBEINTMEM8(x) REAPER_BSWAPINTMEM8(x)

#endif


#if 1
#define ADVANCE_TIME_BY_SAMPLES(t, spls, srate) ((t) += (spls)/(double)(srate))  // not completely accurate but still quite accurate.
#else
#define ADVANCE_TIME_BY_SAMPLES(t, spls, srate) ((t) = floor((t) * (srate) + spls + 0.5)/(double)(srate)) // good forever? may have other issues though if srate changes. disabled for now
#endif


//  REAPER extensions must support this entry function:
//  int ReaperPluginEntry(HINSTANCE hInstance, reaper_plugin_info_t *rec);
//  return 1 if you are compatible (anything else will result in plugin being unloaded)
//  if rec == NULL, then time to unload 
//
//  CLAP plugins can access the REAPER API via:
//  const void *clap_host.get_extension(const clap_host *host, "cockos.reaper_extension");
//  which returns a pointer to a reaper_plugin_info_t struct
//
//  CLAP plugins can also (v6.80+) get their context information by getFunc("clap_get_reaper_context")
//  void *(*clap_get_reaper_context)(const clap_host *host, int sel);
//  sel=1 for parent track if track FX
//  sel=2 for parent take if item FX
//  sel=3 for project
//  sel=4 for FxDsp
//  sel=5 for track channel count (INT_PTR)
//  sel=6 for index in chain

#define REAPER_PLUGIN_VERSION 0x20E

typedef struct reaper_plugin_info_t
{
  int caller_version; // REAPER_PLUGIN_VERSION

  HWND hwnd_main;

  /*
  Register() is the API that plug-ins register most things, be it keyboard shortcuts, project importers, etc.
  Register() is also available by using GetFunc("plugin_register")

  extensions typically register things on load of the DLL, for example:

     static pcmsink_register_t myreg={ ... };
     rec->Register("pcmsink",&myreg);

  on plug-in unload (or if the extension wishes to remove it for some reason):
     rec->Register("-pcmsink",&myreg);

  the "-" prefix is supported for most registration types.
  some types support the < prefix to register at the start of the list

  Registration types:

  API_*:
    if you have a function called myfunction(..) that you want to expose to other extensions, use:
      rec->Register("API_myfunction",funcaddress);
    other extensions then use GetFunc("myfunction") to get the function pointer.

  APIdef_*:
    To make a function registered with API_* available via ReaScript, follow the API_ registration with:
      double myfunction(char* str, int flag);
      const char *defstring = "double\0char*,int\0str,flag\0help text for myfunction"
      rec->Register("APIdef_myfunction",(void*)defstring);
    defstring is four null-separated fields: return type, argument types, argument names, and help.

  APIvararg_*:
    Used to set the reascript vararg function pointer for an API_:
       (void *) (void * (*faddr_vararg)(void **arglist, int numparms))

      numparms will typically be the full requested parameter count (including NULL pointers for any
      unspecified optional parameters)

      arguments and return values:
        integer as (void *)(INT_PTR) intval
        double as (void *)&some_double_in_memory
        pointers directly as pointers (can be NULL, especially if Optional)


  hookcommand:
    Registers a hook which runs prior to every action in the main section:
      bool runCommand(int command, int flag);
      rec->Register("hookcommand",runCommand);
    runCommand() should return true if it processed the command (prevent further hooks or the action from running)
    It is OK to call Main_OnCommand() from runCommand(), but it must check for and handle any recursion.

  hookpostcommand:
    Registers a hook which runs after each action in the main section:
      void postCommand(int command, int flag);
      rec->Register("hookpostcommand",postCommand);

  hookcommand2:
    Registers a hook which runs prior to every action triggered by a key/MIDI event:
      bool onAction(KbdSectionInfo *sec, int command, int val, int val2, int relmode, HWND hwnd);
      rec->Register("hookcommand2",hook); \
    onAction returns true if it processed the command (preventing further hooks or actions from running)
      val/val2 are used for actions triggered by MIDI/OSC/mousewheel
        - val = [0..127] and val2 = -1 for MIDI CC,
        - val2 >=0 for MIDI pitch or OSC with value = (val2|(val<<7))/16383.0
        - relmode absolute(0) or 1/2/3 for relative adjust modes

  hookpostcommand2:
     void (*hook)(KbdSectionInfo *section, int actionCommandID, int val, int valhw, int relmode, HWND hwnd, ReaProject *proj);
     rec->Register("hookpostcommand2",hook);

  command_id:
    Registers/looks up a command ID for an action. Parameter is a unique string with only A-Z, a-z, 0-9.
      int command = Register("command_id","MyCommandName");
    returns 0 if unsupported/out of actions

  command_id_lookup:
    Like command_id but only looks up, does not create a new command ID.

  pcmsink_ext:
    Registers an extended audio sink type:
      (pcmsink_register_ext_t *)

  pcmsink:
    Registers an audio sink type:
      (pcmsink_register_t *)

  pcmsrc:
    Registers an audio source:
    (pcmsrc_register_t *)

  timer:
    Runs a timer periodically:
      void (*timer_function)();

  hwnd_info:  (6.29+)
    query information about a hwnd
      int (*callback)(HWND hwnd, INT_PTR info_type);
     -- note, for v7.23+ ( -- check with GetAppVersion() -- ), you may also use a function with this prototype:
      int (*callback)(HWND hwnd, INT_PTR info_type, const MSG *msg); // if msg is non-NULL, it will have information about the currently-processing event.

    return 0 if hwnd is not a known window, or if info_type is unknown

    info_type:
       0 = query if hwnd should be treated as a text-field for purposes of global hotkeys
           return: 1 if text field
           return: -1 if not text field
       1 = query if global hotkeys should be processed for this context  (6.60+)
           return 1 if global hotkey should be skipped (and default accelerator processing used instead)
           return -1 if global hotkey should be forced


  file_in_project_ex:
     void *p[2] = {(void *)fn, projptr };
     plugin_register("file_in_project_ex",p);
     plugin_register("-file_in_project_ex",p);

     fn does not need to persist past the call of the function (it is copied)
     projptr must be a valid ReaProject (the default NULL=g_project semantics do not apply).
     file references are reference counted so you can add twice/remove twice etc.

  file_in_project_ex2:
     Extended syntax to receive rename notifications, or to have your plug-in request that the file go in a subdirectory:

     INT_PTR fileInProjectCallback(void *_userdata, int msg, void *parm) {
       if (msg == 0 && parm)
       {
          // rename notification, parm is (const char *)new filename
       }
       if (msg == 0x100) return (INT_PTR)"samples"; // subdirectory name, if desired (return 0 if not desired)

       if (msg == 0x101) return (INT_PTR)fxdspparentcontext_if_any; // if fx, optional
       if (msg == 0x102) return (INT_PTR)takecontext_if_any; // if pcmsrc, optional
       if (msg == 0x103) return (INT_PTR)"context/plug-in name"; // optional
       return 0;
     }

     void *p[4] = {(void *)fn, projptr, userdatacontext, fileInProjectCallback };
     plugin_register("file_in_project_ex2",p);
     plugin_register("-file_in_project_ex2",p);

  toolbar_icon_map:
     Allows a plugin to override default toolbar images for its registered commands.

     const char *GetToolbarIconName(const char *toolbar_name, int cmd, int state)
     {
       if (!strcmp(toolbarid,"Main toolbar") || !strncmp(toolbarid,"Floating toolbar",16))
         if (cmd == g_registered_command_id) return "toolbar_whatever";
       return NULL;
     }
     plugin_register("toolbar_icon_map", (void *)GetToolbarIconName);

  accel_section:
  action_help:
  custom_action:
  gaccel:
  hookcustommenu:
  prefpage:
  projectimport:
  projectconfig:
  editor:
  accelerator:
  csurf:
  csurf_inst:
  toggleaction:
  on_update_hooks:
  open_file_reduce:

  */

  int (*Register)(const char *name, void *infostruct); // returns 1 if registered successfully

  // get a generic API function, there many of these defined. see reaper_plugin_functions.h
  void * (*GetFunc)(const char *name); // returns 0 if function not found

} reaper_plugin_info_t;




/****************************************************************************************
**** interface for plugin objects to save/load state. they should use ../WDL/LineParser.h too...
***************************************************************************************/

// ProjectStateContext tempflags meaning for &0xFFFF
enum 
{
  PROJSTATECTX_UNDO_REDO=1,
  PROJSTATECTX_SAVE_LOAD=2, // project, track template, etc
  PROJSTATECTX_CUTCOPY_PASTE=3,
};
// &0xFFFF0000 is for receiver use

#ifdef __cplusplus

#ifndef _WDL_PROJECTSTATECONTEXT_DEFINED_
#define _REAPER_PLUGIN_PROJECTSTATECONTEXT_DEFINED_
class ProjectStateContext // this is also defined in WDL, need to keep these interfaces identical
{
public:
  virtual ~ProjectStateContext(){};

#ifdef __GNUC__
  virtual void  __attribute__ ((format (printf,2,3))) AddLine(const char *fmt, ...) = 0;
#else
  virtual void AddLine(const char *fmt, ...)=0;
#endif
  virtual int GetLine(char *buf, int buflen)=0; // returns -1 on eof

  virtual INT64 GetOutputSize()=0; // output size written so far, only usable on REAPER 3.14+

  virtual int GetTempFlag()=0;
  virtual void SetTempFlag(int flag)=0;
};
#endif



/***************************************************************************************
**** MIDI event definition and abstract list
***************************************************************************************/

struct MIDI_event_t
{
  int frame_offset;
  int size; // bytes used by midi_message, can be >3, but should never be <3, even if a short 1 or 2 byte msg
  unsigned char midi_message[4]; // size is number of bytes valid -- can be more than 4!

  // new helpers
  bool is_note() const { return (midi_message[0]&0xe0)==0x80; }
  bool is_note_on() const {
    return (midi_message[0]&0xf0)==0x90 && midi_message[2];
  }
  bool is_note_off() const {
    switch (midi_message[0]&0xf0)
    {
      case 0x80: return true;
      case 0x90: return midi_message[2]==0;
    }
    return false;
  }

  enum {
   CC_ALL_SOUND_OFF=120,
   CC_ALL_NOTES_OFF=123,
   CC_EOF_INDICATOR = CC_ALL_NOTES_OFF
  };
};

class MIDI_eventlist
{
public:
  virtual void AddItem(MIDI_event_t *evt)=0;
  virtual MIDI_event_t *EnumItems(int *bpos)=0; 
  virtual void DeleteItem(int bpos)=0;
  virtual int GetSize()=0; // size of block in bytes
  virtual void Empty()=0;

protected:
  // this is only defined in REAPER 4.60+, for 4.591 and earlier you should delete only via the implementation pointer
  virtual ~MIDI_eventlist() { }
};

#endif // __cplusplus

typedef struct _MIDI_eventprops
{
  double ppqpos;
  double ppqpos_end_or_bezier_tension; // only for note events or CC events
  char flag; // &1=selected, &2=muted, >>4&0xF=cc shape
  unsigned char msg[3]; // msg is not valid if varmsglen > 0
  char* varmsg;
  int varmsglen;
  int setflag; // &1:selected, &2:muted, &4:ppqpos, &8:endppqpos or bez tension, &16:msg1 high bits, &32:msg1 low bits, &64:msg2, &128:msg3, &256:varmsg, &1024:shape/tension fields used, &16384:no sort after set
} MIDI_eventprops;


/***************************************************************************************
**** PCM source API
***************************************************************************************/



typedef struct _PCM_source_transfer_t
{
  double time_s; // start time of block

  double samplerate; // desired output samplerate and channels
  int nch;

  int length; // desired length in sample(pair)s of output

  ReaSample *samples; // samples filled in (the caller allocates this)
  int samples_out; // updated with number of sample(pair)s actually rendered

  MIDI_eventlist *midi_events;

  double approximate_playback_latency; // 0.0 if not supported
  double roundtrip_latency; // calibrated roundtrip latency in seconds, 0.0 if unavailable
  double absolute_time_s;
  double force_bpm;
} PCM_source_transfer_t;

#ifdef __cplusplus

class REAPER_PeakGet_Interface;

typedef struct _PCM_source_peaktransfer_t
{
  double start_time; // start time of block
  double peakrate;   // peaks per second (see samplerate below)

  int numpeak_points; // desired number of points for data

  int nchpeaks; // number of channels of peaks data requested

  ReaSample *peaks;  // peaks output (caller allocated)
  int peaks_out; // number of points actually output (less than desired means at end)

  enum 
  { 
    PEAKTRANSFER_PEAKS_MODE=0, 
    PEAKTRANSFER_WAVEFORM_MODE=1, 
    PEAKTRANSFER_MIDI_NOTE_MODE=2,
    PEAKTRANSFER_MIDI_DRUM_MODE=3,
    PEAKTRANSFER_MIDI_DRUM_TRIANGLE_MODE=4,
  };
  int output_mode; // see enum above

  double absolute_time_s;

  ReaSample *peaks_minvals; // can be NULL, otherwise receives minimum values
  int peaks_minvals_used;

  double samplerate; // peakrate is peaks per second, samplerate is used only as a hint for what style of peaks to draw, OK to pass in zero

#define PEAKINFO_EXTRADATA_SPECTRAL1 ((int)'s')
#define PEAKINFO_EXTRADATA_SPECTROGRAM1 ((int)'g')
#define PEAKINFO_EXTRADATA_MIDITEXT ((int)'m')
#define PEAKINFO_EXTRADATA_LOUDNESS_DEPRECATED ((int)'l') // use PEAKINFO_EXTRADATA_LOUDNESS_RAW instead
#define PEAKINFO_EXTRADATA_LOUDNESS_RAW ((int)'r')
#define PEAKINFO_EXTRADATA_LOUDNESS_INTERNAL ((int)'!')

  int extra_requested_data_type; // PEAKINFO_EXTRADATA_* for spectral information
  int extra_requested_data_out; // output: number of samples returned (== peaks_out if successful)
  void *extra_requested_data;

  REAPER_PeakGet_Interface *__peakgetter;

  int extra_requested_data_type2; // PEAKINFO_EXTRADATA_* for spectral information
  int extra_requested_data_out2; // output: number of samples returned (== peaks_out if successful)
  void *extra_requested_data2;

#ifdef __LP64__
  int *exp[25];
#else
  int *exp[23];
#endif

  static inline int extra_blocksize(int extra_requested_data_type)
  {
    switch (extra_requested_data_type) 
    {
      case PEAKINFO_EXTRADATA_SPECTRAL1: return SPECTRAL1_BYTES;
      case PEAKINFO_EXTRADATA_SPECTROGRAM1: return SPECTROGRAM1_BLOCKSIZE_BYTES;
      case PEAKINFO_EXTRADATA_MIDITEXT: return MIDITEXT_BYTES;
      case PEAKINFO_EXTRADATA_LOUDNESS_DEPRECATED: return LOUDNESS_DEPRECATED_BYTES;
      case PEAKINFO_EXTRADATA_LOUDNESS_RAW: return LOUDNESS_RAW_BYTES;
      case PEAKINFO_EXTRADATA_LOUDNESS_INTERNAL: return LOUDNESS_INTERNAL_BYTES;
    }
    return 0;
  }

  enum {
    SPECTROGRAM1_BLOCKSIZE_BYTES=128 * 3 / 2, // 128 bins, 12 bits each (MSB1, (LSN1<<4)|LSN2, MSB2)
    SPECTRAL1_BYTES=4, // one LE int per channel per sample spectral info: low 15 bits frequency, next 14 bits density (16383=tonal, 0=noise, 12288 = a bit noisy)
    MIDITEXT_BYTES=1, // at most one character per pixel
    LOUDNESS_DEPRECATED_BYTES=4, // 4 byte LE integer: LUFS-M low 12 bits, LUFS-S next 12 bits, 0-3000 valid: ex: 0 means -150.0 LU (consider this -inf), 1500 means +0 LU - loudness values returned for each channel even if the calculation is for all channels combined
    LOUDNESS_RAW_BYTES=8, // 4 byte LE float LUFS-M low 32 bits, 4 byte LE float LUFS-S high 32 bits:
         // stored values are a windowed, weighted mean square of samples for each channel,
         // which must be combined to calculate total loudness. specifically,
         // the stored values are z(i) in formula 2 in this document:
         // https://www.itu.int/dms_pubrec/itu-r/rec/bs/R-REC-BS.1770-0-200607-S!!PDF-E.pdf
    LOUDNESS_INTERNAL_BYTES=4, // REAPER internal use only, 4 byte LE float
  };

} PCM_source_peaktransfer_t;


// used to update MIDI sources with new events during recording
typedef struct _REAPER_midi_realtime_write_struct_t
{
  double global_time;
  double global_item_time;
  double srate;
  int length; // length in samples
  int overwritemode; // 0=overdub, 1=replace, 
                     // -1 = literal (do nothing just add), -2 = literal, do not apply default curves
                     // 65536+(16 bit mask) = replace notes on just these channels (touch-replace)
  MIDI_eventlist *events;
  double item_playrate;

  double latency;

  unsigned int *overwrite_actives; // [16(note)+16(CC)+16(poly AT)][4]; only used when overwritemode is >0
                                   // CC: 127=pitch, 126=program, 125=channel pressure

  double do_not_quantize_past_sec; // amount in future that quantizing should never move things past (or 0 for not used)
} midi_realtime_write_struct_t;


// abstract base class
class PCM_source
{
  public:
    virtual ~PCM_source() { }

    virtual PCM_source *Duplicate()=0;

    virtual bool IsAvailable()=0;
    virtual void SetAvailable(bool avail) { } // optional, if called with avail=false, close files/etc, and so on
    virtual const char *GetType()=0;
    virtual const char *GetFileName() { return NULL; } // return NULL if no filename (not purely a file)
    virtual bool SetFileName(const char *newfn)=0; // return TRUE if supported, this will only be called when offline

    virtual PCM_source *GetSource() { return NULL; }
    virtual void SetSource(PCM_source *src) { }
    virtual int GetNumChannels()=0; // return number of channels
    virtual double GetSampleRate()=0; // returns preferred sample rate. if < 1.0 then it is assumed to be silent (or MIDI)
    virtual double GetLength()=0; // length in seconds
    virtual double GetLengthBeats() { return -1.0; } // length in beats if supported
    virtual int GetBitsPerSample() { return 0; } // returns bits/sample, if available. only used for metadata purposes, since everything returns as doubles anyway
    virtual double GetPreferredPosition() { return -1.0; } // not supported returns -1

    virtual int PropertiesWindow(HWND hwndParent)=0;

    virtual void GetSamples(PCM_source_transfer_t *block)=0;
    virtual void GetPeakInfo(PCM_source_peaktransfer_t *block)=0;

    virtual void SaveState(ProjectStateContext *ctx)=0;
    virtual int LoadState(const char *firstline, ProjectStateContext *ctx)=0; // -1 on error


    // these are called by the peaks building UI to build peaks for files.
    virtual void Peaks_Clear(bool deleteFile)=0;
    virtual int PeaksBuild_Begin()=0; // returns nonzero if building is opened, otherwise it may mean building isn't necessary
    virtual int PeaksBuild_Run()=0; // returns nonzero if building should continue
    virtual void PeaksBuild_Finish()=0; // called when done

    virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};

/***************************************************************************************
**** MIDI effect API
***************************************************************************************/

typedef struct _MIDI_effect_transfer_t
{
  double time_s; // start time of block
  MIDI_eventlist* input_events;  // events entering the effect
  MIDI_eventlist* output_events; // events produced by the effect
} MIDI_effect_transfer_t;

class MIDI_effect
{
  public:
    virtual ~MIDI_effect() { }

    virtual MIDI_effect *Duplicate()=0;
    virtual bool IsAvailable()=0;
    virtual void SetAvailable(bool avail) { }
    virtual const char *GetType()=0;

    virtual int PropertiesWindow(HWND hwndParent)=0;

    virtual void Process(MIDI_effect_transfer_t *block)=0;

    virtual void SaveState(ProjectStateContext *ctx)=0;
    virtual int LoadState(const char *firstline, ProjectStateContext *ctx)=0; // -1 on error

    virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};

typedef struct _REAPER_midieffect_register_t // register with "midieffect"
{
  const char* (*GetName)();
  MIDI_effect* (*Create)();
} midieffect_register_t;

typedef struct _REAPER_cue
{
  int m_id; // ignored for PCM_SINK_EXT_ADDCUE, populated for PCM_SOURCE_EXT_ENUMCUES
  double m_time;
  double m_endtime;
  bool m_isregion;
  char *m_name; // can be NULL if unnamed
  int m_flags; // &1:DEPRECATED caller must call Extended(PCM_SOURCE_EXT_ENUMCUES, -1, &cue, 0) when finished, &2:time is QN, &0x10000:write cue regardless of sink settings, &4:is chapter, &(8|16)=8:has low confidence cue name, &(8|16)=16:has medium confidence cue name, &(8|16)=24:has high confidence cue name
  char resvd[124]; // future expansion -- should be 0
} REAPER_cue;

typedef struct _REAPER_slice
{
  PCM_source* m_sliceSrc;
  double m_beatSnapOffset;
  int flag; // &1=only return beatsnapoffset, not slicesrc
  char resvd[124];  // future expansion -- should be 0
} REAPER_slice;

typedef struct _REAPER_inline_positioninfo
{
  double draw_start_time; // project time at pixel start of draw
  int draw_start_y;       // if y-scroll is partway into the item, positive pixel value
  double pixels_per_second;

  int width, height; // width and height of view of the item. if doing a partial update this may be larger than the bitmap passed in
  int mouse_x, mouse_y; // valid only on mouse/key/setcursor/etc messages

  void *extraParms[8];
  // WM_KEYDOWN handlers can use MSG *msg = (MSG *)extraParms[0]
  // WM_SETCURSOR handlers should set *extraParms[0] = hcursor
} REAPER_inline_positioninfo;


typedef struct _REAPER_tempochg
{
  double timepos, qnpos, bpm;
  int tsnum, tsdenom;
  int flag; // &1=linear tempo change, &2=internal use
} REAPER_tempochg;


#define PCM_SOURCE_EXT_INLINEEDITOR 0x100  /* parm1 = (void *)(INT_PTR)message, parm2/parm3 = parms

                             note: for the WM_* constants, you can use windows.h if on Windows, and SWELL's definitions if on other platforms
                             note: for LICE_IBitmap interface, you can use LICE's definition
                             for SWELL and LICE, see Cockos WDL -- https://www.cockos.com/wdl

                             NOTE: fx-embed documentation is now in reaper_plugin_fx_embed.h

                                              messages:
                                                0 = query if editor is available/supported. returns <0 if supported but unavailable, >0 if available, 0=if not supported
                                                WM_CREATE to create the editor instance
                                                WM_DESTROY to destroy the editor instance (nonzero if success)

                                                WM_LBUTTON*, WM_RBUTTON*, WM_MOUSEMOVE, WM_MOUSEWHEEL -- parm2=rsvd, parm3= REAPER_inline_positioninfo)
                                                  these can return any combination of:
                                                    REAPER_INLINE_RETNOTIFY_INVALIDATE
                                                    REAPER_INLINE_RETNOTIFY_SETCAPTURE
                                                    REAPER_INLINE_RETNOTIFY_SETFOCUS

                                               WM_KEYDOWN -- parm3=REAPER_inline_positioninfo*, MSG *kbmsg = (MSG *)rec->extraParms[0]
                                                  return nonzero to eat the key. can return REAPER_INLINE_RETNOTIFY_INVALIDATE.

                                               WM_SETCURSOR -- parm3=REAPER_inline_positioninfo*
                                                 --  *rec->extraParms[0] = hcursor

                                              paint messages: parm2 = LICE_IBitmap *, parm3 = (REAPER_inline_positioninfo*).
                                                  WM_ERASEBKGND -- draw first pass -- should return 1 if supported
                                                  WM_PAINT -- draw second pass     -- should return 1 if paint supported
                                                  WM_NCPAINT -- draw third pass

                                               Notes on Retina/HiDPI:
                                                     on macOS retina, (int)LICE_IBitmap::Extended(LICE_EXT_GET_SCALING,NULL) may return 512. in this case LICE will internally render things double-sized
                                                     on other platforms HiDPI, if (int)LICE_IBitmap::Extended(LICE_EXT_GET_ADVISORY_SCALING,NULL) returns nonzero, then it is a 24.8 scale factor which things
                                                     should be scaled by.

                                               */

#define REAPER_INLINE_RETNOTIFY_INVALIDATE 0x1000000 // want refresh of display
#define REAPER_INLINE_RETNOTIFY_SETCAPTURE 0x2000000 // setcapture
#define REAPER_INLINE_RETNOTIFY_SETFOCUS   0x4000000 // set focus to item
#define REAPER_INLINE_RETNOTIFY_NOAUTOSCROLL 0x8000000 // modifier only valid when setcapture set

#define REAPER_INLINEFLAG_SHOWALLTAKES          0x1000 // only valid as a return value flag for message=0, display in inactive take lanes
#define REAPER_INLINEFLAG_WANTOVERLAYEDCONTROLS 0x4000 // only valid as a return value flag for message=0, to have fades/etc still drawn over like normal





#define PCM_SOURCE_EXT_PROJCHANGENOTIFY 0x2000 // parm1 = nonzero if activated project, zero if deactivated project

#define PCM_SOURCE_EXT_OPENEDITOR 0x10001 // parm1=hwnd, implementation dependent parm2/parm3
#define PCM_SOURCE_EXT_GETEDITORSTRING 0x10002 // parm1=index (0 or 1), parm2=(const char**)desc, optional parm3=(int*)has_had_editor
#define PCM_SOURCE_EXT_DEPRECATED_1 0x10003 // was PCM_SOURCE_EXT_CLOSESECONDARYSRC 
#define PCM_SOURCE_EXT_SETITEMCONTEXT 0x10004 // parm1=MediaItem*,  parm2=MediaItem_Take*
#define PCM_SOURCE_EXT_ADDMIDIEVENTS 0x10005 // parm1=pointer to midi_realtime_write_struct_t, nch=1 for replace, =0 for overdub, parm2=midi_quantize_mode_t* (optional)
#define PCM_SOURCE_EXT_GETASSOCIATED_RPP 0x10006 // parm1=pointer to char* that will receive a pointer to the string
#define PCM_SOURCE_EXT_GETMETADATA 0x10007 // parm1=pointer to name string, parm2=pointer to buffer, parm3=(int)buffersizemax. returns length used. defined strings are "TITLE", "ARTIST", "ALBUM", "TRACKNUMBER", "YEAR", "GENRE", "COMMENT", "DESC", "BPM", "KEY", "DB_CUSTOM"
#define PCM_SOURCE_EXT_SETASSECONDARYSOURCE 0x10008  // parm1=optional pointer to src (same subtype as receiver), if supplied, set the receiver as secondary src for parm1's editor, if not supplied, receiver has to figure out if there is an appropriate editor open to attach to, parm2/3 impl defined
#define PCM_SOURCE_EXT_SHOWMIDIPREVIEW 0x10009  // parm1=(MIDI_eventlist*), can be NULL for all-notes-off (also to check if this source supports showing preview at this moment)
#define PCM_SOURCE_EXT_SEND_EDITOR_MSG 0x1000A  // impl defined parameters
#define PCM_SOURCE_EXT_SETSECONDARYSOURCELIST 0x1000B // parm1=(PCM_source**)sourcelist, parm2=list size, parm3=close any existing src not in the list
#define PCM_SOURCE_EXT_ISOPENEDITOR 0x1000C // returns 1 if this source is currently open in an editor, 2 if open in a secondary editor. parm1=1 to close. parm2=(int*)&flags to get extra flags (&1=editor is currently hidden)
#define PCM_SOURCE_EXT_SETEDITORGRID 0x1000D // parm1=(double*)griddiv: 0.25=quarter note, 1.0/3.0=half note triplet, etc. parm2=int* swingmode(1=swing), parm3=double*swingamt
#define PCM_SOURCE_EXT_GETITEMCONTEXT 0x10010 // parm1=MediaItem**, parm2=MediaItem_Take**, parm3=MediaTrack**
#define PCM_SOURCE_EXT_GETALLMETADATA_DEPRECATED 0x10011 // no longer supported
#define PCM_SOURCE_EXT_GETBITRATE 0x10012 // parm1=(double*)bitrate, if different from samplerate*channels*bitdepth/length
#define PCM_SOURCE_EXT_ENUMMETADATA 0x10013 // parm1=(int)index, parm2=(const char**)key, parm3=(const char**)value. enumerates all metadata, returns 0 when no more metadata exists
#define PCM_SOURCE_EXT_GETINFOSTRING 0x10014 // parm1=(char*)buffer, parm2=(int)buffer length, return the data that would be displayed in the properties window
#define PCM_SOURCE_EXT_CONFIGISFILENAME 0x20000
#define PCM_SOURCE_EXT_WRITEMETADATA_DEPRECATED 0x20007 // no longer supported
#define PCM_SOURCE_EXT_WRITE_METADATA 0x20008 // parm1=char* new file name, parm2=(char**)NULL-terminated array of key,value,key2,value2,... pointers, parm3=flags (&1=merge, &2=do not allow update in-place). returns 1 if successfully generated a new file, 2 if original file was updated
#define PCM_SOURCE_EXT_GETBPMANDINFO 0x40000 // parm1=pointer to double for bpm. parm2=pointer to double for snap/downbeat offset (seconds).
#define PCM_SOURCE_EXT_GETNTRACKS 0x80000 // for midi data, returns number of tracks that would have been available. optional parm1=(int*)mask of channels available, mask&(1<<16)=metadata
#define PCM_SOURCE_EXT_GETTITLE   0x80001 // parm1=(char**)title (string persists in plugin)
#define PCM_SOURCE_EXT_ENUMTEMPOMAP 0x80002 // parm1=index, parm2=pointer to REAPER_tempochg, returns 0 if no tempo map or enumeration complete
#define PCM_SOURCE_EXT_WANTOLDBEATSTYLE 0x80003
#define PCM_SOURCE_EXT_GETNOTATIONSETTINGS 0x80004 // parm1=(int)what, (what==0) => parm2=(double*)keysigmap, parm3=(int*)keysigmapsize; (what==1) => parm2=(int*)display transpose semitones, (what==2) => parm2=(char*)clef1, parm3=(char*)clef2
#define PCM_SOURCE_EXT_RELOADTRACKDATA 0x80005 // internal use
#define PCM_SOURCE_EXT_GIVE_TRACK_HINT 0x8000A // alias of PCM_SINK_EXT_GIVE_TRACK_HINT
#define PCM_SOURCE_EXT_WANT_TRIM 0x90001 // parm1=(int64*)total number of decoded samples after trimming, parm2=(int*)number of samples to trim from start, parm3=(int*)number of samples to trim from end
#define PCM_SOURCE_EXT_WANTTRIM_DEPRECATED 0x90002 // no longer supported
#define PCM_SOURCE_EXT_TRIMITEM 0x90003 // parm1=lrflag, parm2=double *{position,length,startoffs,rate}
#define PCM_SOURCE_EXT_EXPORTTOFILE 0x90004 // parm1=output filename, only currently supported by MIDI but in theory any source could support this
#define PCM_SOURCE_EXT_ENUMCUES 0x90005 // DEPRECATED, use PCM_SOURCE_EXT_ENUMCUES_EX instead.  parm1=(int) index of cue to get (-1 to free cue), parm2=(optional)REAPER_cue **.  Returns 0 and sets parm2 to NULL when out of cues. return value otherwise is how much to advance parm2 (1, or 2 usually)
#define PCM_SOURCE_EXT_ENUMCUES_EX 0x90016 // parm1=(int) index of cue (source must provide persistent backing store for cue->m_name), parm2=(REAPER_cue*) optional. Returns 0 when out of cues, otherwise returns how much to advance index (1 or 2 usually). 
// a PCM_source may be the parent of a number of beat-based slices, if so the parent should report length and nchannels only, handle ENUMSLICES, and be deleted after the slices are retrieved
#define PCM_SOURCE_EXT_ENUMSLICES 0x90006 // parm1=(int*) index of slice to get, parm2=REAPER_slice* (pointing to caller's existing slice struct), parm3=(double*)bpm. if parm2 passed in zero, returns the number of slices. returns 0 if no slices or out of slices.
#define PCM_SOURCE_EXT_ENDPLAYNOTIFY 0x90007 // notify a source that it can release any pooled resources
#define PCM_SOURCE_EXT_SETPREVIEWTEMPO 0x90008 // parm1=(double*)bpm, only meaningful for MIDI or slice-based source media; bpm==0 to follow project tempo changes

enum { RAWMIDI_NOTESONLY=1, RAWMIDI_UNFILTERED=2, RAWMIDI_CHANNELFILTER=3 }; // if RAWMIDI_CHANNELFILTER, flags>>4 is a mask of which channels to play
#define PCM_SOURCE_EXT_GETRAWMIDIEVENTS 0x90009 // parm1 = (PCM_source_transfer_t *), parm2 = RAWMIDI flags

#define PCM_SOURCE_EXT_SETRESAMPLEMODE 0x9000A // parm1= mode to pass to resampler->Extended(RESAMPLE_EXT_SETRSMODE,mode,0,0)
#define PCM_SOURCE_EXT_NOTIFYPREVIEWPLAYPOS 0x9000B // parm1 = ptr to double of play position, or NULL if stopped
#define PCM_SOURCE_EXT_SETSIZE 0x9000C // parm1=(double*)startpos, parm2=(double*)endpos, parm3=flags. Start can be negative. Receiver may adjust start/end to avoid erasing content, in which case the adjusted values are returned in parm1 and parm2. parm3/flags: 1 if start/end in QN (always the case now). 2=resize even pooled items
#define PCM_SOURCE_EXT_GETSOURCETEMPO 0x9000D // parm1=(double*)bpm, parm2=(int*)timesig_numerator<<8|timesig_denominator, parm3=(double*)current preview tempo if applicable. this is for reporting purposes only, does not necessarily mean the media should be adjusted (as PCM_SOURCE_EXT_GETBPMANDINFO means)
#define PCM_SOURCE_EXT_ISABNORMALAUDIO  0x9000E // return 1 if rex, video, etc (meaning file export will just copy file directly rather than trim/converting)
#define PCM_SOURCE_EXT_GETPOOLEDMIDIID 0x9000F // parm1=(char*)id, parm2=(int*)pool user count, parm3=(MediaItem_Take**)firstuser
#define PCM_SOURCE_EXT_REMOVEFROMMIDIPOOL 0x90010 
#define PCM_SOURCE_EXT_GETHASH 0x90011 // parm1=(WDL_UINT64*)hash (64-bit hash of the source data)
#define PCM_SOURCE_EXT_GETIMAGE 0x90012  // parm1=(LICE_IBitmap**)image. parm2 = NULL or pointer to int, which is (w<<16)|h desired approx
#define PCM_SOURCE_EXT_NOAUDIO 0x90013 // return 1 if video file with no audio. if parm1 is non-NULL, will (int*)parm1=1 if a video file with audio and no video
#define PCM_SOURCE_EXT_HASMIDI 0x90014 // returns 1 if contains any MIDI data, parm1=(double*)time offset of first event
#define PCM_SOURCE_EXT_DELETEMIDINOTES 0x90015 // parm1=(double*)minlen (0.125 for 1/8 notes, etc), parm2=1 if only trailing small notes should be deleted, parm3=(bool*)true if any notes were deleted (return)
#define PCM_SOURCE_EXT_GETGUID 0x90017 // parm1=(GUID*)guid
#define PCM_SOURCE_EXT_DOPASTEINITEM 0x90100 // no parms used, acts as a paste from clipboard
#define PCM_SOURCE_EXT_GETNOTERANGE 0x90018 // parm1=(int*)low note, parm2=(int*)high note
#define PCM_SOURCE_EXT_PPQCONVERT 0x90020 // parm1=(double*)pos, parm2=(int)flag 0=ppq to proj time, 1=proj time to ppq, 2=start of measure, 3=end of measure, 4=query ppq
#define PCM_SOURCE_EXT_COUNTMIDIEVTS 0x90021 // parm1=(int*)notecnt, parm2=(int*)ccevtcnt, parm3=(int*)metaevtcnt
#define PCM_SOURCE_EXT_GETSETMIDIEVT 0x90022 // parm1=(MIDI_eventprops*)event properties (NULL to delete); parm2=(int)event index (<0 to insert); parm2=(int)flag: 1=index counts notes only, 2=index counts CC only, 3=index counts meta-events only
#define PCM_SOURCE_EXT_GETSUGGESTEDTEXT 0x90023 // parm1=char ** which will receive pointer to suggested label text, if any
#define PCM_SOURCE_EXT_GETSCALE 0x90024 // parm1=unsigned int: &0xF=pitch (0=C), &0x10=root, &0x20=min2, &0x40=maj2, &0x80=min3, &0xF0=maj3, &0x100=4, etc) ; parm2=(char*)name (optional), parm3=int size of name buffer
#define PCM_SOURCE_EXT_SELECTCONTENT 0x90025 // parm1=1 to select, 0 to deselect
#define PCM_SOURCE_EXT_GETGRIDINFO 0x90026 // parm1=(double*)snap grid size, parm2=(double*)swing strength, parm3=(double*)note insert length, -1 if follows grid size
#define PCM_SOURCE_EXT_SORTMIDIEVTS 0x9027
#define PCM_SOURCE_EXT_MIDI_COMPACTPHRASES 0x90028 // compact the notation phrase ID space
#define PCM_SOURCE_EXT_GETSETALLMIDI 0x90029 // parm1=(unsigned char*)data buffer, parm2=(int*)buffer length in bytes, parm2=(1:set, 0:get). Buffer is a list of { int offset, char flag, int msglen, unsigned char msg[] }. offset: MIDI ticks from previous event, flag: &1=selected &2=muted, msglen: byte length of msg (usually 3), msg: the MIDI message.
#define PCM_SOURCE_EXT_DISABLESORTMIDIEVTS 0x90030 // disable sorting for PCM_SOURCE_EXT_GETSETMIDIEVT until PCM_SOURCE_EXT_SORTMIDIEVTS is called
#define PCM_SOURCE_EXT_GETPOOLEDMIDIID2 0x90031 // parm1=(GUID*)id, parm2=(int*)pool user count, parm3=(MediaItem_Take**)firstuser
#define PCM_SOURCE_EXT_GETSETMIDICHANFILTER 0x90032 // parm1=(int*)filter: filter&(1<<n) to play channel n, parm2=(int)set: 0 to get, 1 to set
#define PCM_SOURCE_EXT_REFRESH_EDITORS 0x90033 // synchronously refresh any open editors
#define PCM_SOURCE_EXT_GET_LYRICS      0x90040 // parm1=buffer, parm2= &len, parm3=(INT_PTR)flag - see GetTrackMIDILyrics
#define PCM_SOURCE_EXT_SET_LYRICS      0x90041 // parm1=nul term buffer
#define PCM_SOURCE_EXT_GETLAPPING 0xC0100 // parm1 = ReaSample buffer, parm2=(INT_PTR)maxlap, returns size of lapping returned. usually not supported. special purpose.
#define PCM_SOURCE_EXT_SET_PREVIEW_POS_OVERRIDE 0xC0101 // parm1 = (double *)&tickpos, tickpos<0 for no override
#define PCM_SOURCE_EXT_SET_PREVIEW_LOOPCNT 0xC0102 // parm1 = (INT64*)&decoding_loopcnt, valid only for the immediately following GetSamples(), only in track preview contexts, when not using buffering source

#define PCM_SOURCE_EXT_SET_IGNTEMPO 0xC0105 // parm1 = REAPER_pcmsrc_igntempo_info*
#define PCM_SOURCE_EXT_GET_IGNTEMPO 0xC0106 // parm1 = REAPER_pcmsrc_igntempo_info*

// register with Register("pcmsrc",&struct ... and unregister with "-pcmsrc"
typedef struct _REAPER_pcmsrc_register_t {
  PCM_source *(*CreateFromType)(const char *type, int priority); // priority is 0-7, 0 is highest
  PCM_source *(*CreateFromFile)(const char *filename, int priority); // if priority is 5-7, and the file isn't found, open it in an offline state anyway, thanks

  // this is used for UI only, not so muc
  const char *(*EnumFileExtensions)(int i, const char **descptr); // call increasing i until returns a string, if descptr's output is NULL, use last description
} pcmsrc_register_t;


struct REAPER_pcmsrc_igntempo_info {
  int enable_override;
  int flags; // if setting, &1 to reconform media (and if that set, &2 applies even if couldn't be reconformed)
  double bpm;
  int measure_len;
  int denom;
};

/*
** OK so the pcm source class has a lot of responsibility, and people may not wish to
** have to implement them. So, for basic audio decoders, you can use this class instead:
**
** And you can use the PCM_Source_CreateFromSimple API to create a PCM_source from your ISimpleMediaDecoder derived class
*/
class ISimpleMediaDecoder
{
public:
  virtual ~ISimpleMediaDecoder() { }

  virtual ISimpleMediaDecoder *Duplicate()=0;

  // filename can be NULL to use "last filename"
  // diskread* are suggested values to pass to WDL_FileRead if you use it, otherwise can ignore
  virtual void Open(const char *filename, int diskreadmode, int diskreadbs, int diskreadnb)=0;

  // if fullClose=0, close disk resources, but can leave decoders etc initialized (and subsequently check the file date on re-open)
  virtual void Close(bool fullClose)=0; 

  virtual const char *GetFileName()=0;
  virtual const char *GetType()=0;

  // an info string suitable for a dialog, and a title for that dialog
  virtual void GetInfoString(char *buf, int buflen, char *title, int titlelen)=0; 

  virtual bool IsOpen()=0;
  virtual int GetNumChannels()=0;

  virtual int GetBitsPerSample()=0;
  virtual double GetSampleRate()=0;


  // positions in sample frames
  virtual INT64 GetLength()=0;
  virtual INT64 GetPosition()=0;
  virtual void SetPosition(INT64 pos)=0;

  // returns sample-frames read. buf will be at least length*GetNumChannels() ReaSamples long.
  virtual int ReadSamples(ReaSample *buf, int length)=0; 


  // these extended messages may include PCM_source messages
  virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};





/***************************************************************************************
**** PCM sink API
***************************************************************************************/

typedef struct _REAPER_midi_quantize_mode_t
{
  bool doquant;
  char movemode; // 0=default(l/r), -1=left only, 1=right only
  char sizemode; // 0=preserve length, 1=quantize end
  char quantstrength; // 1-100
  double quantamt; // quantize to (in qn)
  char swingamt; // 1-100
  char range_min; // 0-100
  char range_max; 
} midi_quantize_mode_t;

class PCM_sink
{
  public:
    PCM_sink() { m_st=0.0; }
    virtual ~PCM_sink() { }

    virtual void GetOutputInfoString(char *buf, int buflen)=0;
    virtual double GetStartTime() { return m_st; }
    virtual void SetStartTime(double st) { m_st=st; }
    virtual const char *GetFileName()=0; // get filename, if applicable (otherwise "")
    virtual int GetNumChannels()=0; // return number of channels
    virtual double GetLength()=0; // length in seconds, so far
    virtual INT64 GetFileSize()=0;

    virtual void WriteMIDI(MIDI_eventlist *events, int len, double samplerate)=0;
    virtual void WriteDoubles(ReaSample **samples, int len, int nch, int offset, int spacing)=0;
    virtual bool WantMIDI() { return 0; }

    virtual int GetLastSecondPeaks(int sz, ReaSample *buf) { return 0; }
    virtual void GetPeakInfo(PCM_source_peaktransfer_t *block) { } // allow getting of peaks thus far

    virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported

  private:
    double m_st;
};

#define PCM_SINK_EXT_CREATESOURCE 0x80000 // parm1 = PCM_source ** (will be created if supported)
#define PCM_SINK_EXT_DONE 0x80001 // parm1 = optional HWND of the render dialog in case the sink needs more user interaction, parm2 = optional (char**)NULL-terminated array of key,value,key2,value2,... pointers if the sink supports updating metadata after write (may require the caller to have set padded metadata via SetCurrentSinkMetadata before creating the sink)
#define PCM_SINK_EXT_VERIFYFMT 0x80002 // parm1=int *srate, parm2= int *nch. plugin can override (and return 1!!)
#define PCM_SINK_EXT_SETQUANT 0x80003 // parm1 = (midi_quantize_mode_t*), or NULL to disable
#define PCM_SINK_EXT_SETRATE 0x80004 // parm1 = (double *) rateadj
#define PCM_SINK_EXT_GETBITDEPTH 0x80005 // parm1 = (int*) bitdepth (return 1 if supported)
#define PCM_SINK_EXT_ADDCUE 0x80006 // parm1=(PCM_cue*)cue OR parm2=(double*)transient position
#define PCM_SINK_EXT_SETCURBLOCKTIME 0x80007 // parm1 = (double *) project position -- called before each WriteDoubles etc
#define PCM_SINK_EXT_IS_VIDEO 0x80008 // deprecated/unused
#define PCM_SINK_EXT_IS_DUMMY 0x80009 // does not write a file to disk
#define PCM_SINK_EXT_GIVE_TRACK_HINT 0x8000A // parm1 = MediaTrack*, parm3=PCM_source* (maybe)

typedef struct _REAPER_pcmsink_register_t // register using "pcmsink"
{
  unsigned int (*GetFmt)(const char **desc);

  const char *(*GetExtension)(const void *cfg, int cfg_l);
  HWND (*ShowConfig)(const void *cfg, int cfg_l, HWND parent);
  PCM_sink *(*CreateSink)(const char *filename, void *cfg, int cfg_l, int nch, int srate, bool buildpeaks);

} pcmsink_register_t;

typedef struct _REAPER_pcmsink_register_ext_t // register using "pcmsink_ext"
{
  pcmsink_register_t sink; 

  // for extended calls that refer to the generic type of sink, rather than a specific instance of a sink
  int (*Extended)(int call, void* parm1, void* parm2, void* parm3); 


  char expand[256];
} pcmsink_register_ext_t;

// supported via pcmsink_register_ext_t::Extended:
#define PCMSINKEXT_GETFORMATDESC 0x80000 // parm1=(void*)cfg, parm2=(int)cfglen, parm3=(const char*)retstring 
#define PCMSINKEXT_GETFORMATDATARATE 0x80001 // parm1=(void*)cfg, parm2=(int)cfglen, parm3 = int[] {channels, samplerate}
#define PCMSINKEXT_GETFORMATBITDEPTH 0x80002 // parm1=(void*)cfg, parm2=(int)cfglen, returns bit depth if supported (negative with effective size if FP)
#define PCMSINKEXT_GETFORMATSTREAMDESC 0x80003 // parm1=(void*)cfg, parm2=(int)cfglen, parm3=(int*)streams (&1=has video, &2=has audio), returns 1 if supported

/***************************************************************************************
**** Resampler API (plug-ins can use this for SRC)
**
** 
** See API functions Resampler_Create() and Resample_EnumModes()
***************************************************************************************/

class REAPER_Resample_Interface
{
public:
  virtual ~REAPER_Resample_Interface(){}
  virtual void SetRates(double rate_in, double rate_out)=0;
  virtual void Reset()=0;

  virtual double GetCurrentLatency()=0; // latency in seconds buffered -- do not call between resampleprepare and resampleout, undefined if you do...
  virtual int ResamplePrepare(int out_samples, int nch, ReaSample **inbuffer)=0; // sample ratio
  virtual int ResampleOut(ReaSample *out, int nsamples_in, int nsamples_out, int nch)=0; // returns output samples

  virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};
#define RESAMPLE_EXT_SETRSMODE 0x1000 // parm1 == (int)resamplemode, or -1 for project default
#define RESAMPLE_EXT_SETFEEDMODE 0x1001 // parm1 = nonzero to set ResamplePrepare's out_samples to refer to request a specific number of input samples
#define RESAMPLE_EXT_PREALLOC 0x1002 // parm1 = nch, parm2=input blocksize, parm3=output blocksize
#define RESAMPLE_EXT_RESETWITHFRACPOS 0x6000 // parm1 = (double*)&fracpos


/***************************************************************************************
**** Pitch shift API (plug-ins can use this for pitch shift/time stretch)
**
** See API calls ReaperGetPitchShiftAPI(), EnumPitchShiftModes(), EnumPitchShiftSubModes()
**
***************************************************************************************/

#define REAPER_PITCHSHIFT_API_VER 0x14

class IReaperPitchShift
{
  public:
    virtual ~IReaperPitchShift() { };
    virtual void set_srate(double srate)=0;
    virtual void set_nch(int nch)=0;
    virtual void set_shift(double shift)=0;
    virtual void set_formant_shift(double shift)=0; // shift can be <0 for "only shift when in formant preserve mode", so that you can use it for effective rate changes etc in that mode
    virtual void set_tempo(double tempo)=0;

    virtual void Reset()=0;  // reset all buffers/latency
    virtual ReaSample *GetBuffer(int size)=0;
    virtual void BufferDone(int input_filled)=0;

    virtual void FlushSamples()=0; // make sure all output is available

    virtual bool IsReset()=0;

    virtual int GetSamples(int requested_output, ReaSample *buffer)=0; // returns number of samplepairs returned

    virtual void SetQualityParameter(int parm)=0; // set to: (mode<<16)+(submode), or -1 for "project default" (default)
    virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};
#define REAPER_PITCHSHIFT_EXT_GETMINMAXPRODUCTS 0x1
#define REAPER_PITCHSHIFT_EXT_GET_CHAN_LIMIT 0x100 // return channel limit if any
#define REAPER_PITCHSHIFT_EXT_SET_OUTPUT_BPM 0x200 // parm1 = *(double *)bpm
#define REAPER_PITCHSHIFT_EXT_WANT_OUTPUT_BPM 0x201 // returns 1 if desired


/***************************************************************************************
**** Peak getting/building API
**
** These are really only needed if you implement a PCM_source or PCM_sink.
**
** See functions PeakGet_Create(), PeakBuild_Create(), GetPeakFileName(), ClearPeakCache()
**
***************************************************************************************/


class REAPER_PeakGet_Interface
{
public:
  virtual ~REAPER_PeakGet_Interface() { }

  virtual double GetMaxPeakRes()=0;
  virtual void GetPeakInfo(PCM_source_peaktransfer_t *block)=0;

  virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};

class REAPER_PeakBuild_Interface
{
public:
  virtual ~REAPER_PeakBuild_Interface() { }

  virtual void ProcessSamples(ReaSample **samples, int len, int nch, int offs, int spread)=0; // in case a sink wants to build its own peaks (make sure it was created with src=NULL)
  virtual int Run()=0; // or let it do it automatically (created with source!=NULL)

  virtual int GetLastSecondPeaks(int sz, ReaSample *buf)=0; // returns number of peaks in the last second, sz is maxsize
  virtual void GetPeakInfo(PCM_source_peaktransfer_t *block)=0; // allow getting of peaks thus far (won't hit the highest resolution mipmap, just the 10/sec one or so)

  virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};

// recommended settings for sources switching to peak caches
#define REAPER_PEAKRES_MAX_NOPKS 200.0
#define REAPER_PEAKRES_MUL_MIN 0.00001 // recommended for plug-ins, when 1000peaks/pix, toss hires source
#define REAPER_PEAKRES_MUL_MAX 1.0 // recommended for plug-ins, when 1.5pix/peak, switch to hi res source. this may be configurable someday via some sneakiness


#endif // __cplusplus



/*
** accelerator_register_t allows you to register ("accelerator") a record which lets you get a place in the 
** keyboard processing queue.
*/

typedef struct accelerator_register_t
{
  // translateAccel returns:
  // 0 if not our window, 
  // 1 to eat the keystroke, 
  // -1 to pass it on to the window, 
  // -10 (macOS only) to process event raw
  // -20 (Windows only) to passed to the window, even if it is WM_SYSKEY*/VK_MENU which would otherwise be dropped
  // -666 to force it to the main window's accel table (with the exception of ESC)
  // -667 to force it to the main window's accel table, even if in a text field (5.24+ or so)
  int (*translateAccel)(MSG *msg, accelerator_register_t *ctx); 
  bool isLocal; // must be TRUE, now (false is no longer supported, heh)
  void *user;
} accelerator_register_t;


/*
** custom_action_register_t allows you to register ("custom_action") an action or a reascript into a section of the action list
** register("custom_action",ca) will return the command ID (instance-dependent but unique across all sections), 
** or 0 if failed (e.g dupe idStr for actions, or script not found/supported, etc)
** for actions, the related callback should be registered with "hookcommand2"
*/

typedef struct _REAPER_custom_action_register_t
{
  int uniqueSectionId; // 0/100=main/main alt, 32063=media explorer, 32060=midi editor, 32061=midi event list editor, 32062=midi inline editor, etc
  const char* idStr; // must be unique across all sections for actions, NULL for reascripts (automatically generated)
  const char* name; // name as it is displayed in the action list, or full path to a reascript file
  void *extra; // reserved for future use
} custom_action_register_t;


/*
** gaccel_register_t allows you to register ("gaccel") an action into the main keyboard section action list, and at the same time
** a default binding for it (accel.cmd is the command ID, desc is the description, and accel's other parameters are the
** key to bind. 
** 7.07+ - can use "gaccel_global" or "gaccel_globaltext" to make the accel registered as a global by default
*/

typedef struct _REAPER_gaccel_register_t
{
  ACCEL accel; // key flags/etc represent default values (user may customize)
  const char *desc; // description (for user customizability)
} gaccel_register_t; // use "gaccel"

/*
** action_help_t lets you register help text ("action_help") for an action, mapped by action name
** (a "help" plugin could register help text for Reaper built-in actions)
*/

typedef struct _REAPER_action_help_t
{
  const char* action_desc;
  const char* action_help;
} action_help_t;

/*
** register("toggleaction", toggleactioncallback) lets you register a callback function
** that is called to check if an action registered by an extension has an on/off state.

callback function:
  int toggleactioncallback(int command_id);

return:
  -1=action does not belong to this extension, or does not toggle
  0=action belongs to this extension and is currently set to "off"
  1=action belongs to this extension and is currently set to "on"
*/


/*
** register("hookcustommenu", menuhook) lets you register a menu hook function that is called 
** when a customizable Reaper menu is initialized or shown.

hook (callback) function:
  void menuhook(const char* menuidstr, void* menu, int flag); 

flag:
  0=default menu is being initialized
  1=menu is about to be shown

Do not retrieve or modify any Reaper menus except when your menuhook is called.

Reaper calls menuhook with flag=0 when first initializing the menu, before the first time the menu
is displayed.  You can add menu items or submenus during this call, which then become part of the 
default menu structure (which the user can modify). Do not set any menu checked/grayed state,
do not add menu icons, if you add submenus do not retain handles to the submenus.
Do not modify any menus that don't call menuhook.

Reaper calls menuhook with flag=1 before each time the menu is displayed.  You can do any
dynamic menu populating, setting check/grayed states, adding icons during this call.

All handling should be done relative to menu commands, not menu item positions, 
because these menus can be customized and item order can change.
*/


/*
** editor_register_t lets you integrate editors for "open in external editor" for files directly.
*/

typedef struct _REAPER_editor_register_t // register with "editor"
{
  int (*editFile)(const char *filename, HWND parent, int trackidx); // return TRUE if handled for this file
  const char *(*wouldHandle)(const char *filename); // return your editor's description string

} editor_register_t;


/*
** Project import registration.
** 
** Implemented as a your-format->RPP converter, allowing you to generate directly to a ProjectStateContext
*/
typedef struct _REAPER_project_import_register_t // register with "projectimport"
{
  bool (*WantProjectFile)(const char *fn); // is this our file?
  const char *(*EnumFileExtensions)(int i, char **descptr); // call increasing i until returns NULL. if descptr's output is NULL, use last description
  int (*LoadProject)(const char *fn, ProjectStateContext *genstate); // return 0=ok, Generate RPP compatible project info in genstate
} project_import_register_t;


typedef struct project_config_extension_t // register with "projectconfig"
{
  // plug-ins may or may not want to save their undo states (look at isUndo)
  // undo states will be saved if UNDO_STATE_MISCCFG is set (for adding your own undo points)
  bool (*ProcessExtensionLine)(const char *line, ProjectStateContext *ctx, bool isUndo, struct project_config_extension_t *reg); // returns BOOL if line (and optionally subsequent lines) processed (return false if not plug-ins line)
  void (*SaveExtensionConfig)(ProjectStateContext *ctx, bool isUndo, struct project_config_extension_t *reg);

  // optional: called on project load/undo before any (possible) ProcessExtensionLine. NULL is OK too
  // also called on "new project" (wont be followed by ProcessExtensionLine calls in that case)
  void (*BeginLoadProjectState)(bool isUndo, struct project_config_extension_t *reg); 

  void *userData;
} project_config_extension_t;


typedef struct prefs_page_register_t // register useing "prefpage"
{
  const char *idstr; // simple id str
  const char *displayname;
  HWND (*create)(HWND par);
  int par_id; 
  const char *par_idstr;

  int childrenFlag; // 1 for will have children

  void *treeitem;
  HWND hwndCache;

  char _extra[64]; // 

} prefs_page_register_t;

typedef struct audio_hook_register_t
{
  void (*OnAudioBuffer)(bool isPost, int len, double srate, struct audio_hook_register_t *reg); // called twice per frame, isPost being false then true
  void *userdata1;
  void *userdata2;

  // plug-in should zero these and they will be set by host
  // only call from OnAudioBuffer, nowhere else!!!
  int input_nch, output_nch; 
  ReaSample *(*GetBuffer)(bool isOutput, int idx); 

} audio_hook_register_t;

/*
** Allows you to get callback from the audio thread before and after REAPER's processing.
** register with Audio_RegHardwareHook()

  Note that you should be careful with this! :)

*/


/* 
** Customizable keyboard section definition etc
**
** Plug-ins may register keyboard action sections in by registering a "accel_section" to a KbdSectionInfo*.
*/

struct KbdAccel;

typedef struct _REAPER_KbdCmd
{
  DWORD cmd;  // action command ID
  const char *text; // description of action
} KbdCmd;

typedef struct _REAPER_KbdKeyBindingInfo
{
  int key;  // key identifier
  int cmd;  // action command ID
  int flags; // key flags
} KbdKeyBindingInfo;



typedef struct _REAPER_KbdSectionInfo
{
  int uniqueID; // 0=main, < 0x10000000 for cockos use only plzkthx
  const char *name; // section name

  KbdCmd *action_list;   // list of assignable actions
  int action_list_cnt;

  const KbdKeyBindingInfo *def_keys; // list of default key bindings
  int def_keys_cnt;

  // hwnd is 0 if MIDI etc. return false if ignoring
  bool (*onAction)(int cmd, int val, int valhw, int relmode, HWND hwnd);

  // this is allocated by the host not by the plug-in using it
  // the user can edit the list of actions/macros
#ifdef _WDL_PTRLIST_H_
  WDL_PtrList<struct KbdAccel> *accels;  
  WDL_TypedBuf<int>* recent_cmds;
#else
  void* accels;
  void *recent_cmds;
#endif

  void *extended_data[32]; // for internal use
} KbdSectionInfo;



typedef struct _REAPER_preview_register_t
{
/*
** Note: you must initialize/deinitialize the cs/mutex (depending on OS) manually, and use it if accessing most parameters while the preview is active.
*/

#ifdef _WIN32
  CRITICAL_SECTION cs;
#else
  pthread_mutex_t mutex;
#endif
  PCM_source *src;
  int m_out_chan; // &1024 means mono, low 10 bits are index of first channel
  double curpos;
  bool loop;
  double volume;

  double peakvol[2];
  void *preview_track; // used for track previews, but only if m_out_chan == -1
} preview_register_t;

/*
** preview_register_t is not used with the normal register system, instead it's used with PlayPreview(), StopPreview(), PlayTrackPreview(), StopTrackPreview()
*/



#ifdef REAPER_WANT_DEPRECATED_COLORTHEMESTUFF /* no longer used -- see icontheme.h and GetColorThemeStruct() */

/*
** ColorTheme API access, these are used with GetColorTheme()
*/

#define COLORTHEMEIDX_TIMELINEFG 0
#define COLORTHEMEIDX_ITEMTEXT 1
#define COLORTHEMEIDX_ITEMBG 2
#define COLORTHEMEIDX_TIMELINEBG 4
#define COLORTHEMEIDX_TIMELINESELBG 5
#define COLORTHEMEIDX_ITEMCONTROLS 6
#define COLORTHEMEIDX_TRACKBG1 24
#define COLORTHEMEIDX_TRACKBG2 25
#define COLORTHEMEIDX_PEAKS1 28
#define COLORTHEMEIDX_PEAKS2 29
#define COLORTHEMEIDX_EDITCURSOR 35
#define COLORTHEMEIDX_GRID1 36
#define COLORTHEMEIDX_GRID2 37
#define COLORTHEMEIDX_MARKER 38
#define COLORTHEMEIDX_REGION 40
#define COLORTHEMEIDX_GRID3 61
#define COLORTHEMEIDX_LOOPSELBG 100

#define COLORTHEMEIDX_ITEM_LOGFONT -2 // these return LOGFONT * as (int)
#define COLORTHEMEIDX_TL_LOGFONT -1


#define COLORTHEMEIDX_MIDI_TIMELINEBG 66
#define COLORTHEMEIDX_MIDI_TIMELINEFG 67
#define COLORTHEMEIDX_MIDI_GRID1 68
#define COLORTHEMEIDX_MIDI_GRID2 69
#define COLORTHEMEIDX_MIDI_GRID3 70
#define COLORTHEMEIDX_MIDI_TRACKBG1 71
#define COLORTHEMEIDX_MIDI_TRACKBG2 72
#define COLORTHEMEIDX_MIDI_ENDPT 73
#define COLORTHEMEIDX_MIDI_NOTEBG 74
#define COLORTHEMEIDX_MIDI_NOTEFG 75
#define COLORTHEMEIDX_MIDI_ITEMCONTROLS 76
#define COLORTHEMEIDX_MIDI_EDITCURSOR 77
#define COLORTHEMEIDX_MIDI_PKEY1 78
#define COLORTHEMEIDX_MIDI_PKEY2 79
#define COLORTHEMEIDX_MIDI_PKEY3 80
#define COLORTHEMEIDX_MIDI_PKEYTEXT 81
#define COLORTHEMEIDX_MIDI_OFFSCREENNOTE 103
#define COLORTHEMEIDX_MIDI_OFFSCREENNOTESEL 104

#endif // colortheme stuff deprecated

/*
** Screenset API
** 
*/

/*
  Note that "id" is a unique identifying string (usually a GUID etc) that is valid across 
  program runs (stored in project etc). lParam is instance-specific parameter (i.e. "this" pointer etc).
*/
enum
{
  SCREENSET_ACTION_GETHWND = 0, // returns HWND of screenset window. If searching for a specific window, it will be passed in actionParm

  SCREENSET_ACTION_IS_DOCKED = 1, // returns 1 if docked
  SCREENSET_ACTION_SWITCH_DOCK = 4, //dock if undocked and vice-versa

  SCREENSET_ACTION_LOAD_STATE=0x100, // load state from actionParm (of actionParmSize). if both are NULL, hide.
  SCREENSET_ACTION_SAVE_STATE,  // save state to actionParm, max length actionParmSize (will usually be max(4096, value_returned by SCREENSET_ACTION_WANT_STATE_SIZE)), return length actually used
  SCREENSET_ACTION_WANT_STATE_SIZE, // returns desired size for SCREENSET_ACTION_SAVE_STATE, may or may not be fulfilled!
};
typedef LRESULT (*screensetNewCallbackFunc)(int action, const char *id, void *param, void *actionParm, int actionParmSize);

// This is managed using screenset_registerNew(), screenset_unregister(), etc


/*
** MIDI hardware device access.
**
*/

#ifdef __cplusplus

class midi_Output
{
public:
  virtual ~midi_Output() {}

  virtual void BeginBlock() { }  // outputs can implement these if they wish to have timed block sends
  virtual void EndBlock(int length, double srate, double curtempo) { }
  virtual void SendMsg(MIDI_event_t *msg, int frame_offset)=0; // frame_offset can be <0 for "instant" if supported
  virtual void Send(unsigned char status, unsigned char d1, unsigned char d2, int frame_offset)=0; // frame_offset can be <0 for "instant" if supported

  virtual void Destroy() { delete this; } // allows implementations to do asynchronous destroy (5.95+)

};


class midi_Input
{
public:
  virtual ~midi_Input() {}

  virtual void start()=0;
  virtual void stop()=0;

  virtual void SwapBufs(unsigned int timestamp)=0; // DEPRECATED call SwapBufsPrecise() instead  // timestamp=process ms

  virtual void RunPreNoteTracking(int isAccum) { }

  virtual MIDI_eventlist *GetReadBuf()=0; // note: the event list here has frame offsets that are in units of 1/1024000 of a second, NOT sample frames

  virtual void SwapBufsPrecise(unsigned int coarsetimestamp, double precisetimestamp) // coarse=process ms, precise=process sec, the target will know internally which to use
  {
    SwapBufs(coarsetimestamp);  // default impl is for backward compatibility
  }

  virtual void Destroy() { delete this; } // allows implementations to do asynchronous destroy (5.95+)
};



/*
** Control Surface API
*/

class ReaProject;
class MediaTrack;
class MediaItem;
class MediaItem_Take;
class TrackEnvelope;

class IReaperControlSurface
{
  public:
    IReaperControlSurface() { }
    virtual ~IReaperControlSurface() { }
    
    virtual const char *GetTypeString()=0; // simple unique string with only A-Z, 0-9, no spaces or other chars
    virtual const char *GetDescString()=0; // human readable description (can include instance specific info)
    virtual const char *GetConfigString()=0; // string of configuration data

    virtual void CloseNoReset() { } // close without sending "reset" messages, prevent "reset" being sent on destructor


    virtual void Run() { } // called 30x/sec or so.


    // these will be called by the host when states change etc
    virtual void SetTrackListChange() { }
    virtual void SetSurfaceVolume(MediaTrack *trackid, double volume) { }
    virtual void SetSurfacePan(MediaTrack *trackid, double pan) { }
    virtual void SetSurfaceMute(MediaTrack *trackid, bool mute) { }
    virtual void SetSurfaceSelected(MediaTrack *trackid, bool selected) { }
    virtual void SetSurfaceSolo(MediaTrack *trackid, bool solo) { } // trackid==master means "any solo"
    virtual void SetSurfaceRecArm(MediaTrack *trackid, bool recarm) { }
    virtual void SetPlayState(bool play, bool pause, bool rec) { }
    virtual void SetRepeatState(bool rep) { }
    virtual void SetTrackTitle(MediaTrack *trackid, const char *title) { }
    virtual bool GetTouchState(MediaTrack *trackid, int isPan) { return false; }
    virtual void SetAutoMode(int mode) { } // automation mode for current track

    virtual void ResetCachedVolPanStates() { } // good to flush your control states here

    virtual void OnTrackSelection(MediaTrack *trackid) { } // track was selected
    
    virtual bool IsKeyDown(int key) { return false; } // VK_CONTROL, VK_MENU, VK_SHIFT, etc, whatever makes sense for your surface

    virtual int Extended(int call, void *parm1, void *parm2, void *parm3) { return 0; } // return 0 if unsupported
};

#define CSURF_EXT_RESET 0x0001FFFF // clear all surface state and reset (harder reset than SetTrackListChange)
#define CSURF_EXT_SETINPUTMONITOR 0x00010001 // parm1=(MediaTrack*)track, parm2=(int*)recmonitor
#define CSURF_EXT_SETMETRONOME 0x00010002 // parm1=0 to disable metronome, !0 to enable
#define CSURF_EXT_SETAUTORECARM 0x00010003 // parm1=0 to disable autorecarm, !0 to enable
#define CSURF_EXT_SETRECMODE 0x00010004 // parm1=(int*)record mode: 0=autosplit and create takes, 1=replace (tape) mode
#define CSURF_EXT_SETSENDVOLUME 0x00010005 // parm1=(MediaTrack*)track, parm2=(int*)sendidx, parm3=(double*)volume
#define CSURF_EXT_SETSENDPAN 0x00010006 // parm1=(MediaTrack*)track, parm2=(int*)sendidx, parm3=(double*)pan
#define CSURF_EXT_SETFXENABLED 0x00010007 // parm1=(MediaTrack*)track, parm2=(int*)fxidx, parm3=0 if bypassed, !0 if enabled
#define CSURF_EXT_SETFXPARAM 0x00010008 // parm1=(MediaTrack*)track, parm2=(int*)(fxidx<<16|paramidx), parm3=(double*)normalized value
#define CSURF_EXT_SETFXPARAM_RECFX 0x00010018 // parm1=(MediaTrack*)track, parm2=(int*)(fxidx<<16|paramidx), parm3=(double*)normalized value
#define CSURF_EXT_SETBPMANDPLAYRATE 0x00010009 // parm1=*(double*)bpm (may be NULL), parm2=*(double*)playrate (may be NULL)
#define CSURF_EXT_SETLASTTOUCHEDFX 0x0001000A // parm1=(MediaTrack*)track, parm2=(int*)mediaitemidx (may be NULL), parm3=(int*)fxidx. all parms NULL=clear last touched FX
#define CSURF_EXT_SETFOCUSEDFX 0x0001000B // parm1=(MediaTrack*)track, parm2=(int*)mediaitemidx (may be NULL), parm3=(int*)fxidx. all parms NULL=clear focused FX
#define CSURF_EXT_SETLASTTOUCHEDTRACK 0x0001000C // parm1=(MediaTrack*)track
#define CSURF_EXT_SETMIXERSCROLL 0x0001000D // parm1=(MediaTrack*)track, leftmost track visible in the mixer
#define CSURF_EXT_SETPAN_EX 0x0001000E // parm1=(MediaTrack*)track, parm2=(double*)pan, parm3=(int*)mode 0=v1-3 balance, 3=v4+ balance, 5=stereo pan, 6=dual pan. for modes 5 and 6, (double*)pan points to an array of two doubles.  if a csurf supports CSURF_EXT_SETPAN_EX, it should ignore CSurf_SetSurfacePan.
#define CSURF_EXT_SETRECVVOLUME 0x00010010 // parm1=(MediaTrack*)track, parm2=(int*)recvidx, parm3=(double*)volume
#define CSURF_EXT_SETRECVPAN 0x00010011 // parm1=(MediaTrack*)track, parm2=(int*)recvidx, parm3=(double*)pan
#define CSURF_EXT_SETFXOPEN 0x00010012 // parm1=(MediaTrack*)track, parm2=(int*)fxidx, parm3=0 if UI closed, !0 if open
#define CSURF_EXT_SETFXCHANGE 0x00010013 // parm1=(MediaTrack*)track, whenever FX are added, deleted, or change order. flags=(INT_PTR)parm2, &1=rec fx
#define CSURF_EXT_SETPROJECTMARKERCHANGE 0x00010014 // whenever project markers are changed
#define CSURF_EXT_TRACKFX_PRESET_CHANGED  0x00010015 // parm1=(MediaTrack*)track, parm2=(int*)fxidx (6.13+ probably)
#define CSURF_EXT_SUPPORTS_EXTENDED_TOUCH 0x00080001 // returns nonzero if GetTouchState can take isPan=2 for width, etc
#define CSURF_EXT_MIDI_DEVICE_REMAP 0x00010099 // parm1 = isout, parm2 = old idx, parm3 = new idx

typedef struct _REAPER_reaper_csurf_reg_t
{
  const char *type_string; // simple unique string with only A-Z, 0-9, no spaces or other chars
  const char *desc_string; // human readable description

  IReaperControlSurface *(*create)(const char *type_string, const char *configString, int *errStats); // errstats gets |1 if input error, |2 if output error
  HWND (*ShowConfig)(const char *type_string, HWND parent, const char *initConfigString); 
} reaper_csurf_reg_t; // register using "csurf"/"-csurf"

// note you can also add a control surface behind the scenes with "csurf_inst" (IReaperControlSurface*)instance

#endif // __cplusplus


#ifndef UNDO_STATE_ALL
#define UNDO_STATE_ALL 0xFFFFFFFF
#define UNDO_STATE_TRACKCFG 1 // has track/master vol/pan/routing, routing/hwout envelopes too
#define UNDO_STATE_FX 2  // track/master fx
#define UNDO_STATE_ITEMS 4  // track items and linkedlanes
#define UNDO_STATE_MISCCFG 8 // loop selection, markers, regions, extensions!
#define UNDO_STATE_FREEZE 16 // freeze state -- note that isfreeze is used independently, this is only used for the undo system to serialize the already frozen state
#define UNDO_STATE_TRACKENV 32 // non-FX envelopes only
#define UNDO_STATE_FXENV 64   // FX envelopes, implied by UNDO_STATE_FX too
#define UNDO_STATE_POOLEDENVS 128 // contents of pooled envs -- not position, length, rate etc of pooled env instances, which is part of envelope state
#endif

#ifndef IS_MSG_VIRTKEY
  #ifdef _WIN32
    #define IS_MSG_VIRTKEY(msg) ((msg)->message != WM_CHAR)
  #else
    #define IS_MSG_VIRTKEY(msg) ((msg)->lParam&FVIRTKEY)
  #endif
#endif
#define IS_MSG_FKEY(msg) ((msg)->wParam >= VK_F1 && (msg)->wParam <= VK_F24 && IS_MSG_VIRTKEY(msg))

#define WDL_FILEWRITE_ON_ERROR(is_full) update_disk_counters(0,-101010110 - ((is_full) ? 1 : 0));

#define REAPER_MAX_CHANNELS 128

#endif//_REAPER_PLUGIN_H_

<<<END_FILE sdk/reaper_plugin.h>>>

<<<BEGIN_FILE sdk/reaper_stream/reaper_stream.cpp>>>
#include "reaper_stream.h"

#include <unordered_map>
#include <queue>
#include <mutex>
#include <vector>
#include <string>
#include <cstring>

struct BlockData {
  PCM_source_transfer_t meta;
  std::vector<ReaSample> samples;
};

struct StreamConnection {
  enum Type { WS, SRT } type;
  std::mutex mtx;
  std::queue<BlockData> incoming; // simple loopback queue
};

static std::unordered_map<int, StreamConnection> g_streams;
static int g_nextHandle = 1;

static StreamConnection::Type parseType(const std::string &url)
{
  if (url.rfind("srt://",0) == 0) return StreamConnection::SRT;
  return StreamConnection::WS;
}

int stream_open(const char *url)
{
  if (!url) return 0;
  StreamConnection conn;
  conn.type = parseType(url);
  int handle = g_nextHandle++;
  g_streams.emplace(handle, std::move(conn));
  return handle;
}

int stream_send(int handle, const PCM_source_transfer_t *block)
{
  auto it = g_streams.find(handle);
  if (it == g_streams.end() || !block || !block->samples) return 0;

  BlockData bd;
  bd.meta = *block;
  size_t n = (size_t)block->length * (size_t)block->nch;
  bd.samples.assign(block->samples, block->samples + n);
  bd.meta.samples = bd.samples.data();

  {
    std::lock_guard<std::mutex> lock(it->second.mtx);
    it->second.incoming.push(std::move(bd));
  }
  return 1;
}

int stream_receive(int handle, PCM_source_transfer_t *block)
{
  auto it = g_streams.find(handle);
  if (it == g_streams.end() || !block || !block->samples) return 0;
  std::lock_guard<std::mutex> lock(it->second.mtx);
  if (it->second.incoming.empty()) return 0;

  BlockData bd = std::move(it->second.incoming.front());
  it->second.incoming.pop();

  size_t n = (size_t)bd.meta.length * (size_t)bd.meta.nch;
  size_t requested = (size_t)block->length * (size_t)block->nch;
  if (requested < n) n = requested;
  std::memcpy(block->samples, bd.samples.data(), n * sizeof(ReaSample));
  *block = bd.meta;
  block->samples = block->samples; // keep caller buffer
  block->samples_out = (int)(n / block->nch);
  return block->samples_out;
}

<<<END_FILE sdk/reaper_stream/reaper_stream.cpp>>>

<<<BEGIN_FILE sdk/reaper_stream/reaper_stream.h>>>
#ifndef REAPER_STREAM_H
#define REAPER_STREAM_H

#include "../reaper_plugin.h"

#ifdef __cplusplus
extern "C" {
#endif

// Open a WebSocket or SRT stream. The URL scheme (ws://, wss://, srt://)
// selects the transport. Returns a non-zero handle on success.
int stream_open(const char *url);

// Send an audio block over the stream. Returns non-zero on success.
int stream_send(int handle, const PCM_source_transfer_t *block);

// Receive an audio block from the stream. The caller must allocate a buffer
// large enough to hold the requested number of samples. Returns the number of
// sample pairs received.
int stream_receive(int handle, PCM_source_transfer_t *block);

#ifdef __cplusplus
}
#endif

#endif

<<<END_FILE sdk/reaper_stream/reaper_stream.h>>>

<<<BEGIN_FILE sdk/reaper_vst3_interfaces.h>>>
#ifndef _REAPER_VST3_INTERFACES_H_
#define _REAPER_VST3_INTERFACES_H_

class IReaperHostApplication : public FUnknown // available from IHostApplication in REAPER v5.02+
{
public:
  // Gets a REAPER Extension API function by name, returns NULL is failed
  virtual void* PLUGIN_API getReaperApi(CStringA funcname) = 0;

  virtual void* PLUGIN_API getReaperParent(uint32 w) = 0; // get parent track(=1), take(=2), project(=3), fxdsp(=4), trackchan(=5)

  // Multi-purpose function, returns NULL if unsupported
  virtual void* PLUGIN_API reaperExtended(uint32 call, void *parm1, void *parm2, void *parm3) = 0;

  static const FUID iid;
};

DECLARE_CLASS_IID (IReaperHostApplication, 0x79655E36, 0x77EE4267, 0xA573FEF7, 0x4912C27C)

class IReaperUIEmbedInterface : public FUnknown // supported by REAPER v6.24+, queried from plug-in IEditController
{
  public:
    // note: VST2 uses CanDo "hasCockosEmbeddedUI"==0xbeef0000, then opcode=effVendorSpecific, index=effEditDraw, opt=(float)msg, value=parm2, ptr=parm3
    // see reaper_plugin_fx_embed.h
  virtual Steinberg::TPtrInt embed_message(int msg, Steinberg::TPtrInt parm2, Steinberg::TPtrInt parm3) = 0;

  static const FUID iid;
};

DECLARE_CLASS_IID (IReaperUIEmbedInterface, 0x049bf9e7, 0xbc74ead0, 0xc4101e86, 0x7f725981)
#endif

<<<END_FILE sdk/reaper_vst3_interfaces.h>>>

<<<BEGIN_FILE sdk/timecode.cpp>>>
#include "timecode.h"
#include <cstring>

namespace reaper {
namespace timecode {

static inline uint8_t to_bcd(int v) {
    return ((v / 10) << 4) | (v % 10);
}

static inline int from_bcd(uint8_t v) {
    return (v >> 4) * 10 + (v & 0x0F);
}

void EncodeLTC(const Frame &src, uint8_t out[10]) {
    std::memset(out, 0, 10);
    out[0] = to_bcd(src.frames);
    out[1] = to_bcd(src.seconds);
    out[2] = to_bcd(src.minutes);
    out[3] = to_bcd(src.hours);
}

bool DecodeLTC(const uint8_t in[10], Frame *out) {
    if (!out) return false;
    out->frames  = from_bcd(in[0]);
    out->seconds = from_bcd(in[1]);
    out->minutes = from_bcd(in[2]);
    out->hours   = from_bcd(in[3]);
    return true;
}

void EncodeMTC(const Frame &src, uint8_t out[8]) {
    const int fpsCode = src.rate == FrameRate::FPS24 ? 0 :
                        src.rate == FrameRate::FPS25 ? 1 :
                        src.rate == FrameRate::FPS30_DROP ? 2 : 3;
    out[0] = (0x0 << 4) | (src.frames & 0x0F);
    out[1] = (0x1 << 4) | ((src.frames >> 4) & 0x01);
    out[2] = (0x2 << 4) | (src.seconds & 0x0F);
    out[3] = (0x3 << 4) | ((src.seconds >> 4) & 0x03);
    out[4] = (0x4 << 4) | (src.minutes & 0x0F);
    out[5] = (0x5 << 4) | ((src.minutes >> 4) & 0x03);
    out[6] = (0x6 << 4) | (src.hours & 0x0F);
    out[7] = (0x7 << 4) | ((src.hours >> 4) & 0x01) | (fpsCode << 1);
}

bool DecodeMTC(const uint8_t in[8], Frame *out) {
    if (!out) return false;
    out->frames  = (in[1] & 0x01) << 4 | (in[0] & 0x0F);
    out->seconds = (in[3] & 0x03) << 4 | (in[2] & 0x0F);
    out->minutes = (in[5] & 0x03) << 4 | (in[4] & 0x0F);
    out->hours   = (in[7] & 0x01) << 4 | (in[6] & 0x0F);
    const int fpsCode = (in[7] >> 1) & 0x3;
    out->rate = fpsCode == 0 ? FrameRate::FPS24 :
                fpsCode == 1 ? FrameRate::FPS25 :
                fpsCode == 2 ? FrameRate::FPS30_DROP : FrameRate::FPS30;
    return true;
}

PTPv2Time ToPTP(const Frame &src) {
    PTPv2Time out;
    out.seconds = static_cast<uint64_t>(src.hours) * 3600ULL +
                  static_cast<uint64_t>(src.minutes) * 60ULL +
                  static_cast<uint64_t>(src.seconds);
    const double fps = static_cast<int>(src.rate);
    out.nanoseconds = static_cast<uint32_t>((src.frames / fps) * 1e9);
    return out;
}

Frame FromPTP(const PTPv2Time &src, FrameRate rate) {
    const double seconds = src.seconds + src.nanoseconds / 1e9;
    return FromSeconds(seconds, rate);
}

uint32_t ToST2110RTP(const PTPv2Time &src, uint32_t sampleRate) {
    uint64_t total = src.seconds;
    total *= sampleRate;
    total += (static_cast<uint64_t>(src.nanoseconds) * sampleRate) / 1000000000ULL;
    return static_cast<uint32_t>(total & 0xFFFFFFFFULL);
}

double ToSeconds(const Frame &tc) {
    const double fps = static_cast<int>(tc.rate);
    return tc.hours * 3600.0 + tc.minutes * 60.0 + tc.seconds + tc.frames / fps;
}

Frame FromSeconds(double seconds, FrameRate rate) {
    Frame out;
    out.rate = rate;
    const double fps = static_cast<int>(rate);
    out.hours = static_cast<int>(seconds / 3600.0);
    seconds -= out.hours * 3600.0;
    out.minutes = static_cast<int>(seconds / 60.0);
    seconds -= out.minutes * 60.0;
    out.seconds = static_cast<int>(seconds);
    seconds -= out.seconds;
    out.frames = static_cast<int>(seconds * fps);
    return out;
}

} // namespace timecode
} // namespace reaper

<<<END_FILE sdk/timecode.cpp>>>

<<<BEGIN_FILE sdk/timecode.h>>>
#pragma once

#include <cstdint>
#include <cstddef>

namespace reaper {
namespace timecode {

// Enumeration of supported frame rates.
enum class FrameRate {
    FPS24 = 24,
    FPS25 = 25,
    FPS30 = 30,
    FPS30_DROP = 29
};

// SMPTE timecode frame representation.
struct Frame {
    int hours{0};
    int minutes{0};
    int seconds{0};
    int frames{0};
    FrameRate rate{FrameRate::FPS30};
};

// Encode an LTC frame into 80 bits (10 bytes).
void EncodeLTC(const Frame &src, uint8_t out[10]);
// Decode an LTC frame from 80 bits (10 bytes). Returns false on failure.
bool DecodeLTC(const uint8_t in[10], Frame *out);

// Encode an MTC frame as eight quarter-frame messages.
void EncodeMTC(const Frame &src, uint8_t out[8]);
// Decode an MTC frame from eight quarter-frame messages.
bool DecodeMTC(const uint8_t in[8], Frame *out);

// PTPv2 timestamp representation.
struct PTPv2Time {
    uint64_t seconds{0};
    uint32_t nanoseconds{0};
};

// Convert a timecode frame to a PTPv2 timestamp.
PTPv2Time ToPTP(const Frame &src);
// Generate a timecode frame from a PTPv2 timestamp.
Frame FromPTP(const PTPv2Time &src, FrameRate rate);
// Convert a PTPv2 timestamp to an ST2110 RTP clock value.
uint32_t ToST2110RTP(const PTPv2Time &src, uint32_t sampleRate);

// Convert a timecode frame to seconds relative to start.
double ToSeconds(const Frame &tc);
// Generate a timecode frame from seconds.
Frame FromSeconds(double seconds, FrameRate rate);

// Utility helpers for transport synchronisation.
inline double SyncToIncoming(const Frame &tc) { return ToSeconds(tc); }
inline Frame SyncToOutgoing(double position, FrameRate rate) { return FromSeconds(position, rate); }

} // namespace timecode
} // namespace reaper

<<<END_FILE sdk/timecode.h>>>

<<<BEGIN_FILE sdk/track_playlist/track_playlist_demo.cpp>>>
#include "track_playlist.h"
#include <iostream>

using namespace rpr;

int main() {
  Track t;
  auto verse = t.CreateTrackPlaylist("Verse");
  auto chorus = t.CreateTrackPlaylist("Chorus");
  t.SetActiveTrackPlaylist(chorus);

  std::cout << "Playlists:\n";
  t.EnumTrackPlaylists([](const Playlist &pl, bool active) {
    std::cout << (active ? "* " : "  ") << pl.name << "\n";
  });

  std::string chunk = t.Serialize();
  std::cout << "\nSerialized:\n" << chunk << "\n";

  Track dup = t.DuplicatePlaylistToNewTrack(verse);
  std::cout << "Duplicated Track:\n" << dup.Serialize() << "\n";

  Track cons = t.ConsolidatePlaylistsToNewTrack();
  std::cout << "Consolidated Track:\n" << cons.Serialize() << "\n";
  return 0;
}


<<<END_FILE sdk/track_playlist/track_playlist_demo.cpp>>>

<<<BEGIN_FILE sdk/track_playlist/track_playlist_test.cpp>>>
#include "track_playlist.h"
#include <gtest/gtest.h>

using namespace rpr;

TEST(TrackPlaylistTest, CreateAndSetActive) {
  Track t;
  auto first = t.CreateTrackPlaylist("First");
  auto second = t.CreateTrackPlaylist("Second");
  EXPECT_EQ(first, 0);
  EXPECT_EQ(second, 1);

  std::vector<std::string> names;
  std::vector<bool> actives;
  t.EnumTrackPlaylists([&](const Playlist &pl, bool active) {
    names.push_back(pl.name);
    actives.push_back(active);
  });
  EXPECT_EQ(names, std::vector<std::string>({"First", "Second"}));
  EXPECT_EQ(actives, std::vector<bool>({true, false}));

  EXPECT_TRUE(t.SetActiveTrackPlaylist(second));
  actives.clear();
  t.EnumTrackPlaylists(
      [&](const Playlist &, bool active) { actives.push_back(active); });
  EXPECT_EQ(actives, std::vector<bool>({false, true}));
}

TEST(TrackPlaylistTest, SerializeAndDeserializeRoundTrip) {
  std::string chunk = "PLAYLISTS 2 1\nOne|L1|L2\nTwo|L3\n";
  Track t = Track::Deserialize(chunk);
  EXPECT_EQ(t.Serialize(), chunk);

  std::vector<bool> actives;
  t.EnumTrackPlaylists(
      [&](const Playlist &, bool active) { actives.push_back(active); });
  EXPECT_EQ(actives, std::vector<bool>({false, true}));
}

TEST(TrackPlaylistTest, DuplicatePlaylistToNewTrack) {
  std::string chunk = "PLAYLISTS 2 1\nOne|L1|L2\nTwo|L3\n";
  Track t = Track::Deserialize(chunk);
  Track dup = t.DuplicatePlaylistToNewTrack(1);
  const Playlist *p = dup.GetPlaylist(0);
  ASSERT_NE(p, nullptr);
  EXPECT_EQ(p->name, "Two");
  EXPECT_EQ(p->lanes, std::vector<std::string>({"L3"}));
}

TEST(TrackPlaylistTest, ConsolidatePlaylistsToNewTrack) {
  std::string chunk = "PLAYLISTS 2 1\nOne|L1|L2\nTwo|L3\n";
  Track t = Track::Deserialize(chunk);
  Track cons = t.ConsolidatePlaylistsToNewTrack();
  const Playlist *c = cons.GetPlaylist(0);
  ASSERT_NE(c, nullptr);
  EXPECT_EQ(c->name, "Consolidated");
  EXPECT_EQ(c->lanes, std::vector<std::string>({"L1", "L2", "L3"}));
}

TEST(TrackPlaylistTest, DeserializeBadHeader) {
  std::string chunk = "NOTPLAYLISTS 1 0\nFoo|L1\n";
  Track t = Track::Deserialize(chunk);
  EXPECT_EQ(t.Serialize(), Track().Serialize());
}

TEST(TrackPlaylistTest, DeserializeCRLF) {
  std::string chunk =
      "PLAYLISTS 2 1\r\nOne|L1|L2\r\nTwo|L3\r\n";
  Track t = Track::Deserialize(chunk);
  std::string expected = "PLAYLISTS 2 1\nOne|L1|L2\nTwo|L3\n";
  EXPECT_EQ(t.Serialize(), expected);
  const Playlist *p = t.GetPlaylist(1);
  ASSERT_NE(p, nullptr);
  ASSERT_EQ(p->lanes.size(), 1u);
  EXPECT_EQ(p->lanes[0], "L3");
}

<<<END_FILE sdk/track_playlist/track_playlist_test.cpp>>>

<<<BEGIN_FILE sdk/track_playlist/track_playlist.cpp>>>
#include "track_playlist.h"
#include <sstream>
#include <algorithm>

namespace rpr {

Track::ID Track::CreateTrackPlaylist(const std::string &name) {
  playlists_.push_back({name, {}});
  if (active_index_ == -1)
    active_index_ = 0;
  return static_cast<ID>(playlists_.size() - 1);
}

bool Track::SetActiveTrackPlaylist(ID id) {
  if (id >= 0 && id < static_cast<ID>(playlists_.size())) {
    active_index_ = id;
    return true;
  }
  return false;
}

void Track::EnumTrackPlaylists(const std::function<void(const Playlist &, bool)> &fn) const {
  for (ID i = 0; i < static_cast<ID>(playlists_.size()); ++i)
    fn(playlists_[i], i == active_index_);
}

std::string Track::Serialize() const {
  std::ostringstream oss;
  oss << "PLAYLISTS " << playlists_.size() << " " << active_index_ << "\n";
  for (const auto &pl : playlists_) {
    oss << pl.name;
    for (const auto &lane : pl.lanes)
      oss << "|" << lane;
    oss << "\n";
  }
  return oss.str();
}

Track Track::Deserialize(const std::string &chunk) {
  Track t;
  std::istringstream iss(chunk);
  std::string header;
  size_t count = 0;
  ID active = -1;
  if (!(iss >> header >> count >> active) || header != "PLAYLISTS")
    return t;
  t.active_index_ = active;

  auto trim_cr = [](std::string &s) {
    if (!s.empty() && s.back() == '\r')
      s.pop_back();
  };

  std::string line;
  std::getline(iss, line); // consume endline
  trim_cr(line);
  for (size_t i = 0; i < count && std::getline(iss, line); ++i) {
    trim_cr(line);
    std::istringstream pl(line);
    std::string name;
    std::getline(pl, name, '|');
    Playlist p{name};
    std::string lane;
    while (std::getline(pl, lane, '|'))
      p.lanes.push_back(lane);
    t.playlists_.push_back(std::move(p));
  }
  return t;
}

Track Track::DuplicatePlaylistToNewTrack(ID id) const {
  Track t;
  if (const Playlist *p = GetPlaylist(id)) {
    t.playlists_.push_back(*p);
    t.active_index_ = 0;
  }
  return t;
}

Track Track::ConsolidatePlaylistsToNewTrack() const {
  Track t;
  Playlist merged{"Consolidated"};
  for (const auto &pl : playlists_)
    merged.lanes.insert(merged.lanes.end(), pl.lanes.begin(), pl.lanes.end());
  t.playlists_.push_back(std::move(merged));
  t.active_index_ = 0;
  return t;
}

const Playlist *Track::GetPlaylist(ID id) const {
  if (id >= 0 && id < static_cast<ID>(playlists_.size()))
    return &playlists_[id];
  return nullptr;
}

} // namespace rpr


<<<END_FILE sdk/track_playlist/track_playlist.cpp>>>

<<<BEGIN_FILE sdk/track_playlist/track_playlist.h>>>
#pragma once
#include <string>
#include <vector>
#include <functional>

namespace rpr {

struct Playlist {
  std::string name;
  std::vector<std::string> lanes;
};

class Track {
public:
  using ID = int;
  Track() = default;

  // API: create a new playlist and return its ID
  ID CreateTrackPlaylist(const std::string &name);

  // API: set active playlist by ID
  bool SetActiveTrackPlaylist(ID id);

  // API: enumerate playlists, callback receives playlist and active flag
  void EnumTrackPlaylists(const std::function<void(const Playlist &, bool)> &fn) const;

  // Serialize playlists to a track state chunk for persistence
  std::string Serialize() const;
  // Restore playlists from a state chunk
  static Track Deserialize(const std::string &chunk);

  // Helper functions
  Track DuplicatePlaylistToNewTrack(ID id) const;
  Track ConsolidatePlaylistsToNewTrack() const;

  const Playlist *GetPlaylist(ID id) const;

private:
  std::vector<Playlist> playlists_;
  ID active_index_ = -1;
};

} // namespace rpr


<<<END_FILE sdk/track_playlist/track_playlist.h>>>

<<<BEGIN_FILE sdk/video_frame.h>>>
#ifndef _REAPER_VIDEO_FRAME_H_
#define _REAPER_VIDEO_FRAME_H_

class IVideoFrame 
{
  public:

  double time_start WDL_FIXALIGN;
  double time_end;

    virtual void AddRef()=0;
    virtual void Release()=0;
    virtual char *get_bits()=0;
    virtual int get_w()=0;
    virtual int get_h()=0;
    virtual int get_fmt()=0; // 'YV12', 'YUY2', 'RGBA' are valid
    virtual int get_rowspan()=0;
    virtual void resize_img(int wantw, int wanth, int wantfmt)=0;

    virtual INT_PTR Extended(int code, INT_PTR parm1, INT_PTR parm2, void* parm3) { return 0; }
  protected:
    virtual ~IVideoFrame() { }
};


#endif


<<<END_FILE sdk/video_frame.h>>>

<<<BEGIN_FILE sdk/video_processor.h>>>
#ifndef _REAPER_VIDEO_PROCESSOR_H_
#define _REAPER_VIDEO_PROCESSOR_H_

#include "video_frame.h"

class IREAPERVideoProcessor
{
public:
  IREAPERVideoProcessor() { process_frame=NULL; get_parameter_value = NULL; userdata = NULL; }
  virtual ~IREAPERVideoProcessor() { }

  enum { REAPER_VIDEO_PROCESSOR_VERSION=0x100 }; 

  // give callbacks to query incoming video frames
  // + ownedSourceInst API + render

  virtual IVideoFrame *newVideoFrame(int w, int h, int fmt)=0; // always use this for IVideoFrames returned by process_frame, never create your own. return it from process_frame(), or Release() it.

  virtual int getNumInputs()=0;
  virtual int getInputInfo(int idx, void **itemptr)=0; // input can be -1 for current context. sets itemptr if non-NULL. trackidx can be 100000000 for preview, or other values
  virtual IVideoFrame *renderInputVideoFrame(int idx, int want_fmt/*0 for native*/)=0; // must treat returned frame as immutable! either return it or Release() it.

  // user-specified
  IVideoFrame *(*process_frame)(IREAPERVideoProcessor *vproc, 
                                const double *parmlist, int nparms,  // first parameter is wet/dry, then subsequent map to that of the plug-in  (up to VIDEO_EFFECT_MAX_PARAMETERS)
                                double project_time, double frate, 
                                int force_format // 0, or 'YV12', 'RGBA', 'YUY2'
                              ); // return video frame

  bool (*get_parameter_value)(IREAPERVideoProcessor *vproc, int idx, double *v); // queries the value of a parameter from the video thread. return false if parameter out of bounds

  void *userdata;

};

/*
 To use IREAPERVideoProcessor in a VST:


    void *ctx=(void*)hostcb(&m_effect,0xdeadbeef,0xdeadf00e,4,NULL,0.0f);
    if (ctx)
    {
      IREAPERVideoProcessor *(*video_CreateVideoProcessor)(void *fxctx, int version);
      *(void **)&video_CreateVideoProcessor = (void *)hostcb(&m_effect,0xdeadbeef,0xdeadf00d,0,"video_CreateVideoProcessor",0.0f);
      if (video_CreateVideoProcessor)
      {
        m_videoproc = video_CreateVideoProcessor(ctx,IREAPERVideoProcessor::REAPER_VIDEO_PROCESSOR_VERSION);
        if (m_videoproc)
        {
          m_videoproc->userdata = _this;
          m_videoproc->process_frame = staticProcessFrame;
          m_videoproc->get_parameter_value = staticGetVideoParam;
        }
      }
    }


  static IVideoFrame *staticProcessVideoFrame(IREAPERVideoProcessor *vproc, const double *parmlist, int nparms, double project_time, double frate,  int force_format)
  {
    IVideoFrame *vf = vproc->newVideoFrame(320,200,'RGBA');
    if (vf)
    {
    // bla blah. parmlist[0] is wet, [1] is parameter, values at video time (which may differ depending on audio). do not update internal state, but use those parameters for rendering
    }
    return vf;
  }

    static bool staticGetVideoParam(IREAPERVideoProcessor *vproc, int idx, double *valueOut)
    {
      // called from video thread, gets current state
      if (idx>=0 && idx < NUM_PARAMS)
      {
        *valueOut = m_parms[idx];
         return true;
      }
      return false;
    }

  */


#endif

<<<END_FILE sdk/video_processor.h>>>

